{"meta":{"title":"Linsip","subtitle":"","description":"","author":"Linsip","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2021-04-28T15:59:57.000Z","updated":"2021-04-28T16:01:10.278Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"JavaSE自学笔记","slug":"JavaSE自学笔记","date":"2021-04-30T13:29:12.000Z","updated":"2021-04-30T18:55:56.446Z","comments":true,"path":"2021/04/30/JavaSE自学笔记/","link":"","permalink":"http://example.com/2021/04/30/JavaSE%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/","excerpt":"","text":"JavaSE自学笔记（本人所看b站视频狂神说Java）初识Java博客自建博客 [Hexo博客的搭建与部署](Hexo博客的搭建部署 - Linsip) MarkDown语法[MarkDown语法笔记](Markdown语法 - Linsip) 常用Dos命令1234567891011121314151617181920212223242526272829303132//退回上级目录cd .. //退回到根目录cd\\//进入某文件夹cd 文件夹路径 //新建文件夹md 文件夹名//删除文件夹rd 文件夹名//拷贝文件copy 文件路径 目标路径 文件//删除文件del 文件路径 文件//查看目录下所有文件dir 路径//格式化硬盘（别乱用！！！！）format 盘符//清理屏幕（clean screen）cls//退出exit 计算机语言发展史(简史)计算机语言可以分为机器语言、汇编语言、高级语言三类，其对应的计算机语言发展历史的三个阶段 第一阶段 1946年2月14日，世界上第一台计算机ENAC诞生，使用的是最原始的穿孔卡片。这种卡片上使用的语言是只有专家才能理解的语言，与人类语言差别极大，这种语言就称为机器语言。机器语言是第一代计算机语言。这种语言本质上是计算机能识别的唯一语言，人类很难理解。以后的语言就是在这个的基础上简化而来。虽然后来发展的语言能让人类直接理解但最终送入计算机的还是这种机器语言。 第二阶段 计算机语言发展到第二代，出现了汇编语言。汇编语言用助记符代替了操作码，用地址符号或标号代替地址码。这样就用符号代替了机器语言的二进制码。汇编语言也称为符号语言。比起机器语言，汇编大大进步了。尽管还是复杂，用起来容易出错，但在计算机语言发展史上是机器语言向更高级的语言进化的桥梁 第三阶段 当计算机语言发展到第三代时，就进入了“面向人类”的高级语言。高级语言是一种接近于人们使用习惯的程序设计语言。它允许用英文写计算程序，程序中的符号和算式也与日常用的数学式子差不多。高级语言发展于20世纪50年代中叶到70年代，流行的高级语言已经开始固化在计算机内存里了，比如 basic语言。现在，计算机语言仍然在不断的发展，种类也相当多，比如 FORTRAN语言， COBOL语言，C语言，C++，C#， PASCAO，JAVA等等。 原文请看：计算机语言的发展简史-马海祥博客 (mahaixiang.cn) Java的历史（简史）1991年4月，James Gosling领导的Green Project计划，致力于开发一种适用于各种电子性消费产品的程序架构，诞生了Java的前身–Oak 1995年5月23日，Oak被更名为Java，由Sun公司在Sun World上正式发布。第一次提出了“Write once,Run anywhere”的口号 ··· JDK JDK（Java Development Kit）称为Java开发包或Java开发工具，是一个编写Java的Applet小程序和应用程序的程序开发环境。JDK是整个Java的核心，包括了Java运行环境（Java Runtime Environment），一些Java工具和Java的核心类库（Java API）。 来源：百度百科 安装JDK：JDK官网 推荐下载Java SE 8或者Java SE 11 JRE Java运行环境（Java Runtime Environment，简称JRE）是一个软件，由太阳微系统所研发，JRE可以让计算机系统运行Java应用程序（Java Application）。 JRE的内部有一个Java虚拟机（Java Virtual Machine，JVM）以及一些标准的类别函数库（Class Library）。 来源：百度百科 HelloWorld第一行代码尝试用记事本写下下面这几行代码或者推荐使用Notepad++ 并且在命令提示符上编译运行出来 123456public class HelloWorld &#123; public static void main(String[] args) &#123; System.out.println(&quot;Hello World&quot;); &#125;&#125; 编译型与解释型编译型：简单来说就像是一个翻译，对我们写的的源代码进行翻译，生成计算机能看得懂的可执行代码 解释型：一边翻译，一边执行 Java（解释型+编译型）：java是通过javac.exe编译成.class文件 然后通过jvm加载.class文件，然后调用java.exe执行文件。在此之前你要下载安装JDK并配置环境变量。 IDEA先了解什么是IDE 集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。所有具备这一特性的软件或者软件套（组）都可以叫集成开发环境。如微软的Visual Studio系列，Borland的C++ Builder、Delphi系列等。该程序可以独立运行，也可以和其它程序并用。IDE多被用于开发HTML应用软件。例如，许多人在设计网站时使用IDE（如HomeSite、DreamWeaver等），因为很多项任务会自动生成。 来源：百度百科 IDEA业界公认最好的Java开发工具 下载：IDEA官网 安装：按自己需求安装，或者默认安装 配置环境变量 我的电脑–&gt;属性–&gt;高级系统设置–&gt;高级–&gt;环境变量 在打开的系统变量中新建变量，变量名：JAVA_HOME，变量值：JDK安装目录 系统变量中Path下添加如下内容%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin; 测试是否配置成功cmd 1java -version 基础语法注释单行注释 Line comment 12345678//注释 这就是注释的基本格式，到本行结束所有的字符被编译器忽略public class Demo01 &#123; public static void main(String[] args) &#123; //输出语句 System.out.println(&quot;Hello World!&quot;); &#125;&#125; 多行注释 block comment 1234567891011/*多行注释多行注释多行注释 */public class Demo02 &#123; public static void main(String[] args) &#123; System.out.println(&quot;China NO.1!&quot;); &#125;&#125; 文档注释JavaDoc 12345/***@author*@version*@since*/ 参数 参数信息 @author 作者 @version 版本号 @since 指明最早使用jdk版本 @param 参数名 @return 返回值 @throws 抛出异常情况 拓展：如何用IDEA生成自己的api文档？ Tools——Generate JavaDoc 标识符 定义 Java的所有组成部分都需要名字。类名、变量名、方法名都被称为标识符 命名规则 类名：首字母大写的驼峰命名，例如 1public class Demo &#123;&#125; 变量名：首字母小写的驼峰命名规则 12int num = 10;int getNum = 100; 方法名：首字母小写的驼峰命名规则 1void getMax() &#123;&#125; 注意事项 所有的标识符都应该以字母A-Z,a-z美元$或者下划线**_**开始 标识符大小写敏感 标识符可以用中文但是不建议 不得使用Java中的关键字作为标识符 关键字 java中一共有53个关键字 常用关键字： abstract default if private this boolean do implements protected throw break double import public throws byte else instanceof return transient case extends int short try catch final interface static volatile char finally long strictfp while class float native super const for new switch continue goto package synchronized 注 Java中的true和false不是关键字 Java中有两个特殊关键字（Java保留字，Java不用，你也不能用）goto，const。 数据类型java是一种强类型语言，即java的变量的使用要严格符合规定，先定义再使用 强类型语言：所有变量的定义必须严格符合规定，必须先定义后使用。安全性高，速度慢 弱类型语言： JS VB Java的数据类型分为基本数据类型和引用类型 基本数据类型 8种基本数据类型primitive type 整数类型 类型 占位 最值 注 byte 8bit 0x7f~0x80 (127) short 16bit 0x7fff~0x8000 (32767) int 32bit 0x7fffffff~0x80000000 (21亿) long 64bit … 字面量需要使用L后缀 代码如下 12345678910111213141516171819202122232425public class Demo01&#123; public static void main(String[] args)&#123; //八大基本数据类型 //整数类型 int num1 = 10;//最常用 byte num2 = 20; short num3 = 30; long num4 = 40L;//long类型要在数字后加一个L //浮点数 float num5 = 10.1F;//float类型要在数字后面加F double num6 = 3.14; //字符 char name = &#x27;a&#x27;; //字符串，String不是关键字，是一个类 //String name = &quot;马林&quot;; //布尔值 boolean flag = true; &#125;&#125; 浮点类型 float（浮点型）:32bit double（双精度）:64bit 类型 占位 最值 注 float 32 (-2^31)~(2^31-1) float类型精度过低，很少使用（一般都用double），字面量后缀F double 64 浮点数的字面量默认为double，字面量后缀D 字符类型 char（字节型）:16bit 类型 占位 取值 注 char 16 0~2^16-1 char是一个2进制数（16位无符号整数），这个数值是一个unicode编码 编码拓展 某个数除了表示一个数之外，还可以表示为一个字符 Unicode编码是全球范围内的编码方法 12345678910111213package datatype;/*编码拓展Unicode编码65--A97--a */public class Demo02 &#123; public static void main(String[] args) &#123; char c = 65; System.out.println(c);//A &#125;&#125; 特殊字符用转义字符表示 转义字符 代表的意思 \\n 回车 \\t 制表 ··· 布尔类型 boolean类型：用于表达真假。常用于判断语句。 类型 占位 取值 注 boolean 1 false true 默认值为false 引用类型 reference type 类 接口 数组 类型转换Java是强类型语言，进行有些运算的时候需要用到类型转换。 不同类型的数据先转换为同一类型的数据，然后进行计算 123char c = &#x27;a&#x27;;int i = 1;System.out.println((int)c+i);//98 基本数据类型转换 基本数据类型转换分为强制类型转换和自动类型转换（隐式类型转换） 自动类型转换方向 char–&gt;int–&gt;long–&gt;float–&gt;double byte–&gt;short–&gt;int–&gt;long–&gt;float–&gt;double 强制类型转换方向 char&lt;–int&lt;–long&lt;–float&lt;–double byte&lt;–short&lt;–int&lt;–long&lt;–float&lt;–double 强制类型转换会出现内存溢出的情况 123int i = 128;byte b = (int)i;//内存溢出System.out.println(b);//-128 也可能有精度问题 123double d1 = 20.7;int i = (int)d1;System.out.println(i);//20 操作比较大的数的时候注意溢出问题 1234567891011public class Demo public static void main(String[] args)&#123; int money = 10_0000_0000;//JDK7的新特性，数字之间加_用于区分数字，计算不受影响 int year = 20; int total = money*year;//计算的时候溢出了 long total2 = money*year;//默认类型int，右边在计算之前就出现问题 System.out.println(total);//-1474836480 System.out.println(total2);//-1474836480 //解决方法：在计算之前先转换数据类型 long total3 = money*(long)year;&#125; 自动类型转换 低–高，不会存在内存溢出的问题。 注意点 不能对布尔类型进行转换 不能将变量类型转换为不相干的类型 把高容量数据转换为低容量数据 ，须强制转换 转换的时候会有内存溢出或者精度问题的情况 引用类型转换 向下转型：小类型转大类型 向上转型：大类型转小类型 instanceof：检查引用对象的类型 变量与常量变量就是可以变化的量 Java变量是程序的最基本的存储单元，其要素包括变量名、变量类型和作用域。 12数据类型 变量名 = 值;可以用逗号隔开用于声明多个同类型变量。type varName [=value] [&#123;,varName[=value]&#125;]; 注意事项 每个变量都有其类型，可以是基本类型，也可以是引用类型。 变量名必须为合法的标识符。 变量的声明是一条完整的语句，因此每个声明都必须以分号结束。 变量的作用域 类变量 实例变量 局部变量 1234567public class Variable&#123; static int allClicks = 0;//类变量 加了static的变量 从属于类，随着类出现和消失 String str = &quot;hello world!&quot;;//实例变量:从属于对象，在类的里面，方法的外面，如果不进行初始化，则会变为该数据类型的默认值 0 0.0 u0000 false null（除了基本类型其他的都是null） public void method()&#123; int i = 0;//局部变量 &#125;&#125; 12345678910111213141516171819202122232425public class Demo &#123; //类变量 static static int salary = 2500; //属性：变量，类里面除了方法还可以定义一些属性 //实例变量，从属于对象 String name; int age; //main方法 public static void main[String[] args]&#123; //局部变量；必须声明和初始化值 int i = 10; System.out.println(i); //变量类型 变量名 = new Demo(); Demo demo = new Demo(); System.out.println(demo.name); System.out.println(demo.age); &#125; public void add()&#123; System.out.println(i); &#125;&#125; 变量的命名规范 所有的变量、方法、类名：见名知意 类成员变量：首字母小写和驼峰原则：monthSalary 常量：大写字母和下划线 MAX_VALUE 类名：首字母大写和驼峰原则 Demo 方法名：首字母小写和驼峰原则 run() getMax() 常量：初始化后不能改变的值 常量 可以理解为一种特殊的变量，他的值被设定后，在程序运行期间不会改变。 常量名一般用大写字母表示 12final 常量名 = 常量值；final PI = 3.14; 123456789public class Demo&#123; static final double PI = 3.14;//修饰符不分前后 public static void main [String[] args]&#123; System.out.println(PI); &#125;&#125; 运算符算数运算符 123456789101112131415public class Demo01&#123; //算数运算符 public static void main[String[] args]&#123; int a = 10; int b = 20; int c = 30; int d = 40; int e = 21; System.out.println(a+b);//30 System.out.println(a-b);//-10 System.out.println(a*b);//200 System.out.println(a/(double)b);//0.5 System.out.println(e%a);//%取余 也叫模运算 即21/10=2...1 21%10=1 &#125;&#125; 注 整数除法运算，会出现下溢出现象 1234567public class Demo02 &#123; public static void main(String[] args) &#123; int a = 4; int b = 3; System.out.println(a/b);//1 下溢出，余数1被舍弃 &#125;&#125; 低于int类型（short）（byte）的运算都按int类型运算 12345678910111213public class Demo &#123; public static void main[String[] args]&#123; long a = 111222333222111L; int b = 123; short c = 10; byte d = 8; // System.out.println(a+b+c+d);//Long System.out.println(b+c+d);//Int System.out.println(C+D);//Int &#125;&#125; 模运算（%）表示计算除法的余数 0对其他数的余数为0 负数的余数是负数 1 自增自减 123456789101112public class Demo&#123; public static void main(String[] args)&#123; //++ -- 自增 自减 int a = 3; int b = a++;//表示a先赋值给b，然后再自增1 System.out.println(a);//4 int c = ++a;//表示a先自增1，然后赋值给c System.out.println(a);//5 System.out.println(b);//3 System.out.println(c);//5 &#125;&#125; 赋值运算符 =赋值运算符表示把等号右边的赋值给左边 ==才是现实意义上的等于，属于关系运算符 关系运算符 12345678910public class Demo&#123; public static void main (String[] args)&#123; //关系运算符，返回的是布尔值 false true int a = 10; int b = 20; System.out.println(a&gt;b); System.out.println(a&lt;b); System.out.println(a==b); &#125;&#125; 逻辑运算符 123456789101112131415161718//逻辑运算符public class Demo&#123; pubic static void main(String[] args)&#123; //&amp;&amp;与 ||或 !非 boolean a = true; boolean b = false; System.out.println(&quot;a&amp;&amp;b:&quot;+(a&amp;&amp;b)); System.out.println(&quot;a||b&quot;+(a||b)); System.out.println(&quot;!(a&amp;&amp;b)&quot;+!(a&amp;&amp;b)); //短路运算,进行逻辑与运算时会发生短路运算 int c = 5; boolean d = (c&lt;4)&amp;&amp;(c++&lt;4);//这里发生了短路运算，与运算下，c&lt;4为false，计算机就不会计算&amp;&amp;后面的c++&lt;4,所以c还是5，不会自增 System.out.println(c);//5 System.out.println(d);//false &#125;&#125; 位运算符 12345678910111213141516171819202122232425262728//位运算public class Demo&#123; /* A = 0011 1100 B = 0000 1101 A&amp;B = 0000 1100 如果A与B两个二进制数对应位上都为1，结果才为1，否则就是0 A|B = 0011 1101 如果A与B两个二进制数对应位上都为0，结果才为0，否则就是1 A^B = 0011 0001 如果A与B两个二进制数相对应位上相同就为0，不同就为1 ~B = 1111 0010 取反 2*8怎么运算最快？2*2*2*2 0000 0000 0 0000 0001 1 0000 0010 2 0000 0011 3 0000 0100 4 ... 0001 0000 16 &lt;&lt; *2 &gt;&gt; /2 */ public static void main(String[] args)&#123; //2*8怎么运算最快？2*2*2*2 System.out.println(2&lt;&lt;3); &#125;&#125; 拓展 如何进行幂运算 1234567public class Demo&#123; public static void main(String[] args)&#123; //幂运算 很多运算需要用到一些工具类 double pow = Math.pow(2,3);//2^3 Math工具类位于Java.lang包下，其方法都是静态方法，直接类名.方法名就可以使用 System.out.println(pow); &#125;&#125; 条件运算符 1234567891011//三元运算符public class Demo &#123; public static void main&#123; //x?y:z //如果x为true，结果就为y，否则就为z int score = 80; String type = score&lt;60?&quot;不及格&quot;:&quot;及格&quot;; System.out.println(type);//及格 &#125;&#125; 拓展赋值运算符 12345678910111213141516//拓展运算符public class Demo&#123; public static void main(String[] args)&#123; int a = 10; int b = 20; a+=b; a-=b; a*=b; a/=b; //字符串连接符+ +遇到String类型的会变为字符串连接符 System.out.println(&quot;&quot;+a+b);//1020 System.out.println(a+b+&quot;&quot;);//30 &#125;&#125; 1234567891011121314public class Demo &#123; public static void main[String[] args]&#123; long a = 111222333222111L; int b = 123; short c = 10; byte d = 8; // System.out.println(a+b+c+d);//Long System.out.println(b+c+d);//Int System.out.println(C+D);//Int &#125;&#125; 包机制为了更好的组织类，java提供了包机制，用于区别类名的命名空间 包语句的语法格式 1package pkg1[.pkg2[.pkg3...]]; 一般利用公司域名的倒置作为包名比如www.baidu.com&gt;com.baidu.www 为了使用某一个包的成员，我们需要在java程序中导入该包。 1import package1[.package2...].(classname|*); JavaDoc用idea生成api帮助文档 Tools–&gt;Generate JavaDoc 流程控制Scanner类Scanner类的hasNext()与hasNextLine()判断是否还有输入的数据 通过Scanner类的next()与nextLine()方法获取输入的字符串 示例一： 123456789101112131415import java.util.Scanner;//导包语句，Idea自动生成public class ScannerDemo &#123; public static void main(String[] args)&#123; //创建一个Scanner对象 Scanner scanner = new Scanner(System.in); //判断用户有没有输入字符串 if (scanner.hasNext())&#123; // String str = scanner.next(); System.out.println(&quot;输入的内容为：&quot;+str); &#125; //关闭scanner，凡是属于IO流的类不关闭就会一直占用资源 scanner.close(); &#125; &#125; 示例二： 1234567891011121314151617181920import java.util.Scanner;public class ScannerDemo02 &#123; public static void main(String[] args) &#123; //创建一个Scanner对象 Scanner scanner = new Scanner(System.in); //提示用户输入 System.out.println(&quot;输入名字&quot;); //判断用户是否输入 if (scanner.hasNextLine()) &#123; //String类用于接收 String name = scanner.nextLine(); //打印出名字 System.out.println(name); &#125; //关闭scanner，减少资源占用 scanner.close(); &#125;&#125; next(): 一定读取到有效字符后才结束输入 有效字符前的空格，会被方法忽略 有效字符后面的空格，会被方法当为结束符 next()方法不能得到带有空格的字符串 nextLine(): 以回车作为结束符 可以获得空格 练习题1：输入多个数字，并求出总和与平均数，通过非数字的输入来结束输出并输出执行结果 12345678910111213141516171819202122import java.util.Scanner;public class ScannerDemo03 &#123; public static void main(String[] args) &#123; //定义两个变量用于后面的求和与计算平均数 double sum = 0; int num = 0; //new一个Scannner类的对象 Scanner scanner = new Scanner(System.in); //用循环来判断是否输入的是数字，以及求和，累计数字个数 while (scanner.hasNextDouble()) &#123; sum += scanner.nextDouble(); num++; &#125; //输出结果 System.out.println(&quot;输入数字的个数为&quot; + num); System.out.println(&quot;输入数字的和为：&quot; + sum); System.out.println(&quot;输入数字的平均数为&quot; + (sum / num)); //关闭scanner scanner.close(); &#125;&#125; 顺序结构顺序结构是Java的基本结构，除非特别指明，否则就按从上到下，从左到右，一句一句的执行。 顺序结构是最基本的算法结构，是任何算法都离不开的一种基本算法结构。 选择结构if - else语句 基本语法： if单选择结构语法 123if (布尔表达式) &#123; 语句&#125; if双选择结构语法 12345if(布尔表达式)&#123; 语句1&#125;else &#123; 语句2&#125; if多选择结构语法 123456789if(布尔表达式1)&#123; 语句1&#125;else if(布尔表达式2)&#123; 语句2&#125;else if(布尔表达式3)&#123; 语句3&#125;else&#123; 语句4&#125; 示例 12345678910public class IfDemo &#123; public static void main (String[] args)&#123; int i = 1; if(i==1)&#123; System.out.println(&quot;Hello World!&quot;); &#125;else&#123; System.out.println(&quot;你好，世界！&quot;) &#125; &#125;&#125; 练习1:输入成绩，判断成绩，60以上成绩合格，60以下成绩不合格 123456789101112131415161718public class IfDemo &#123; public static void main(String[] args) &#123; Scanner scanner = new Scanner(System.in); System.out.println(&quot;请输入成绩：&quot;); if (scanner.hasNextInt()) &#123; int i = scanner.nextInt(); if (i &gt;= 60 &amp;&amp; i &lt;= 100) &#123; System.out.println(&quot;成绩合格&quot;); &#125; else if (i &gt;= 0 &amp;&amp; i &lt; 60) &#123; System.out.println(&quot;成绩不合格&quot;); &#125; else &#123; System.out.println(&quot;非法成绩！！！&quot;); &#125; &#125;else&#123; System.out.println(&quot;请输入整数！！！&quot;); &#125; &#125;&#125; switch - case语句 基本语法 1234567switch () &#123; case 字面量: 代码; break; default 字面量: 代码;&#125; 注意点 switch不能处理long类型，Java se7开始 switch支持String类型 case后面必须为数字或者字面量，不能写语句 default表示没有满足case条件的其他一切情况 不要忘记写break，不写会出现”case穿透“，后面的case、default都会执行 循环结构while循环 基本语法 123while (布尔表达式) &#123; 循环体&#125; 示例 12345678910public class WhileDemo &#123; public static void main(String[] args) &#123; //输出1~100 int i = 0; while (i&lt;100)&#123; i++; System.out.println(i); &#125; &#125;&#125; 注意点 循环体内一定要有能让布尔表达式为false的情况，否则就是死循环，会一直执行循环体 死循环 当我们有特殊需求需要使用死循环的时候 例如：输出0~无限大 123456789public class WhileDemo01 &#123; public static void main(String[] args) &#123; int i = 0; while (true) &#123; i++; System.out.println(i); &#125; &#125;&#125; 尽量不要这么写，cpu会卡死！！！ do - while循环 基本语法 123do &#123; //循环体语句&#125; while (布尔表达式); 相对于while循环，do-while循环会至少执行一次循环体 示例 1234567891011121314public class DoWhileDemo &#123; public static void main(String[] args) &#123; int a = 0; while (a &lt; 0) &#123; a++; System.out.println(a); &#125; do &#123; a++; System.out.println(a);//这里会输出1 &#125; while (a &lt; 0); &#125;&#125; for循环 基本语法 123for (初始化语句;布尔表达式;更新) &#123; //循环体语句&#125; 注意点： 先执行初始化语句，初始化语句可以初始化一个或多个循环控制变量，也可以为空 然后执行布尔表达式，布尔表达式为true则执行一次循环体语句，之后是更新语句，布尔表达式，循环体语句……直到布尔表达式为false就执行终止循环 练习题1：计算0~100之间奇数与偶数的和 1234567```练习题2：用for循环输出1~1000之间能被5整除的数，每行三个```java 练习题3：打印九九乘法表 123456789101112```**增强for循环**Java5引入了一种主要用于数组或者集合的增强型for循环语法格式```javafor (声明语句:表达式) &#123; //代码&#125; 注意点 声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环体语句块，其值与此时数组元素的值相等。 表达式：表达式是要访问的数组名或者是返回值为数组的方法。 break &amp; continuebreak在任何循环体主体部分，均可用break控制循环的流程。break用于强行退出循环，不执行循环中的剩余语句。 continue语句实在循环体语句中，用于阻止某次循环，即跳过循环体中未执行的语句，接着进行下一次是否执行循环的判定。 拓展： goto关键字很早就在程序设计语言中出现。尽管goto仍是Java的一个保留字，但并未在语言中得到正式的使用；Java没有goto。然而在break和continue这两个关键字上，可以看到goto的影子————带标签的break和continue 标签是指后面跟一个冒号的标识符例如：label 对于Java来说，唯一用到标签的地方是在循环语句之前。在循环语句之前设置标签的唯一理由是：我们希望在其中嵌套另一个循环，因为break和continue关键字只会终止当前循环，但是如果和标签一起使用，他们就会中断到存在标签的地方 方法什么是方法 方法定义 方法调用 方法重载 命令行传参 可变长参数 递归 数组数组的定义 数组的使用 二维数组 Arrays工具类 排序算法 面向对象什么是对象 类与对象 构造方法 new对象 封装 继承 多态 修饰符 接口 内部类 异常Throwable 五个关键字 自定义异常 常用类Object Math Random File 包装类 Data String StringBuffer StringBuilder 集合框架Collection IO流字节流 字符流 节点流 处理流 多线程进程与线程 run()，start() 线程创建方式 静态代理 Lambda表达式 线程的状态 常用的方法 线程同步 线程通信 线程池pool 网络编程IP 端口 Socket TCP UDP URL 初始Tomcat 聊天通讯 文件上传 GUI图形界面AWT SWing 贪吃蛇 注解与反射注解 反射 单例模式的探究 Stream ForkJoin","categories":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]},{"title":"Markdown语法","slug":"Markdown语法","date":"2021-04-28T21:57:24.000Z","updated":"2021-04-29T07:15:42.731Z","comments":true,"path":"2021/04/29/Markdown语法/","link":"","permalink":"http://example.com/2021/04/29/Markdown%E8%AF%AD%E6%B3%95/","excerpt":"","text":"Markdown语法标题：#空格+标题名称 字体：粗体 在字的两边加** 斜体 在字的两边加* 删除线 引用： 大于号+空格就是引用 分割线： 三条杠或三个* 图片： 超链接：B站 列表 1点空格 。。。。。。 减号空格 。。。。。。 表格： 代码：1public","categories":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://example.com/tags/Markdown/"}]},{"title":"Hexo博客的搭建部署","slug":"Hexo博客的搭建部署","date":"2021-04-19T16:21:24.000Z","updated":"2021-04-30T19:27:44.975Z","comments":true,"path":"2021/04/20/Hexo博客的搭建部署/","link":"","permalink":"http://example.com/2021/04/20/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/","excerpt":"Hexo博客搭建教程其实Hexo官方文档更详尽，这里就按步骤写起 搭建环境下载安装Git 到Git官网下载合适版本的Git，并安装 检测安装是否成功 1git --version//查看Git版本","text":"Hexo博客搭建教程其实Hexo官方文档更详尽，这里就按步骤写起 搭建环境下载安装Git 到Git官网下载合适版本的Git，并安装 检测安装是否成功 1git --version//查看Git版本 Git安装成功后可以用Git Bash来进行命令行操作 下载安装Note.js 到Note.js中文官网下载合适的版本，并安装 检测是否安装成功 12node -v//查看note版本npm -v//查看npm版本 搭建本地博客安装Hexo 打开Git Bash，输入下面的命令 1npm install -g hexo-cli 检测是否安装成功 1hexo -v 博客初始化 新建一个文件夹作为博客的目录，例如将博客目录设置为myblog 1hexo init myblog 初始化博客 12cd myblognpm install 博客本地效果 Git Bash执行下面的命令 12hexo -g//生成静态页面hexo server//本地预览 查看本地博客效果 将博客部署到Github创建个人Github仓库 注册一个Github账号，并登录 新建一个Github仓库，并命名为yourname.github.io。必须按此格式命名，这里yourname可以自定义，比如我的仓库名Linsip.github.io 配置SSH Git Bash输入下面的命令，生成密钥 12git config --global user.name &quot;你的github账户名字&quot;git config --global user.email &quot;你的github邮箱&quot; 检测输入的用户名与邮箱是否正确 12git config user.namegit config user.email 输入下面命令创建SSH密钥 1ssh-keygen -t rsa -C &quot;youremail&quot; 上传SSH密钥到Github 部署代码到Github上 找到并打开配置文件，修改其内容 Git Bash输入下面命令，安装hexo-deployer-git 1npm install hexo-deployer-git --save// 继续执行下面的命令 123hexo clean//hexo generate//hexo deploy// 打开网址http://yourname.github.io就可以看到你自己搭建的博客。这里的yourname就是你Github仓库的名字 设置个人域名购买域名待完善 Hexo博客常用命令新建博客目录1hexo init &lt;folder&gt; 新建文章123hexo new [layout] &lt;title&gt;//例如hexo n &quot;我的第一篇博客&quot; 生成静态页面1hexo generate 部署内容到网站1hexo deploy 启用本地预览1hexo server Hexo博客常见问题更换博客主题到Hexo官网找到自己喜欢的主题， 让后输入以下命令 1","categories":[{"name":"教程","slug":"教程","permalink":"http://example.com/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]}],"categories":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/categories/%E7%AC%94%E8%AE%B0/"},{"name":"教程","slug":"教程","permalink":"http://example.com/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"},{"name":"Markdown","slug":"Markdown","permalink":"http://example.com/tags/Markdown/"},{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]}