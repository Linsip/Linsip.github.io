{"meta":{"title":"Linsip","subtitle":"","description":"","author":"Linsip","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2021-04-28T15:59:57.000Z","updated":"2021-04-28T16:01:10.278Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Markdown语法","slug":"Markdown语法","date":"2021-04-28T21:57:24.000Z","updated":"2021-04-28T23:08:58.407Z","comments":true,"path":"2021/04/29/Markdown语法/","link":"","permalink":"http://example.com/2021/04/29/Markdown%E8%AF%AD%E6%B3%95/","excerpt":"","text":"Markdown语法标题：#空格+标题名称 字体：粗体 在字的两边加** 斜体 在字的两边加* 删除线 引用： 大于号+空格就是引用 分割线： 三条杠或三个* 图片： 超链接：B站 列表 1点空格 。。。。。。 减号空格 。。。。。。 表格： 代码：1public","categories":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://example.com/tags/Markdown/"}]},{"title":"Hexo博客的搭建部署","slug":"Hexo博客的搭建部署","date":"2021-04-19T16:21:24.000Z","updated":"2021-04-28T22:50:49.925Z","comments":true,"path":"2021/04/20/Hexo博客的搭建部署/","link":"","permalink":"http://example.com/2021/04/20/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/","excerpt":"搭建环境下载安装Git 到Git官网下载合适版本的Git，并安装 检测安装是否成功 1git --version//查看Git版本","text":"搭建环境下载安装Git 到Git官网下载合适版本的Git，并安装 检测安装是否成功 1git --version//查看Git版本 Git安装成功后可以用Git Bash来进行命令行操作 下载安装Note.js 到Note.js中文官网下载合适的版本，并安装 检测是否安装成功 12node -v//查看note版本npm -v//查看npm版本 搭建本地博客安装Hexo 打开Git Bash，输入下面的命令 1npm install -g hexo-cli 检测是否安装成功 1hexo -v 博客初始化 新建一个文件夹作为博客的目录，例如将博客目录设置为myblog 1hexo init myblog 初始化博客 12cd myblognpm install 博客本地效果 Git Bash执行下面的命令 12hexo -g//hexo server// 查看本地博客效果 将博客部署到Github创建个人Github仓库 注册一个Github账号，并登录 新建一个Github仓库，并命名为yourname.github.io。必须按此格式命名，这里yourname可以自定义，比如我的仓库名Linsip.github.io 配置SSH Git Bash输入下面的命令，生成密钥 12git config --global user.name &quot;muzihuaner&quot;git config --global user.email &quot;xxxxxx@qq.com&quot; 检测输入的用户名与邮箱是否正确 12git config user.namegit config user.email 输入下面命令创建SSH密钥 1ssh-keygen -t rsa -C &quot;youremail&quot; 上传SSH密钥到Github 部署代码到Github上 找到并打开配置文件，修改其内容 Git Bash输入下面命令，安装hexo-deployer-git 1npm install hexo-deployer-git --save// 继续执行下面的命令 123hexo clean//hexo generate//hexo deploy// 打开网址http://yourname.github.io就可以看到你自己搭建的博客。这里的yourname就是你Github仓库的名字 设置个人域名暂无 Hexo博客常用命令新建博客目录1hexo init &lt;folder&gt; 新建文章1hexo new [layout] &lt;title&gt; 生成静态页面1hexo generate 部署内容到网站1hexo deploy 启用本地预览1hexo server Hexo博客常见问题更换博客主题","categories":[{"name":"教程","slug":"教程","permalink":"http://example.com/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]},{"title":"Java基础语法","slug":"Java基础语法","date":"2021-04-18T23:06:36.000Z","updated":"2021-04-28T23:34:35.898Z","comments":true,"path":"2021/04/19/Java基础语法/","link":"","permalink":"http://example.com/2021/04/19/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/","excerpt":"","text":"Java基础语法注释 单行注释 Line comment 12345678910package comments;//注释 这就是注释的基本格式public class Demo01 &#123; public static void main(String[] args) &#123; //输出语句 System.out.println(&quot;Hello World!&quot;); &#125;&#125; 多行注释 block comment 123456789101112package comments;/*多行注释多行注释多行注释 */public class Demo02 &#123; public static void main(String[] args) &#123; System.out.println(&quot;China NO.1!&quot;); &#125;&#125; 文档注释 JavaDoc javadoc命令是用来生成自己的api文档的 参数 参数信息 @author 作者 @version 版本号 @since 指明最早使用jdk版本 @param 参数名 @return 返回值 @throws 抛出异常情况 12345/***@author*@version*@since*/ 拓展：如何用IDEA生成自己的api文档？ Tools——Generate JavaDoc 标识符定义Java的所有组成部分都需要名字。类名、变量名、方法名都被称为标识符 命名规则类名：首字母大写的驼峰命名，例如 1public class Demo &#123;&#125; 变量名：首字母小写的驼峰命名规则 12int num = 10;int getNum = 100; 方法名：首字母小写的驼峰命名规则 1void getMax() &#123;&#125; 所有的标识符都应该以字母A-Z,a-z美元**$或者下划线_**开始 注意事项 标识符可以用中文但是不建议 关键字java中一共有53个关键字 数据类型java是一种强类型语言，即java的变量的使用要严格符合规定，先定义再使用 强类型语言：所有变量的定义必须严格符合规定，必须先定义后使用。安全性高，速度慢 弱类型语言： JS VB 基本类型primitive type数值类型 整数类型 byte（字节型）:8bit，一个字节范围-128-127 short（短整型）:16bit，两个字节范围-32768-32767 int（整形）:32bit，占四个字节范围-2147483648-2147483647 long（长整型）:64bit，占八个字节范围 浮点类型 float（浮点型）:32bit double（双精度）:64bit 字符类型 char（字节型）:16bit 布尔类型 boolean类型：占一位，其值只有true或者false两个 引用类型reference type类 接口 数组 类型转换Java是强类型语言，进行有些运算的时候需要用到类型转换。 不同类型的数据先转换为同一类型的数据，然后进行计算 123char c = &#x27;a&#x27;;int i = 1;System.out.println((int)c+i);//98 类型转换分为强制类型转换和自动类型转换 强制类型转换会出现内存溢出的情况 123int i = 128;byte b = (int)i;//内存溢出System.out.println(b);//-128 也可能有精度问题 123double d1 = 20.7;int i = (int)d1;System.out.println(i);//20 操作比较大的数的时候注意溢出问题 1234567891011public class Demo public static void main(String[] args)&#123; int money = 10_0000_0000;//JDK7的新特性，数字之间加_用于区分数字，计算不受影响 int year = 20; int total = money*year;//计算的时候溢出了 long total2 = money*year;//默认类型int，右边在计算之前就出现问题 System.out.println(total);//-1474836480 System.out.println(total2);//-1474836480 //解决方法：在计算之前先转换数据类型 long total3 = money*(long)year;&#125; 自动类型转换 低–高，不会存在内存溢出的问题。 注意点 不能对布尔类型进行转换 不能将变量类型转换为不相干的类型 把高容量数据转换为低容量数据 ，须强制转换 转换的时候会有内存溢出或者精度问题的情况 1 基本类型 12345678910111213141516171819202122232425public class Demo01&#123; public static void main(String[] args)&#123; //八大基本数据类型 //整数类型 int num1 = 10;//最常用 byte num2 = 20; short num3 = 30; long num4 = 40L;//long类型要在数字后加一个L //浮点数 float num5 = 10.1F;//float类型要在数字后面加F double num6 = 3.14; //字符 char name = &#x27;a&#x27;; //字符串，String不是关键字，是一个类 //String name = &quot;马林&quot;; //布尔值 boolean flag = true; &#125;&#125; 引用类型 类 接口 数组 类型转换 常量与变量 运算符 常量和变量变量变量就是可以变化的量 Java变量是程序的最基本的存储单元，其要素包括变量名、变量类型和作用域。 12数据类型 变量名 = 值;可以用逗号隔开用于声明多个同类型变量。type varName [=value] [&#123;,varName[=value]&#125;]; 注意事项 每个变量都有其类型，可以是基本类型，也可以是引用类型。 变量名必须为合法的标识符。 变量的声明是一条完整的语句，因此每个声明都必须以分号结束。 变量的作用域 类变量 实例变量 局部变量 1234567public class Variable&#123; static int allClicks = 0;//类变量 加了static的变量 从属于类，随着类出现和消失 String str = &quot;hello world!&quot;;//实例变量:从属于对象，在类的里面，方法的外面，如果不进行初始化，则会变为该数据类型的默认值 0 0.0 u0000 false null（除了基本类型其他的都是null） public void method()&#123; int i = 0;//局部变量 &#125;&#125; 12345678910111213141516171819202122232425public class Demo &#123; //类变量 static static int salary = 2500; //属性：变量，类里面除了方法还可以定义一些属性 //实例变量，从属于对象 String name; int age; //main方法 public static void main[String[] args]&#123; //局部变量；必须声明和初始化值 int i = 10; System.out.println(i); //变量类型 变量名 = new Demo(); Demo demo = new Demo(); System.out.println(demo.name); System.out.println(demo.age); &#125; public void add()&#123; System.out.println(i); &#125;&#125; 变量的命名规范 所有的变量、方法、类名：见名知意 类成员变量：首字母小写和驼峰原则：monthSalary 常量：大写字母和下划线 MAX_VALUE 类名：首字母大写和驼峰原则 Demo 方法名：首字母小写和驼峰原则 run() getMax() 常量：初始化后不能改变的值 常量可以理解为一种特殊的变量，他的值被设定后，在程序运行期间不会改变。 常量名一般用大写字母表示 12final 常量名 = 常量值；final PI = 3.14; 123456789public class Demo&#123; static final double PI = 3.14;//修饰符不分前后 public static void main [String[] args]&#123; System.out.println(PI); &#125;&#125; 运算符算数运算符赋值运算符关系运算符逻辑运算符位运算符条件运算符拓展赋值运算符123456789101112131415161718public class Demo&#123; //算数运算符 public static void main[String[] args]&#123; int a = 10; int b = 20; int c = 30; int d = 40; int e = 21; System.out.println(a+b);//30 System.out.println(a-b);//-10 System.out.println(a*b);//200 System.out.println(a/(double)b);//0.5 System.out.println(e%a);//%取余 也叫模运算 即21/10=2...1 21%10=1 &#125;&#125; 1234567891011121314public class Demo &#123; public static void main[String[] args]&#123; long a = 111222333222111L; int b = 123; short c = 10; byte d = 8; // System.out.println(a+b+c+d);//Long System.out.println(b+c+d);//Int System.out.println(C+D);//Int &#125;&#125; 1234567891011public class Demo&#123; public static void main (String[] args)&#123; //关系运算符，返回的是布尔值 false true int a = 10; int b = 20; System.out.println(a&gt;b); System.out.println(a&lt;b); System.out.println(a==b); &#125;&#125; 123456789101112public class Demo&#123; public static void main(String[] args)&#123; //++ -- 自增 自减 int a = 3; int b = a++;//表示a先赋值给b，然后再自增1 System.out.println(a);//4 int c = ++a;//表示a先自增1，然后赋值给c System.out.println(a);//5 System.out.println(b);//3 System.out.println(c);//5 &#125;&#125; 如何进行幂运算 1234567public class Demo&#123; public static void main(String[] args)&#123; //幂运算 很多运算需要用到一些工具类 double pow = Math.pow(2,3);//2^3 System.out.println(pow); &#125;&#125; 123456789101112131415161718//逻辑运算符public class Demo&#123; pubic static void main(String[] args)&#123; //&amp;&amp;与 ||或 !非 boolean a = true; boolean b = false; System.out.println(&quot;a&amp;&amp;b:&quot;+(a&amp;&amp;b)); System.out.println(&quot;a||b&quot;+(a||b)); System.out.println(&quot;!(a&amp;&amp;b)&quot;+!(a&amp;&amp;b)); //短路运算,进行逻辑与运算时会发生短路运算 int c = 5; boolean d = (c&lt;4)&amp;&amp;(c++&lt;4);//这里发生了短路运算，与运算下，c&lt;4为false，计算机就不会计算&amp;&amp;后面的c++&lt;4,所以c还是5，不会自增 System.out.println(c);//5 System.out.println(d);//false &#125;&#125; 12345678910111213141516171819202122232425262728//位运算public class Demo&#123; /* A = 0011 1100 B = 0000 1101 A&amp;B = 0000 1100 如果A与B两个二进制数对应位上都为1，结果才为1，否则就是0 A|B = 0011 1101 如果A与B两个二进制数对应位上都为0，结果才为0，否则就是1 A^B = 0011 0001 如果A与B两个二进制数相对应位上相同就为0，不同就为1 ~B = 1111 0010 取反 2*8怎么运算最快？2*2*2*2 0000 0000 0 0000 0001 1 0000 0010 2 0000 0011 3 0000 0100 4 ... 0001 0000 16 &lt;&lt; *2 &gt;&gt; /2 */ public static void main(String[] args)&#123; //2*8怎么运算最快？2*2*2*2 System.out.println(2&lt;&lt;3); &#125;&#125; 1234567891011121314151617//拓展运算符public class Demo&#123; public static void main(String[] args)&#123; int a = 10; int b = 20; a+=b; a-=b; a*=b; a/=b; //字符串连接符+ +遇到String类型的会变为字符串连接符 System.out.println(&quot;&quot;+a+b);//1020 System.out.println(a+b+&quot;&quot;);//30 &#125;&#125; 1234567891011//三元运算符public class Demo &#123; public static void main&#123; //x?y:z //如果x为true，结果就为y，否则就为z int score = 80; String type = score&lt;60?&quot;不及格&quot;:&quot;及格&quot;; System.out.println(type);//及格 &#125;&#125; 包机制为了更好的组织类，java提供了包机制，用于区别类名的命名空间 包语句的语法格式 1package pkg1[.pkg2[.pkg3...]]; 一般利用公司域名的倒置作为包名比如www.baidu.com&gt;com.baidu.www 为了使用某一个包的成员，我们需要在java程序中导入该包。 1import package1[.package2...].(classname|*); JavaDoc","categories":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]}],"categories":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/categories/%E7%AC%94%E8%AE%B0/"},{"name":"教程","slug":"教程","permalink":"http://example.com/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://example.com/tags/Markdown/"},{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]}