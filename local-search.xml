<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Markdown语法</title>
    <link href="/2021/04/29/Markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/04/29/Markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><h2 id="标题："><a href="#标题：" class="headerlink" title="标题："></a>标题：</h2><p>#空格+标题名称</p><h2 id="字体："><a href="#字体：" class="headerlink" title="字体："></a>字体：</h2><p><strong>粗体</strong>    在字的两边加**</p><p><em>斜体</em>    在字的两边加*</p><p><del>删除线</del></p><h2 id="引用："><a href="#引用：" class="headerlink" title="引用："></a>引用：</h2><blockquote><p>大于号+空格就是引用</p></blockquote><h2 id="分割线："><a href="#分割线：" class="headerlink" title="分割线："></a>分割线：</h2><hr><p>三条杠或三个*</p><h2 id="图片："><a href="#图片：" class="headerlink" title="图片："></a>图片：</h2><p><img src="" alt="图片名"></p><h2 id="超链接："><a href="#超链接：" class="headerlink" title="超链接："></a>超链接：</h2><p><a href="www.bilibili.com">B站</a></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li>1点空格</li><li>。。。。。。</li></ol><ul><li>减号空格</li><li>。。。。。。</li></ul><h2 id="表格："><a href="#表格：" class="headerlink" title="表格："></a>表格：</h2><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客的搭建部署</title>
    <link href="/2021/04/20/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/"/>
    <url>/2021/04/20/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><h2 id="下载安装Git"><a href="#下载安装Git" class="headerlink" title="下载安装Git"></a>下载安装Git</h2><ol><li><p>到<a href="https://gitforwindows.org/">Git官网</a>下载合适版本的Git，并安装</p></li><li><p>检测安装是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version//查看Git版本<br></code></pre></td></tr></table></figure></li></ol><span id="more"></span><p>Git安装成功后可以用Git Bash来进行命令行操作</p><h2 id="下载安装Note-js"><a href="#下载安装Note-js" class="headerlink" title="下载安装Note.js"></a>下载安装Note.js</h2><ol><li><p>到<a href="http://nodejs.cn/download/">Note.js中文官网</a>下载合适的版本，并安装</p></li><li><p>检测是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v//查看note版本<br>npm -v//查看npm版本<br></code></pre></td></tr></table></figure></li></ol><h1 id="搭建本地博客"><a href="#搭建本地博客" class="headerlink" title="搭建本地博客"></a>搭建本地博客</h1><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ol><li><p>打开Git Bash，输入下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><p>检测是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure></li></ol><h2 id="博客初始化"><a href="#博客初始化" class="headerlink" title="博客初始化"></a>博客初始化</h2><ol><li><p>新建一个文件夹作为博客的目录，例如将博客目录设置为myblog</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myblog<br></code></pre></td></tr></table></figure></li><li><p>初始化博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> myblog<br>npm install<br></code></pre></td></tr></table></figure></li></ol><h2 id="博客本地效果"><a href="#博客本地效果" class="headerlink" title="博客本地效果"></a>博客本地效果</h2><ol><li><p>Git Bash执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -g//<br>hexo server//<br></code></pre></td></tr></table></figure></li><li><p>查看<a href="http://localhost:4000/">本地博客</a>效果</p></li></ol><h1 id="将博客部署到Github"><a href="#将博客部署到Github" class="headerlink" title="将博客部署到Github"></a>将博客部署到Github</h1><h2 id="创建个人Github仓库"><a href="#创建个人Github仓库" class="headerlink" title="创建个人Github仓库"></a>创建个人Github仓库</h2><ol><li>注册一个Github账号，并登录</li><li>新建一个Github仓库，并命名为yourname.github.io。必须按此格式命名，这里yourname可以自定义，比如我的仓库名Linsip.github.io</li></ol><h2 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h2><ol><li><p>Git Bash输入下面的命令，生成密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;muzihuaner&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;xxxxxx@qq.com&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>检测输入的用户名与邮箱是否正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config user.name<br>git config user.email<br></code></pre></td></tr></table></figure></li><li><p>输入下面命令创建SSH密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>上传SSH密钥到Github</p></li></ol><h2 id="部署代码到Github上"><a href="#部署代码到Github上" class="headerlink" title="部署代码到Github上"></a>部署代码到Github上</h2><ol><li><p>找到并打开配置文件，修改其内容</p></li><li><p>Git Bash输入下面命令，安装hexo-deployer-git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save//<br></code></pre></td></tr></table></figure></li><li><p>继续执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean//<br>hexo generate//<br>hexo deploy//<br></code></pre></td></tr></table></figure></li><li><p>打开网址<a href="http://yourname.github.io/">http://yourname.github.io</a>就可以看到你自己搭建的博客。这里的yourname就是你Github仓库的名字</p></li></ol><h1 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h1><p>暂无</p><h1 id="Hexo博客常用命令"><a href="#Hexo博客常用命令" class="headerlink" title="Hexo博客常用命令"></a>Hexo博客常用命令</h1><h2 id="新建博客目录"><a href="#新建博客目录" class="headerlink" title="新建博客目录"></a>新建博客目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init &lt;folder&gt;<br></code></pre></td></tr></table></figure><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><h2 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure><h2 id="部署内容到网站"><a href="#部署内容到网站" class="headerlink" title="部署内容到网站"></a>部署内容到网站</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></table></figure><h2 id="启用本地预览"><a href="#启用本地预览" class="headerlink" title="启用本地预览"></a>启用本地预览</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><h1 id="Hexo博客常见问题"><a href="#Hexo博客常见问题" class="headerlink" title="Hexo博客常见问题"></a>Hexo博客常见问题</h1><h2 id="更换博客主题"><a href="#更换博客主题" class="headerlink" title="更换博客主题"></a>更换博客主题</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础语法</title>
    <link href="/2021/04/19/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/04/19/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基础语法"><a href="#Java基础语法" class="headerlink" title="Java基础语法"></a>Java基础语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>单行注释 Line comment</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> comments;<br><span class="hljs-comment">//注释 这就是注释的基本格式</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//输出语句</span><br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>多行注释 block comment</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> comments;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;China NO.1!&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>文档注释 JavaDoc</li></ul><p>javadoc命令是用来生成自己的api文档的</p><p>参数</p><table><thead><tr><th align="center">参数信息</th><th align="center"></th></tr></thead><tbody><tr><td align="center">@author</td><td align="center">作者</td></tr><tr><td align="center">@version</td><td align="center">版本号</td></tr><tr><td align="center">@since</td><td align="center">指明最早使用jdk版本</td></tr><tr><td align="center">@param</td><td align="center">参数名</td></tr><tr><td align="center">@return</td><td align="center">返回值</td></tr><tr><td align="center">@throws</td><td align="center">抛出异常情况</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*<span class="hljs-doctag">@author</span></span><br><span class="hljs-comment">*<span class="hljs-doctag">@version</span></span><br><span class="hljs-comment">*<span class="hljs-doctag">@since</span></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>拓展：如何用IDEA生成自己的api文档？</p><p>Tools——Generate JavaDoc</p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>Java的所有组成部分都需要名字。<strong>类名、变量名、方法名都被称为标识符</strong></p><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><p>类名：首字母大写的驼峰命名，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>变量名：首字母小写的驼峰命名规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> getNum = <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><p>方法名：首字母小写的驼峰命名规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getMax</span><span class="hljs-params">()</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>所有的标识符都应该以字母<strong>A-Z,a-z</strong>美元**$<strong>或者下划线</strong>_**开始</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p> <strong>标识符可以用中文但是不建议</strong></p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>java中一共有53个关键字</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>java是一种<strong>强类型语言</strong>，即java的变量的使用要严格符合规定，先定义再使用</p><p><strong>强类型语言</strong>：所有变量的定义必须严格符合规定，必须先定义后使用。<strong>安全性高，速度慢</strong></p><p><strong>弱类型语言</strong>：</p><p>JS VB</p><h3 id="基本类型primitive-type"><a href="#基本类型primitive-type" class="headerlink" title="基本类型primitive type"></a><strong>基本类型primitive type</strong></h3><p>数值类型</p><p>整数类型</p><p>byte（字节型）:8bit，一个字节范围-128-127</p><p>short（短整型）:16bit，两个字节范围-32768-32767</p><p>int（整形）:32bit，占四个字节范围-2147483648-2147483647</p><p>long（长整型）:64bit，占八个字节范围</p><p>浮点类型</p><p>float（浮点型）:32bit</p><p>double（双精度）:64bit</p><p>字符类型</p><p>char（字节型）:16bit</p><p>布尔类型</p><p>boolean类型：占一位，其值只有<strong>true</strong>或者<strong>false</strong>两个</p><h3 id="引用类型reference-type"><a href="#引用类型reference-type" class="headerlink" title="引用类型reference type"></a><strong>引用类型reference type</strong></h3><p>类</p><p>接口</p><p>数组</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>Java是强类型语言，进行有些运算的时候需要用到类型转换。</p><p>不同类型的数据先转换为同一类型的数据，然后进行计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>System.out.println((<span class="hljs-keyword">int</span>)c+i);<span class="hljs-comment">//98</span><br></code></pre></td></tr></table></figure><p>类型转换分为<strong>强制类型转换</strong>和<strong>自动类型转换</strong></p><p>强制类型转换会出现<strong>内存溢出</strong>的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">128</span>;<br><span class="hljs-keyword">byte</span> b = (<span class="hljs-keyword">int</span>)i;<span class="hljs-comment">//内存溢出</span><br>System.out.println(b);<span class="hljs-comment">//-128</span><br></code></pre></td></tr></table></figure><p>也可能有<strong>精度</strong>问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">double</span> d1 = <span class="hljs-number">20.7</span>;<br><span class="hljs-keyword">int</span> i = (<span class="hljs-keyword">int</span>)d1;<br>System.out.println(i);<span class="hljs-comment">//20</span><br></code></pre></td></tr></table></figure><p>操作比较大的数的时候注意溢出问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span><br>    public static void main(String[] args)&#123;<br>    <span class="hljs-keyword">int</span> money = <span class="hljs-number">10_0000_0000</span>;<span class="hljs-comment">//JDK7的新特性，数字之间加_用于区分数字，计算不受影响</span><br>    <span class="hljs-keyword">int</span> year = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">int</span> total = money*year;<span class="hljs-comment">//计算的时候溢出了</span><br>    <span class="hljs-keyword">long</span> total2 = money*year;<span class="hljs-comment">//默认类型int，右边在计算之前就出现问题</span><br>    System.out.println(total);<span class="hljs-comment">//-1474836480</span><br>    System.out.println(total2);<span class="hljs-comment">//-1474836480</span><br>    <span class="hljs-comment">//解决方法：在计算之前先转换数据类型</span><br>    <span class="hljs-keyword">long</span> total3 = money*(<span class="hljs-keyword">long</span>)year;<br>&#125;<br></code></pre></td></tr></table></figure><p>自动类型转换 低–高，不会存在内存溢出的问题。</p><p>注意点</p><ul><li>不能对布尔类型进行转换</li><li>不能将变量类型转换为不相干的类型</li><li>把高容量数据转换为低容量数据 ，须强制转换</li><li>转换的时候会有<strong>内存溢出</strong>或者<strong>精度</strong>问题的情况</li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure><p>基本类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span></span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>       <span class="hljs-comment">//八大基本数据类型</span><br>       <br>       <span class="hljs-comment">//整数类型</span><br>       <span class="hljs-keyword">int</span> num1 = <span class="hljs-number">10</span>;<span class="hljs-comment">//最常用</span><br>       <span class="hljs-keyword">byte</span> num2 = <span class="hljs-number">20</span>;<br>       <span class="hljs-keyword">short</span> num3 = <span class="hljs-number">30</span>;<br>       <span class="hljs-keyword">long</span> num4 = <span class="hljs-number">40L</span>;<span class="hljs-comment">//long类型要在数字后加一个L</span><br>       <br>        <span class="hljs-comment">//浮点数</span><br><span class="hljs-keyword">float</span> num5 = <span class="hljs-number">10.1F</span>;<span class="hljs-comment">//float类型要在数字后面加F</span><br>       <span class="hljs-keyword">double</span> num6 = <span class="hljs-number">3.14</span>;<br>       <br>       <span class="hljs-comment">//字符</span><br>        <span class="hljs-keyword">char</span> name = <span class="hljs-string">&#x27;a&#x27;</span>;<br>       <br>       <span class="hljs-comment">//字符串，String不是关键字，是一个类</span><br>       <span class="hljs-comment">//String name = &quot;马林&quot;;</span><br>       <br>       <span class="hljs-comment">//布尔值</span><br>       <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br>   &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>引用类型</p><ul><li>类</li><li>接口</li><li>数组</li></ul><p><strong>类型转换</strong></p><p>常量与变量</p><p>运算符</p><h2 id="常量和变量"><a href="#常量和变量" class="headerlink" title="常量和变量"></a>常量和变量</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量就是可以变化的量</p><p>Java变量是程序的最基本的存储单元，其要素包括变量名、变量类型和<strong>作用域</strong>。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell">数据类型 变量名 = 值;可以用逗号隔开用于声明多个同类型变量。<br><span class="hljs-class"><span class="hljs-keyword">type</span> varName [=value] [&#123;,<span class="hljs-title">varName</span>[=<span class="hljs-title">value</span>]&#125;];</span><br></code></pre></td></tr></table></figure><p>注意事项</p><ul><li>每个变量都有其类型，可以是基本类型，也可以是引用类型。</li><li>变量名必须为合法的标识符。</li><li>变量的声明是一条完整的语句，因此每个声明都必须以分号结束。</li></ul><p>变量的作用域</p><ul><li>类变量</li><li>实例变量</li><li>局部变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Variable</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> allClicks = <span class="hljs-number">0</span>;<span class="hljs-comment">//类变量 加了static的变量 从属于类，随着类出现和消失</span><br>    String str = <span class="hljs-string">&quot;hello world!&quot;</span>;<span class="hljs-comment">//实例变量:从属于对象，在类的里面，方法的外面，如果不进行初始化，则会变为该数据类型的默认值 0 0.0 u0000 false null（除了基本类型其他的都是null）</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<span class="hljs-comment">//局部变量</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-comment">//类变量 static</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> salary = <span class="hljs-number">2500</span>;<br>    <span class="hljs-comment">//属性：变量，类里面除了方法还可以定义一些属性</span><br>    <span class="hljs-comment">//实例变量，从属于对象</span><br>    String name;<br>    <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-comment">//main方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main[String[] args]&#123;<br>        <br>        <span class="hljs-comment">//局部变量；必须声明和初始化值</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;<br>        System.out.println(i);<br>        <br>        <span class="hljs-comment">//变量类型 变量名 = new Demo();</span><br>        Demo demo = <span class="hljs-keyword">new</span> Demo();<br>        System.out.println(demo.name);<br>        System.out.println(demo.age);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(i);<br>    &#125;<br>&#125;<br>    <br></code></pre></td></tr></table></figure><p>变量的命名规范</p><p>所有的变量、方法、类名：<strong>见名知意</strong></p><p>类成员变量：首字母小写和驼峰原则：monthSalary</p><p>常量：大写字母和下划线    MAX_VALUE</p><p>类名：首字母大写和驼峰原则    Demo</p><p>方法名：首字母小写和驼峰原则    run()    getMax()</p><p>常量：初始化后不能改变的值</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>可以理解为一种特殊的变量，他的值被设定后，在程序运行期间不会改变。</p><p>常量名一般用大写字母表示</p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs monkey"><span class="hljs-keyword">final</span> 常量名 = 常量值；<br><span class="hljs-keyword">final</span> <span class="hljs-built_in">PI</span> = <span class="hljs-number">3.14</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>   <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> PI = <span class="hljs-number">3.14</span>;<span class="hljs-comment">//修饰符不分前后</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main [String[] args]&#123;<br>        System.out.println(PI);<br>    &#125;<br>&#125;<br>    <br></code></pre></td></tr></table></figure><hr><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><h3 id="拓展赋值运算符"><a href="#拓展赋值运算符" class="headerlink" title="拓展赋值运算符"></a>拓展赋值运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-comment">//算数运算符</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main[String[] args]&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">int</span> c = <span class="hljs-number">30</span>;<br>    <span class="hljs-keyword">int</span> d = <span class="hljs-number">40</span>;<br>        <span class="hljs-keyword">int</span> e = <span class="hljs-number">21</span>;<br>    <br>    System.out.println(a+b);<span class="hljs-comment">//30</span><br>    System.out.println(a-b);<span class="hljs-comment">//-10</span><br>    System.out.println(a*b);<span class="hljs-comment">//200</span><br>    System.out.println(a/(<span class="hljs-keyword">double</span>)b);<span class="hljs-comment">//0.5</span><br>        System.out.println(e%a);<span class="hljs-comment">//%取余 也叫模运算 即21/10=2...121%10=1</span><br>    <br>&#125;<br>&#125;<br>    <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main[String[] args]&#123;<br>    <span class="hljs-keyword">long</span> a = <span class="hljs-number">111222333222111L</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">123</span>;<br>        <span class="hljs-keyword">short</span> c = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">byte</span> d = <span class="hljs-number">8</span>;<br>        <span class="hljs-comment">//</span><br>        System.out.println(a+b+c+d);<span class="hljs-comment">//Long</span><br>        System.out.println(b+c+d);<span class="hljs-comment">//Int</span><br>        System.out.println(C+D);<span class="hljs-comment">//Int</span><br>            <br>&#125;<br>&#125;<br>   <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>    <span class="hljs-comment">//关系运算符，返回的是布尔值 false true</span><br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>        System.out.println(a&gt;b);<br>        System.out.println(a&lt;b);<br>        System.out.println(a==b);<br>&#125;<br>&#125;<br>    <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">//++ -- 自增 自减</span><br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">int</span> b = a++;<span class="hljs-comment">//表示a先赋值给b，然后再自增1</span><br>System.out.println(a);<span class="hljs-comment">//4</span><br>        <span class="hljs-keyword">int</span> c = ++a;<span class="hljs-comment">//表示a先自增1，然后赋值给c</span><br>System.out.println(a);<span class="hljs-comment">//5</span><br>        System.out.println(b);<span class="hljs-comment">//3</span><br>        System.out.println(c);<span class="hljs-comment">//5</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如何进行幂运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">//幂运算 很多运算需要用到一些工具类 </span><br>        <span class="hljs-keyword">double</span> pow = Math.pow(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//2^3</span><br>        System.out.println(pow);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//逻辑运算符</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-function">pubic <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">//&amp;&amp;与 ||或 !非</span><br>        <span class="hljs-keyword">boolean</span> a = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">boolean</span> b = <span class="hljs-keyword">false</span>;<br>        <br>        System.out.println(<span class="hljs-string">&quot;a&amp;&amp;b:&quot;</span>+(a&amp;&amp;b));<br>        System.out.println(<span class="hljs-string">&quot;a||b&quot;</span>+(a||b));<br>        System.out.println(<span class="hljs-string">&quot;!(a&amp;&amp;b)&quot;</span>+!(a&amp;&amp;b));<br>        <br>        <span class="hljs-comment">//短路运算,进行逻辑与运算时会发生短路运算</span><br>        <span class="hljs-keyword">int</span> c = <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">boolean</span> d = (c&lt;<span class="hljs-number">4</span>)&amp;&amp;(c++&lt;<span class="hljs-number">4</span>);<span class="hljs-comment">//这里发生了短路运算，与运算下，c&lt;4为false，计算机就不会计算&amp;&amp;后面的c++&lt;4,所以c还是5，不会自增</span><br>        System.out.println(c);<span class="hljs-comment">//5</span><br>        System.out.println(d);<span class="hljs-comment">//false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//位运算</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    A = 0011 1100</span><br><span class="hljs-comment">    B = 0000 1101</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    A&amp;B = 0000 1100 如果A与B两个二进制数对应位上都为1，结果才为1，否则就是0</span><br><span class="hljs-comment">    A|B = 0011 1101 如果A与B两个二进制数对应位上都为0，结果才为0，否则就是1</span><br><span class="hljs-comment">    A^B = 0011 0001 如果A与B两个二进制数相对应位上相同就为0，不同就为1</span><br><span class="hljs-comment">    ~B = 1111 0010 取反</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    2*8怎么运算最快？2*2*2*2</span><br><span class="hljs-comment">    0000 00000</span><br><span class="hljs-comment">    0000 00011</span><br><span class="hljs-comment">    0000 00102</span><br><span class="hljs-comment">    0000 00113</span><br><span class="hljs-comment">    0000 01004</span><br><span class="hljs-comment">    ...</span><br><span class="hljs-comment">    0001 000016</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    &lt;&lt;*2</span><br><span class="hljs-comment">    &gt;&gt;/2</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>       <span class="hljs-comment">//2*8怎么运算最快？2*2*2*2</span><br>        System.out.println(<span class="hljs-number">2</span>&lt;&lt;<span class="hljs-number">3</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//拓展运算符</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>        <br>        a+=b;<br>        a-=b;<br>        a*=b;<br>        a/=b;<br>        <br>        <span class="hljs-comment">//字符串连接符++遇到String类型的会变为字符串连接符</span><br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>+a+b);<span class="hljs-comment">//1020</span><br>        System.out.println(a+b+<span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">//30</span><br>    &#125;<br>&#125;<br>    <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//三元运算符</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main&#123;<br>        <span class="hljs-comment">//x?y:z</span><br>        <span class="hljs-comment">//如果x为true，结果就为y，否则就为z</span><br>        <br>        <span class="hljs-keyword">int</span> score = <span class="hljs-number">80</span>;<br>        String type = score&lt;<span class="hljs-number">60</span>?<span class="hljs-string">&quot;不及格&quot;</span>:<span class="hljs-string">&quot;及格&quot;</span>;<br>        System.out.println(type);<span class="hljs-comment">//及格</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h2><p>为了更好的组织类，java提供了包机制，用于区别类名的命名空间</p><p>包语句的语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pkg1[.pkg2[.pkg3...]];<br></code></pre></td></tr></table></figure><p>一般利用公司域名的倒置作为包名比如<a href="http://www.baidu.com&gt;com.baidu.www/">www.baidu.com&gt;com.baidu.www</a></p><p>为了使用某一个包的成员，我们需要在java程序中导入该包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> package1[.package2...].(classname|*);<br></code></pre></td></tr></table></figure><h2 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h2>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
