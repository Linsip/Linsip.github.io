<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>注解与反射</title>
    <link href="/2021/05/20/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/"/>
    <url>/2021/05/20/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="注解与反射"><a href="#注解与反射" class="headerlink" title="注解与反射"></a>注解与反射</h1><h2 id="注解入门"><a href="#注解入门" class="headerlink" title="注解入门"></a>注解入门</h2><h3 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a><strong>什么是注解</strong></h3><p>Annotation 是JDK5.0开始引入的技术</p><h3 id="Annotation的作用"><a href="#Annotation的作用" class="headerlink" title="Annotation的作用"></a><strong>Annotation的作用</strong></h3><ul><li>不是程序本身，可以对程序作出解释</li><li><strong>可以被其他程序（比如编译器）读取</strong></li></ul><h3 id="Annotation的格式"><a href="#Annotation的格式" class="headerlink" title="Annotation的格式"></a><strong>Annotation的格式</strong></h3><ul><li>注解可以以@注释名在代码中存在，还可以添加一些参数值，例如</li><li>@SuppressWarnings(value=”unchecked”).</li></ul><h3 id="Annotation在哪里使用"><a href="#Annotation在哪里使用" class="headerlink" title="Annotation在哪里使用"></a><strong>Annotation在哪里使用</strong></h3><ul><li>可以附加在packages，class， method，field等上面，相当于给他们添加了额外的辅助信息，我们可以通过反射机制编程实现对这些元数据的访问</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> annotation;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//什么是注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>&#123;<br>    <span class="hljs-comment">//@Override 重写的注解</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.toString();<br>    &#125;<br><br><br>    <span class="hljs-comment">//注释的程序元素，不鼓励程序员使用这样的元素，通常是因为它很危险或存在更好的选择。</span><br>    <span class="hljs-comment">// 在使用不被赞成的程序元素或在不被赞成的代码中执行重写时，编译器会发出警告。</span><br>    <span class="hljs-meta">@Deprecated</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Deprecated&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>        List list = <span class="hljs-keyword">new</span> ArrayList();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        test();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h2><h3 id="Override："><a href="#Override：" class="headerlink" title="@Override："></a>@Override：</h3><p>定义在java.lang.Override中，此注解只适用于修辞方法，表示一个方法声明打算重写超类的另一个方法声明，如果方法利用此注释类型进行注解但没有重写超类方法，则编译器会生成一条错误消息。</p><h3 id="Deprecated："><a href="#Deprecated：" class="headerlink" title="@Deprecated："></a>@Deprecated：</h3><p>定义在java.lang.Deprecated中，此注解只适用于修辞方法，属性、类，表示不鼓励程序员使用这样的元素，通常因为它很危险或者有更好的选择。</p><h3 id="SuppressWarnings："><a href="#SuppressWarnings：" class="headerlink" title="@SuppressWarnings："></a>@SuppressWarnings：</h3><p>定义在java.lang.SuppressWarnings中，用来抑制编译时的警告信息。</p><ul><li>@SupressWarnings(“all”)</li><li>@SupressWarnings(“unchecked”)</li><li>@SupressWarnings(“value = {“unchecked”, “deprection”})</li><li>…….</li></ul><h2 id="自定义注解，元注解"><a href="#自定义注解，元注解" class="headerlink" title="自定义注解，元注解"></a>自定义注解，元注解</h2><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>元注解的作用是负责注解其他的注解，Java定义了4个标准的meta-annotation类型，他们被用来提供对其他annotation类型作说明</p><p>这些类型和它们所支持的类在java.lang.annotation包中可以找到</p><ul><li>@Target：用于描述注解的使用范围</li><li>@Retention：表示需要在什么级别保存该注释信息，用于描述注解的生命周期<ul><li>(SOURCE&lt;CLASS&lt;RUNTIME)</li></ul></li><li>@Document：说明该注解将被包含在javadoc中</li><li>@Inherited：说明子类可以继承父类中的该注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-comment">//测试元注解</span><br><span class="hljs-meta">@MyAnnotation</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test02</span> </span>&#123;<br>    <span class="hljs-meta">@MyAnnotation</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;<br><span class="hljs-comment">//定义一个注解</span><br><span class="hljs-comment">//@Target表示我们的注解可以用在那些地方</span><br><span class="hljs-meta">@Target(value = &#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><br><span class="hljs-comment">//@Retention表示我们的注解在什么地方还有效</span><br><span class="hljs-comment">//SOURCE&lt;CLASS&lt;RUNTIME</span><br><span class="hljs-meta">@Retention(value = RetentionPolicy.RUNTIME)</span><br><br><span class="hljs-comment">//@Document：说明该注解将被包含在javadoc中</span><br><span class="hljs-meta">@Documented</span><br><br><span class="hljs-comment">//@Inherited：说明子类可以继承父类中的该注解</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@interface</span> MyAnnotation &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><ul><li>使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口</li><li>分析<ul><li>@interface用来声明一个注解，格式<code>public @interface 注解名 &#123;内容&#125;</code></li><li>其中的每一个方法实际上时声明了一个配置参数</li><li>方法的名称就是参数的名称</li><li>返回值类型就是参数的类型（返回值类型只能是基本类型，Class， String，enum）</li><li>可以通过default来声明参数的默认值</li><li>如果只有一个参数成员，一般参数名为value</li><li>注解元素必须要有值，我们定义注解元素时，经常使用空字符串，0作为默认值</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-comment">//自定义个注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test03</span> </span>&#123;<br>    <span class="hljs-comment">//注解可以显示赋值，如果没有默认值，必须给注释赋值， 参数没有顺序</span><br>    <span class="hljs-meta">@MyAnnotation02(name = &quot;lin&quot;,schools = &#123;&quot;AAA&quot;, &quot;BBB&quot;&#125; )</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br>    <span class="hljs-comment">//参数名value可以省略 @MyAnnotation03(value = &quot;XXX&quot;) ==&gt; @MyAnnotation03(&quot;XXX&quot;)</span><br>    <span class="hljs-meta">@MyAnnotation03(&quot;lin&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;<br><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><br><span class="hljs-meta">@interface</span> MyAnnotation02 &#123;<br>    <span class="hljs-comment">//注解的参数：参数类型 + 参数名();</span><br>    <span class="hljs-comment">//后面的default是默认值，可以定义也可以不定义</span><br>    <span class="hljs-function">String <span class="hljs-title">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">age</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> 0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ad</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> -1</span>;<span class="hljs-comment">//default位-1 表示默认不存在</span><br><br>    String[] schools();<br>&#125;<br><br><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> MyAnnotation03 &#123;<br>    <span class="hljs-comment">//如果只有一个参数成员，一般参数名为value</span><br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="java反射机制概述"><a href="#java反射机制概述" class="headerlink" title="java反射机制概述"></a>java反射机制概述</h3><p>动态语言VS静态语言</p><p>动态语言</p><ul><li>是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点来说，就是在运行时代码可以根据某些条件改变自身结构</li><li>主要的动态语言有：Object-C、C#、JavaScript、PHP、Python等</li></ul><p>静态语言</p><ul><li>与动态语言相对应的，运行时结构不可改变的就是静态语言。如Java、C、C++</li><li>Java不是动态语言，但Java可以被称为”准动态语言“。即java具有一定的动态性，我们可以利用反射机制获得类似动态语言的特性。Java的动态性让编程的时候更加灵活</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-string">&quot;var a = 3; var b = 5; alert(a+b)&quot;</span>;<br>    <span class="hljs-built_in">eval</span>(x)<br>&#125;<br></code></pre></td></tr></table></figure><p>Java Reflection</p><ul><li>Reflection（反射）是Java被视为动态语言的关键，反射机制允许程序在执行其借助Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性以及方法。<ul><li>Class c = Calss.forName(“java.lang.String”)</li></ul></li><li>加载完主类后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象）， 这个对象就包含了完整的类的结构信息。我们可以通过对这个对象看到这个类的结构。这个对象就像是一面镜子，通过这个镜子看到类的结构，所以，我们形象的称之为：反射<ul><li>正常方式：<code>引入需要的“包类”名称</code>–&gt;<code>通过new实例化</code>–&gt;<code>取得实例化对象</code></li><li>反射方式：<code>实例化对象</code>–&gt;<code>getClass()方法</code>–&gt;<code>得到完整的“包类”名称</code></li></ul></li></ul><p>反射机制提供的功能</p><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成动态代理</li><li>…</li></ul><p>反射的优点缺点</p><p>优点</p><ul><li>可以实现动态创建对象和编译，体现很大的灵活性</li></ul><p>缺点</p><ul><li>对性能有影响。使用反射基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的要求。这类操作总是慢于直接执行相同的操作</li></ul><p>反射的主要API</p><ul><li>java.lang.Class：代表一个类</li><li>java.lang.reflect.Method：代表类的方法</li><li>java.lang.reflect.Field：代表类的成员变量</li><li>java.lang.reflect.Constructor：代表类的构造器</li><li>…</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> reflection;<br><span class="hljs-comment">//什么叫反射</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br><br>        Class c1 = Class.forName(<span class="hljs-string">&quot;reflection.User&quot;</span>);<br><br>        System.out.println(c1);<span class="hljs-comment">//class reflection.User</span><br><br>        Class c2 = Class.forName(<span class="hljs-string">&quot;reflection.User&quot;</span>);<br>        Class c3 = Class.forName(<span class="hljs-string">&quot;reflection.User&quot;</span>);<br>        Class c4 = Class.forName(<span class="hljs-string">&quot;reflection.User&quot;</span>);<br><br>        <span class="hljs-comment">//一个类在内存中只有一个Class对象</span><br>        <span class="hljs-comment">//一个类被加载后，类的整个结构都会被封装在Class对象中</span><br>        System.out.println(c2.hashCode());<span class="hljs-comment">//381259350</span><br>        System.out.println(c3.hashCode());<span class="hljs-comment">//381259350</span><br>        System.out.println(c4.hashCode());<span class="hljs-comment">//381259350</span><br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//实体类：pojo entity</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="理解Class类并获取Class实例"><a href="#理解Class类并获取Class实例" class="headerlink" title="理解Class类并获取Class实例"></a>理解Class类并获取Class实例</h3><p>class类</p><p>在Object类中定义了以下的方法，此方法将被所有子类继承</p><p>public final Class getClass()</p><p>以上的方法返回值类型是一个class类，此类是Java反射的源头，实际上所谓的反射从程序运行结果来看也很好理解，即：可以通过对象反射求出类的名称</p><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210520170419.png" alt="描述类的类"></p><p>在对象照镜子之后，可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了那些接口。对于每个类而言，JRE都为其保留一个不变的Class类型的对象。一个Class对象包含了特定某个结构(class/interface/enum/annotation/private type/void/[])的有关信息</p><ul><li>Class本身也是一个类</li><li>Class对象只能由系统建立对象</li><li>一个加载的类在JVM中只会有一个Class实例</li><li>一个Calss对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由那个Class实例所生成</li><li>通过Class可以完整地得到一个类的所有被加载的结构</li><li>Class类是Reflection的根源，针对任何你想动态加载、运行的类、唯有先获得相应的Class对象</li></ul><p>Class类的常用方法</p><table><thead><tr><th align="center">方法名</th><th align="center">功能说明</th></tr></thead><tbody><tr><td align="center">static ClassforName(String name)</td><td align="center">返回指定类名name的Class对象</td></tr><tr><td align="center">Object new Instance()</td><td align="center">调用缺省构造函数，返回Class对象的一个实例</td></tr><tr><td align="center">getName</td><td align="center">返回此对象所表示的实体（类、接口、数组或void）的名称</td></tr><tr><td align="center">Class getSuperClass</td><td align="center">返回当前Class对象的父类Class对象</td></tr><tr><td align="center">Class[] Getinterface()</td><td align="center">获取当前Class对象接口</td></tr><tr><td align="center">Classloder getClassLoader()</td><td align="center">返回该类的类加载器</td></tr><tr><td align="center">Constructor[] getConstructors()</td><td align="center">返回一个包含某些Constructor对象的数组</td></tr><tr><td align="center">Method getMethod(String name, Class …)</td><td align="center">返回一个Method对象，此对象的形参类型为paramType</td></tr><tr><td align="center">Field[] getDeclareFields()</td><td align="center">返回Field对象的一个数组</td></tr></tbody></table><p>获取Class类的实例</p><ul><li>若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高<ul><li><code>Class calzz = Person.class;</code></li></ul></li><li>已知某个类的实例，调用该实例的getClass()方法来获取Class对象<ul><li><code>Class clazz  = person.getclass</code></li></ul></li><li>已知一个类的全类名，并且该类在类路径下，可以通过Class类的静态方法forName获取，可能抛出ClassNotFoundException<ul><li><code>Class clazz = C;ass.forName(&quot;demo01.Student&quot;)</code></li></ul></li><li>内置基本数据类型可以直接用类名.Type</li><li>还可以利用ClassLoader</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> reflection;<br><span class="hljs-comment">//测试Class类的创建方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        Person p1 = <span class="hljs-keyword">new</span> Student();<br>        System.out.println(<span class="hljs-string">&quot;这个人是：&quot;</span> + p1.name);<br><br>        <span class="hljs-comment">//方式一   通过对象获得</span><br>        Class c1 = p1.getClass();<br>        System.out.println(c1.hashCode());<span class="hljs-comment">//2129789493</span><br>        <span class="hljs-comment">//方式二   forName</span><br>        Class c2 = Class.forName(<span class="hljs-string">&quot;reflection.Student&quot;</span>);<br>        System.out.println(c2.hashCode());<span class="hljs-comment">//2129789493</span><br>        <span class="hljs-comment">//方式三   通过类名.class</span><br>        Class c3 = Student.class;<br>        System.out.println(c3.hashCode());<span class="hljs-comment">//2129789493</span><br>        <span class="hljs-comment">//方式四   基本内置类型的包装类都有一个Type属性</span><br>        Class c4 = Integer.TYPE;<br>        System.out.println(c4.hashCode());<span class="hljs-comment">//2101973421</span><br>        System.out.println(c4);<span class="hljs-comment">//int</span><br><br>        <span class="hljs-comment">//获得父类的类型</span><br>        Class c5 = c1.getSuperclass();<br>        System.out.println(c5);<span class="hljs-comment">//class reflection.Person</span><br><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = <span class="hljs-string">&quot;Student&quot;</span>;<br><br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Teacher</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = <span class="hljs-string">&quot;Teacher&quot;</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>有哪些类型可以由class对象</p><ul><li>class：类</li><li>interface：接口</li><li>[]：数组</li><li>enum：枚举</li><li>annotation：注解@interface</li><li>primitive type：基本数据类型</li><li>void</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> reflection;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><br><span class="hljs-comment">//所有类型的class</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test04</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Class c1 = Object.class; <span class="hljs-comment">//类</span><br>        Class c2 = Comparable.class;<span class="hljs-comment">//接口</span><br>        Class c3 = String[].class;<span class="hljs-comment">//一维数组</span><br>        Class c4 = <span class="hljs-keyword">int</span>[][].class;<span class="hljs-comment">//二维数组</span><br>        Class c5 = Override.class;<span class="hljs-comment">//注解</span><br>        Class c6 = ElementType.class;<span class="hljs-comment">//枚举</span><br>        Class c7 = Integer.class;<span class="hljs-comment">//基本数据类型</span><br>        Class c8 = Void.class;<span class="hljs-comment">//void</span><br>        Class c9 = Class.class;<span class="hljs-comment">//Class</span><br><br>        System.out.println(c1);<span class="hljs-comment">//class java.lang.Object</span><br>        System.out.println(c2);<span class="hljs-comment">//interface java.lang.Comparable</span><br>        System.out.println(c3);<span class="hljs-comment">//class [Ljava.lang.String;</span><br>        System.out.println(c4);<span class="hljs-comment">//class [[I</span><br>        System.out.println(c5);<span class="hljs-comment">//interface java.lang.Override</span><br>        System.out.println(c6);<span class="hljs-comment">//class java.lang.annotation.ElementType</span><br>        System.out.println(c7);<span class="hljs-comment">//class java.lang.Integer</span><br>        System.out.println(c8);<span class="hljs-comment">//class java.lang.Void</span><br>        System.out.println(c9);<span class="hljs-comment">//class java.lang.Class</span><br><br>        <span class="hljs-comment">//只要元素类型与维度一样，就是同一个class</span><br>        <span class="hljs-keyword">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">int</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">100</span>];<br>        System.out.println(a.getClass().hashCode());<span class="hljs-comment">//381259350</span><br>        System.out.println(a.getClass().hashCode());<span class="hljs-comment">//381259350</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="类的加载与ClassLoader"><a href="#类的加载与ClassLoader" class="headerlink" title="类的加载与ClassLoader"></a>类的加载与ClassLoader</h3><h3 id="创建运行时类的对象"><a href="#创建运行时类的对象" class="headerlink" title="创建运行时类的对象"></a>创建运行时类的对象</h3><h3 id="获取运行时类的完整结构"><a href="#获取运行时类的完整结构" class="headerlink" title="获取运行时类的完整结构"></a>获取运行时类的完整结构</h3><h3 id="调用运行时类的指定结构"><a href="#调用运行时类的指定结构" class="headerlink" title="调用运行时类的指定结构"></a>调用运行时类的指定结构</h3>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LG G7ThinQ自定义谷歌按键</title>
    <link href="/2021/05/13/LG-g7%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B0%B7%E6%AD%8C%E6%8C%89%E9%94%AE/"/>
    <url>/2021/05/13/LG-g7%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B0%B7%E6%AD%8C%E6%8C%89%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="LG-G7ThinQ自定义谷歌按键"><a href="#LG-G7ThinQ自定义谷歌按键" class="headerlink" title="LG G7ThinQ自定义谷歌按键"></a>LG G7ThinQ自定义谷歌按键</h1><h2 id="这里拿改为截图键为例"><a href="#这里拿改为截图键为例" class="headerlink" title="这里拿改为截图键为例"></a>这里拿改为截图键为例</h2><ol><li><p>下载mt管理器，并授予root权限，进入根目录</p><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210513215909.png" alt="步骤1"></p></li><li><p>以文本方式打开/system/usr/keylayout文件夹下的gpio-keys.kl文件</p><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210513221413.jpg" alt="步骤2"></p><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210513220401.png" alt="步骤3"></p></li><li><p>往下找到key 377，改为SYSRQ，即系统截图</p></li></ol><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210513221324.jpg" alt="步骤3"></p><ol start="4"><li>保存该文件，重启手机，完成修改</li></ol><h2 id="你可能还需要："><a href="#你可能还需要：" class="headerlink" title="你可能还需要："></a>你可能还需要：</h2><table><thead><tr><th align="center">按键</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">CAMERA</td><td align="center">拍照</td></tr><tr><td align="center">FOCUS</td><td align="center">拍照对焦</td></tr><tr><td align="center">SYSRQ</td><td align="center">系统截图</td></tr><tr><td align="center">MEDIA_PLAY_PAUSE</td><td align="center">音乐播放暂停</td></tr><tr><td align="center">MEDIA_NEXT</td><td align="center">下一曲</td></tr><tr><td align="center">MEDIA_PREVIOUS</td><td align="center">上一曲</td></tr><tr><td align="center">VOLUME_MUTE</td><td align="center">静音</td></tr><tr><td align="center">VOLUME_UP</td><td align="center">音量增加</td></tr><tr><td align="center">VOLUME_DOWN</td><td align="center">音量减少</td></tr><tr><td align="center">POWER</td><td align="center">电源</td></tr><tr><td align="center">BACK</td><td align="center">返回</td></tr><tr><td align="center">MENU</td><td align="center">菜单</td></tr><tr><td align="center">HEMO</td><td align="center">主页</td></tr><tr><td align="center">CALL</td><td align="center">拨号</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>玩机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LG G7ThinQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IO流</title>
    <link href="/2021/05/12/IO%E6%B5%81/"/>
    <url>/2021/05/12/IO%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="什么是IO"><a href="#什么是IO" class="headerlink" title="什么是IO"></a>什么是IO</h2><blockquote><p>I/O输入/输出(Input/Output)，分为IO设备和IO接口两个部分。 在POSIX兼容的系统上，例如Linux系统 [1]  ，I/O操作可以有多种方式，比如DIO(Direct I/O)，AIO(Asynchronous I/O，异步I/O)，Memory-Mapped I/O(内存映射I/O)等，不同的I/O方式有不同的实现方式和性能，在不同的应用中可以按情况选择不同的I/O方式。</p><p>百度百科</p></blockquote><p>我们把数据的传输看为数据的流动，按照流动的方向，以内存为基准，分为输入<code>input</code>和输出<code>output</code>。<strong>即流向内存是输入流，流出内存是输出流。</strong></p><p><strong>IO的分类</strong></p><p>根据数据的流向分为</p><ul><li>输入流：把数据从其他设备读取到内存中</li><li>输出流：把数据从内存中写入到其他设备</li></ul><p>根据数据类型分为</p><ul><li>字节流：以字节为单位，读写数据的流</li><li>字符流：以字符为单位，读写数据的流</li></ul><p><strong>顶级父类们</strong></p><table><thead><tr><th align="center"></th><th align="center">输入流</th><th align="center">输出流</th></tr></thead><tbody><tr><td align="center">字节流</td><td align="center">字节输入流InputStream</td><td align="center">字节输出流OutputStream</td></tr><tr><td align="center">字符流</td><td align="center">字符输入流Reader</td><td align="center">字符输出流Writer</td></tr></tbody></table><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="一切皆为字节"><a href="#一切皆为字节" class="headerlink" title="一切皆为字节"></a><strong>一切皆为字节</strong></h3><p>一切数据都是以二进制数字的形式保存的，都是一个个的字节。<strong>字节流可以传输任何数据</strong></p><h3 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a><strong>字节输出流</strong></h3><p><strong>写出字节数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">java.io.OutputStream 字节输出流</span><br><span class="hljs-comment">此抽象类是表示输出字节流的所有类的超类。输出流接受输出字节并将这些字节发送到某个接收器。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">成员方法</span><br><span class="hljs-comment">     voidclose() 关闭此输出流并释放与此流有关的所有系统资源。</span><br><span class="hljs-comment">     voidflush() 刷新此输出流并强制写出所有缓冲的输出字节。</span><br><span class="hljs-comment">     voidwrite(byte[] b) 将 b.length个字节从指定的 byte 数组写入此输出流。</span><br><span class="hljs-comment">     voidwrite(byte[] b, int off, int len)   将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此输出流。</span><br><span class="hljs-comment">     abstract  voidwrite(int b)    将指定的字节写入此输出流。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">java.io.FileOutputStream extends OutputStream</span><br><span class="hljs-comment">    FileOutputStream 文件输出流</span><br><span class="hljs-comment">    构造方法</span><br><span class="hljs-comment">        FileOutputStream(String name)   创建一个向具有指定名称的文件中写入数据的输出文件流。</span><br><span class="hljs-comment">        FileOutputStream(File file)     创建一个向指定 File 对象表示的文件中写入数据的文件输出流。</span><br><span class="hljs-comment">        ...</span><br><span class="hljs-comment">    构造方法的作用：</span><br><span class="hljs-comment">        创建一个FileOutputStream对象</span><br><span class="hljs-comment">        根据构造方法中传递的文件路径、文件名，创造一个空的文件</span><br><span class="hljs-comment">        把FileOutputStream对象指向该文件</span><br><span class="hljs-comment">    写入数据的原理：</span><br><span class="hljs-comment">        Java程序--&gt;JVM--&gt;OS--&gt;OS中的写入数据方法--&gt;将数据写入文件</span><br><span class="hljs-comment">    字节输出流的使用</span><br><span class="hljs-comment">        1.创建一个FileOutputStream对象，构造方法中传入写入数据的目的地</span><br><span class="hljs-comment">        2.调用FileOutputStream对象中的write方法，把数据写入到文件</span><br><span class="hljs-comment">        3.释放资源（凡是涉及到IO流的使用的都会占用一定的内存资源，使用完毕一定要记得关闭，节省系统资源，提升程序效率）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IODemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.创建一个FileOutputStream对象，构造方法中传入写入数据的目的地</span><br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;C:\\Users\\MaLin\\Desktop\\JavaCode\\src\\io\\a.txt&quot;</span>);<br>        <span class="hljs-comment">//2.调用FileOutputStream对象中的write方法，把数据写入到文件</span><br>        fos.write(<span class="hljs-number">97</span>);<br>        <span class="hljs-comment">//3.释放资源（凡是涉及到IO流的使用的都会占用一定的内存资源，使用完毕一定要记得关闭，节省系统资源，提升程序效率）</span><br>        fos.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>文件存储原理</strong></p><p>文本编辑器读取文件原理</p><p>在任意文本编辑器中，打开文件都会查询编码表、</p><p>0-127 查询ASCII码表</p><p>​    97–a</p><p>​    ···</p><p>其他 查询当前系统默认码表，中文系统GBK码表</p><h4 id="一次写多个字节的方法"><a href="#一次写多个字节的方法" class="headerlink" title="一次写多个字节的方法"></a>一次写多个字节的方法</h4><ul><li><code>public void write(byte[] b)</code>：将b.length字节从指定的字节数组写入此输出流</li><li><code>public void write(byte[] b, int off, int length)</code>：从指定的字节数组写入length个字节，从偏移量off开始输出到此输出流</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputStream</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileOutputStream fos1 = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;b.txt&quot;</span>);<br>        fos1.write(<span class="hljs-number">49</span>);<br>        fos1.write(<span class="hljs-number">48</span>);<br>        fos1.write(<span class="hljs-number">48</span>);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        public void write(byte[] b)：将b.length字节从指定的字节数组写入此输出流</span><br><span class="hljs-comment">        一次写多个字节</span><br><span class="hljs-comment">            如果第一个字节是正数（0-127）那么就会查询ASCII码表</span><br><span class="hljs-comment">            如果第一个字节是负数，那么第一个字节和第二个字节会组成一个中文显示，查询系统默认码表（GBK简体中文）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">byte</span>[] bytes = &#123;<span class="hljs-number">65</span>, <span class="hljs-number">66</span>, <span class="hljs-number">67</span> ,<span class="hljs-number">68</span>&#125;;<br><br>        fos1.write(bytes);<br>        fos1.write(bytes, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        写入字符的方法,String类有个方法可以把字符串转换为字节数组</span><br><span class="hljs-comment">        byte[] getBytes()</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">byte</span>[] bytes1 = <span class="hljs-string">&quot;你好&quot;</span>.getBytes();<br>        System.out.println(Arrays.toString(bytes1));<span class="hljs-comment">//[-28, -67, -96, -27, -91, -67]  utf-8编码</span><br>        fos1.write(bytes1);<br><br>        fos1.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="数据追加续写"><a href="#数据追加续写" class="headerlink" title="数据追加续写"></a>数据追加续写</h4><ul><li><code>public FileOutoutStream(File file, boolean append)</code>：创建文件输出流以写入有指定File对象表示的文件</li><li><code>public FileOutputStream(String name, boolean append)</code>：创建文件输出流以写入指定名称的文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">FileOutputStream(String name, boolean append)</span><br><span class="hljs-comment">          创建一个向具有指定 name 的文件中写入数据的输出文件流。</span><br><span class="hljs-comment">FileOutputStream(File file, boolean append)</span><br><span class="hljs-comment">          创建一个向指定 File 对象表示的文件中写入数据的文件输出流。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputStreamDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;1.txt&quot;</span>, <span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            fileOutputStream.write(<span class="hljs-string">&quot;你好&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>            fileOutputStream.write(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>        &#125;<br>        fileOutputStream.write(<span class="hljs-string">&quot;你好&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>        fileOutputStream.close();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs 1.txt">你好<br>你好<br>你好<br>你好<br>你好<br>你好<br>你好<br>你好<br>你好<br>你好<br>你好<br></code></pre></td></tr></table></figure><h3 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h3>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用类库API</title>
    <link href="/2021/05/12/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93API/"/>
    <url>/2021/05/12/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93API/</url>
    
    <content type="html"><![CDATA[<h1 id="Java常用类库API"><a href="#Java常用类库API" class="headerlink" title="Java常用类库API"></a>Java常用类库API</h1><p><a href="https://tool.oschina.net/apidocs/apidoc?api=jdk-zh">JDK1.8中文帮助文档</a></p><p><a href="https://docs.oracle.com/javase/8/docs/api/">JDK1.8英文帮助文档</a></p><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>java.lang.Object类是Java语言的根类，是所有类的父类，所有类都可以使用它的方法</p><p>一个类如果没有显示的定义继承，那么就会默认继承Object类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> /*<span class="hljs-title">extend</span> <span class="hljs-title">Object</span>*/</span>&#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>所有对象（包括数组）都实现这个类的方法</p><p>这里我们重点掌握Object的两个方法：</p><ol><li>toString方法</li><li>equals方法</li></ol><h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a><strong>toString方法</strong></h3><p>例如</p><p>我们先定义一个Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> object;<br><span class="hljs-comment">//我们先定义一个标准的类,这个类默认继承Object类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后实例化Person，调用person对象的方法toString</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> object;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person p1 = <span class="hljs-keyword">new</span> Person();<br>        String s1 = p1.toString();<br>        System.out.println(s1);<span class="hljs-comment">//object.Person@4f3f5b24 打印的是这个对象的包名+类名+@地址值</span><br>        System.out.println(p1);<span class="hljs-comment">//object.Person@4f3f5b24 直接打印对象名就相当于调用了Object类的toString方法</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="重写toString方法"><a href="#重写toString方法" class="headerlink" title="重写toString方法"></a>重写toString方法</h3><p>如果我们想要打印对象的属性</p><p>我们就必须重写对象的toString方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> object;<br><span class="hljs-comment">//我们先定义一个标准的类,这个类默认继承Object类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在运行下面这段代码，打印的就是重写的toString方法的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> object;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person p1 = <span class="hljs-keyword">new</span> Person();<br>        String s1 = p1.toString();<br>        System.out.println(s1);<span class="hljs-comment">//Person&#123;age=0, name=&#x27;null&#x27;&#125;</span><br>        System.out.println(p1);<span class="hljs-comment">//Person&#123;age=0, name=&#x27;null&#x27;&#125;</span><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如何判断一个类有没有重写toString方法，直接打印这个类的名字就可以知道</p><ul><li>没有重写：打印的是这个对象的包路径加地址值</li><li>重写：按照其重写的方法进行打印</li></ul><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> object;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Random random = <span class="hljs-keyword">new</span> Random();<br>        System.out.println(random);<span class="hljs-comment">//java.util.Random@4f3f5b24</span><br><br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(scanner);<span class="hljs-comment">//java.util.Scanner[delimiters=\p&#123;javaWhitespace&#125;+][position=0][match valid=false][need input=false][source closed=false][skipped=false][group separator=\x&#123;2c&#125;][decimal separator=\x&#123;2e&#125;][positive prefix=][negative prefix=\Q-\E][positive suffix=][negative suffix=][NaN string=\QNaN\E][infinity string=\Q∞\E]</span><br><br>        ArrayList&lt;Object&gt; objects = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        objects.add(<span class="hljs-number">1</span>);<br>        objects.add(<span class="hljs-number">2</span>);<br>        System.out.println(objects);<span class="hljs-comment">//[1, 2]</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><p>equals方法：比较两个对象的地址值是否相同</p><p>之前在toString那里定义了一个Person类，这里我们这里来new两个Person对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> object;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectDemo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">10</span>,<span class="hljs-string">&quot;小明&quot;</span>);<br>        Person p2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">9</span>, <span class="hljs-string">&quot;小红&quot;</span>);<br><br>        <span class="hljs-comment">//这里我们将Person类里面重写toString方法的代码注释掉</span><br>        System.out.println(p1);<span class="hljs-comment">//object.Person@4f3f5b24</span><br>        System.out.println(p2);<span class="hljs-comment">//object.Person@15aeb7ab</span><br><br>        <span class="hljs-keyword">boolean</span> equals = p1.equals(p2);<br>        System.out.println(equals);<span class="hljs-comment">//false</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="重写equals方法"><a href="#重写equals方法" class="headerlink" title="重写equals方法"></a>重写equals方法</h3><p>我们想要比较两个对象的属性</p><p>就必须重写equals方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> object;<br><br><span class="hljs-comment">//我们先定义一个标准的类,这个类默认继承Object类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">/*@Override</span><br><span class="hljs-comment">    public String toString() &#123;</span><br><span class="hljs-comment">        return &quot;Person&#123;&quot; +</span><br><span class="hljs-comment">                &quot;age=&quot; + age +</span><br><span class="hljs-comment">                &quot;, name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="hljs-comment">                &#x27;&#125;&#x27;;</span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        这里隐含着一个多态</span><br><span class="hljs-comment">        equals方法的参数传递的是Object类型的参数，无法直接调用其子类对象的属性、方法</span><br><span class="hljs-comment">        这里我们先要强转obj为Person类</span><br><span class="hljs-comment">         */</span><br>        Person p = (Person) obj;<br>        <span class="hljs-keyword">boolean</span> b = <span class="hljs-keyword">this</span>.name.equals(p.name) &amp;&amp; <span class="hljs-keyword">this</span>.age == p.age;<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>再运行以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> object;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectDemo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">10</span>,<span class="hljs-string">&quot;小明&quot;</span>);<br>        Person p2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">9</span>, <span class="hljs-string">&quot;小红&quot;</span>);<br>        Person p3 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">9</span>, <span class="hljs-string">&quot;小红&quot;</span>);<br><br>        <span class="hljs-comment">//这里我们将Person类里面重写toString方法的代码注释掉</span><br>        System.out.println(p2);<span class="hljs-comment">//object.Person@4f3f5b24</span><br>        System.out.println(p3);<span class="hljs-comment">//object.Person@15aeb7ab</span><br><br>        <span class="hljs-keyword">boolean</span> equals = p2.equals(p3);<br>        System.out.println(equals);<span class="hljs-comment">//true</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里的p2.equals(p3)就比较的是其属性是否相同</p><p>注</p><p>我们重写的这个equals方法只能比较的是两个相同类型的对象的属性</p><p>不能比较的是两个不同类型的对象，否则会报一个异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> object;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectDemo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">10</span>,<span class="hljs-string">&quot;小明&quot;</span>);<br>        Person p2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">9</span>, <span class="hljs-string">&quot;小红&quot;</span>);<br>        Person p3 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">9</span>, <span class="hljs-string">&quot;小红&quot;</span>);<br><br>        <span class="hljs-comment">//这里我们将Person类里面重写toString方法的代码注释掉</span><br>        System.out.println(p2);<span class="hljs-comment">//object.Person@4f3f5b24</span><br>        System.out.println(p3);<span class="hljs-comment">//object.Person@15aeb7ab</span><br><br>        <span class="hljs-keyword">boolean</span> equals = p2.equals(p3);<br>        System.out.println(equals);<span class="hljs-comment">//true</span><br><br>        Random r1 = <span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-keyword">boolean</span> b1 = p1.equals(r1);<br>        System.out.println(b1);<span class="hljs-comment">//java.lang.ClassCastException 类转换异常</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>所以要在重写的equals方法里加一个判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> object;<br><br><span class="hljs-comment">//我们先定义一个标准的类,这个类默认继承Object类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">/*@Override</span><br><span class="hljs-comment">    public String toString() &#123;</span><br><span class="hljs-comment">        return &quot;Person&#123;&quot; +</span><br><span class="hljs-comment">                &quot;age=&quot; + age +</span><br><span class="hljs-comment">                &quot;, name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="hljs-comment">                &#x27;&#125;&#x27;;</span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        这里隐含着一个多态</span><br><span class="hljs-comment">        equals方法的参数传递的是Object类型的参数，无法直接调用其子类对象的属性、方法</span><br><span class="hljs-comment">        这里我们先要强转obj为Person类</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> Person) &#123;<br>            Person p = (Person) obj;<br>            <span class="hljs-keyword">boolean</span> b = <span class="hljs-keyword">this</span>.name.equals(p.name) &amp;&amp; <span class="hljs-keyword">this</span>.age == p.age;<br>            <span class="hljs-keyword">return</span> b;<br>        &#125;<br>        <span class="hljs-comment">//不是Person类型的就直接返回false</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>思考：如何进一步优化？</p><p>我们看Idea给我们重写的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>      <span class="hljs-comment">//getClass这里用的是反射，之后在反射里面会学</span><br>      <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>      Person person = (Person) o;<br><br>      <span class="hljs-keyword">if</span> (age != person.age) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>      <span class="hljs-keyword">return</span> name != <span class="hljs-keyword">null</span> ? name.equals(person.name) : person.name == <span class="hljs-keyword">null</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">int</span> result = age;<br>      result = <span class="hljs-number">31</span> * result + (name != <span class="hljs-keyword">null</span> ? name.hashCode() : <span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">return</span> result;<br>  &#125;<br></code></pre></td></tr></table></figure><p>我们再看java7以后重写的equals方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        Person person = (Person) o;<br>        <span class="hljs-keyword">return</span> age == person.age &amp;&amp; Objects.equals(name, person.name);<span class="hljs-comment">//这里比较两个对象的name直接用的Objects类的equals方法</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(age, name);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="Objects类"><a href="#Objects类" class="headerlink" title="Objects类"></a>Objects类</h3><p>JDK7添加了一个Objects工具类，它提供了一些方法操作对象，它由一些静态的方法组成，这些方法是空指针安全的或容忍空指针的，它用于计算对象的hashCode，返回对象的字符串表示形式，比较两个对象。</p><p>比较两个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object a, Object b)</span></span>; <br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> object;<br><br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectsDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s1 = <span class="hljs-keyword">null</span>;<br>        String s2 = <span class="hljs-string">&quot;abc&quot;</span>;<br><br>        <span class="hljs-comment">/*boolean b1 = s1.equals(s2);//java.lang.NullPointerException 空指针异常</span><br><span class="hljs-comment">        System.out.println(b1);*/</span><br><br>        <span class="hljs-keyword">boolean</span> b2 = Objects.equals(s1, s2);<br>        System.out.println(b2);<span class="hljs-comment">//false</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Object总结"><a href="#Object总结" class="headerlink" title="Object总结"></a>Object总结</h3><p><strong>Object类</strong></p><ol><li>介绍<ol><li>Object类是所有类的父类（所有类都会直接或者间接继承Object类）</li><li>Object类提供了一些方法</li></ol></li><li>toString方法<ol><li>作用：打印对象的信息</li><li>重写前：打印的是包名+类名+@地址值</li><li>重写后：按重写的方法打印</li></ol></li><li>equals方法<ol><li>作用：判断两个对象是否相同</li><li>重写前：比较的是两个对象的地址值</li><li>重写后：按重写的方法进行比较</li></ol></li></ol><p><strong>Objects类</strong></p><ol><li>equals方法<ol><li>也是比较两个对象是否相同，添加了一个非空判断，防止空指针异常</li></ol></li></ol><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>java.lang.Math类包含用于执行基本数学运算的方法</p><p>其所有方法均是静态方法，可以直接类名.方法名调用</p><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">abs</span><span class="hljs-params">(<span class="hljs-keyword">double</span> num)</span></span>;<span class="hljs-comment">//绝对值</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">ceil</span><span class="hljs-params">(<span class="hljs-keyword">double</span> nun)</span></span>;<span class="hljs-comment">//向上取整</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">floor</span><span class="hljs-params">(<span class="hljs-keyword">double</span> nun)</span></span>;<span class="hljs-comment">//向下取整</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">round</span><span class="hljs-params">(<span class="hljs-keyword">double</span> num)</span></span>;<span class="hljs-comment">//四舍五入</span><br></code></pre></td></tr></table></figure><h3 id="基本运算方法"><a href="#基本运算方法" class="headerlink" title="基本运算方法"></a>基本运算方法</h3><p>绝对值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">double</span> d1 = Math.abs(-<span class="hljs-number">5</span>);<span class="hljs-comment">//5</span><br></code></pre></td></tr></table></figure><p>向上取整</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">double</span> d2 = Math.ceil(<span class="hljs-number">3.1</span>)<span class="hljs-comment">//4</span><br></code></pre></td></tr></table></figure><p>向下取整</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">double</span> d3 = Math.floor(<span class="hljs-number">1.9</span>)<span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure><p>四舍五入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">long</span> l1 = Math.round(<span class="hljs-number">4.5</span>)<span class="hljs-comment">//5</span><br></code></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>请使用Math相关的API，计算-10.8到5.9之间，绝对值大于6或者小于2.1的整数有多少个？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> math;<br><br><span class="hljs-comment">//请使用Math相关的API，计算-10.8到5.9之间，绝对值大于6或者小于2.1的整数有多少个？</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MathDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//定义一个最大值一个最小值</span><br>        <span class="hljs-keyword">double</span> max = <span class="hljs-number">5.9</span>;<br>        <span class="hljs-keyword">double</span> min = -<span class="hljs-number">10.8</span>;<br><br>        <span class="hljs-comment">//定义一个数用于记数</span><br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//外层for循环用于获-10.8————5.9的整数，内层if判断绝对值是否大于6或小于2.1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">double</span> i = Math.ceil(min); i &lt;= max; i++) &#123;<br>            <span class="hljs-keyword">if</span> (Math.abs(i) &gt; <span class="hljs-number">6</span> || Math.abs(i) &lt; <span class="hljs-number">2.1</span>) &#123;<br>                <span class="hljs-comment">//计数+1</span><br>                num++;<br>                <br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//打印结果</span><br>        System.out.println(num);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>java.util.Random类用于生成随机数字</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Random r = <span class="hljs-keyword">new</span> Random();<br></code></pre></td></tr></table></figure><p>使用</p><ul><li>获取一个随机的int数字</li><li>获取指定范围的随机数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> random;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomDemo01</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//new一个Random</span><br>        Random r1 = <span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-comment">//调用Random的nextInt()方法</span><br>        <span class="hljs-keyword">int</span> i = r1.nextInt();<br>        System.out.println(i);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> random;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Random r1 = <span class="hljs-keyword">new</span> Random();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i1 = <span class="hljs-number">0</span>; i1 &lt; <span class="hljs-number">10</span>; i1++) &#123;<br>            <span class="hljs-keyword">int</span> i = r1.nextInt(<span class="hljs-number">10</span>);<span class="hljs-comment">//[0,10)</span><br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><p>根据给定的数字n，返回指定[1,n]之间的随机整数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">```<br><br><br><br>猜数字小游戏：电脑生成一个指定范围的整数，用户来猜，才对结束程序<br><br>```java<br></code></pre></td></tr></table></figure><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>java.io.File类</p><p>文件和目录路径名的抽象表现形式</p><p>java把电脑的文件和文件夹封装成了一个File类，我们可以通过操作File类来使用文件和文件夹</p><p>File类的方法</p><ul><li>创建文件或文件夹</li><li>删除文件或文件夹</li><li>获取文件或文件夹</li><li>对文件夹进行遍历</li><li>获取文件大小</li></ul><p>File类是一个与系统无关的类，任何操作系统都可以使用这个File类的方法</p><p>记住三个单词</p><ul><li>file：文件</li><li>directory：文件夹</li><li>path：路径</li></ul><h3 id="File类的静态成员变量"><a href="#File类的静态成员变量" class="headerlink" title="File类的静态成员变量"></a>File类的静态成员变量</h3><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> file;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        static String pathSeparator </span><br><span class="hljs-comment">        与系统相关的路径分隔符字符，为方便起见，表示为字符串。  </span><br><span class="hljs-comment">        static char pathSeparatorChar </span><br><span class="hljs-comment">        与系统相关的路径分隔符。  </span><br><span class="hljs-comment">        static String separator </span><br><span class="hljs-comment">        与系统相关的默认名称 - 分隔符字符，以方便的方式表示为字符串。  </span><br><span class="hljs-comment">        static char separatorChar </span><br><span class="hljs-comment">        与系统相关的默认名称分隔符。  </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        以后要操作路径不能把路径写死</span><br><span class="hljs-comment">        windows C:\a\a.txt</span><br><span class="hljs-comment">        linux   C:/a/a.txt</span><br><span class="hljs-comment">        代码中    &quot;C:&quot;+File.separator+&quot;a&quot;+File.separator+&quot;a.txt&quot;</span><br><span class="hljs-comment">         */</span><br>        String pathSeparator = File.pathSeparator;<br>        System.out.println(pathSeparator);<span class="hljs-comment">//;   路径分隔符   windows;    linux:</span><br><br>        String separator = File.separator;<br>        System.out.println(separator);<span class="hljs-comment">//\   文件名称分隔符    windows\     linux/</span><br><br><br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="绝对路径与相对路径"><a href="#绝对路径与相对路径" class="headerlink" title="绝对路径与相对路径"></a>绝对路径与相对路径</h3><p>绝对路径：一个完整的路径</p><p>​    <strong>以盘符开始的路径</strong></p><p>​    c:\a.txt</p><p>​    </p><p>相对路径：一个简化的路径</p><p>​    <strong>相对于当前项目的根目录</strong></p><p>​    b.txt</p><p>注：</p><ul><li><p>路径不区分大小写（windows）,Linux区分大小写</p></li><li><p>反斜杠表示转义字符，两个反斜杠表示一个普通的反斜杠</p></li></ul><h3 id="File类的构造方法"><a href="#File类的构造方法" class="headerlink" title="File类的构造方法"></a>File类的构造方法</h3><ul><li><code>File(File parent, String child) </code>：从父抽象路径名和子路径名字符串创建新的 File实例。  </li><li><code>File(String pathname)</code> ：通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例。  </li><li><code>File(String parent, String child) </code>：从父路径名字符串和子路径名字符串创建新的 File实例。  </li><li><code>File(URI uri) </code>：通过将给定的 file: URI转换为抽象路径名来创建新的 File实例。 </li></ul><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> file;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">File(File parent, String child)</span><br><span class="hljs-comment">从父抽象路径名和子路径名字符串创建新的 File实例。</span><br><span class="hljs-comment">File(String pathname)</span><br><span class="hljs-comment">通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例。</span><br><span class="hljs-comment">File(String parent, String child)</span><br><span class="hljs-comment">从父路径名字符串和子路径名字符串创建新的 File实例。</span><br><span class="hljs-comment">File(URI uri)</span><br><span class="hljs-comment">通过将给定的 file: URI转换为抽象路径名来创建新的 File实例。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        show01();<br><br>        show02(<span class="hljs-string">&quot;C:\\&quot;</span>, <span class="hljs-string">&quot;a.txt&quot;</span>);<br><br>        show03();<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    File(File parent, String child) 从父抽象路径名和子路径名字符串创建新的 File实例。</span><br><span class="hljs-comment">    参数：</span><br><span class="hljs-comment">        File parent     父路径</span><br><span class="hljs-comment">        String child    子路径</span><br><span class="hljs-comment">    好处：</span><br><span class="hljs-comment">        父路径是File类，可以使用File类的方法进行操作</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show03</span><span class="hljs-params">()</span> </span>&#123;<br>        File parent = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\&quot;</span>);<br>        File file = <span class="hljs-keyword">new</span> File(parent, <span class="hljs-string">&quot;a.txt&quot;</span>);<br>        System.out.println(file);<span class="hljs-comment">//C:\a.txt</span><br>    &#125;<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    File(String parent, String child) 从父路径名字符串和子路径名字符串创建新的 File实例。</span><br><span class="hljs-comment">    参数：</span><br><span class="hljs-comment">        String parent   父路径</span><br><span class="hljs-comment">        String child    子路径</span><br><span class="hljs-comment">    好处：</span><br><span class="hljs-comment">        父路径和子路径可以单独书写，使用灵活</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show02</span><span class="hljs-params">(String parent, String child)</span> </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(parent, child);<br>        System.out.println(file);<span class="hljs-comment">//C:\a.txt</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     File(String pathname) 通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例。</span><br><span class="hljs-comment">     参数：</span><br><span class="hljs-comment">        String pathname 字符串的路径名称</span><br><span class="hljs-comment">        路径名称可以是以文件结尾，也可以是以文件夹结尾</span><br><span class="hljs-comment">        路径可以是相对路径，也可以是绝对路径</span><br><span class="hljs-comment">        路径可以存在，也可以不存在</span><br><span class="hljs-comment">        创建File类对象，只是把字符串路径封装为File对象，不考虑路径真实情况</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show01</span><span class="hljs-params">()</span> </span>&#123;<br>        File f1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\Users\\a.txt&quot;</span>);<br>        System.out.println(f1);<span class="hljs-comment">//C:\Users\a.txt 重写了Object的toString方法</span><br><br>        File f2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\Users&quot;</span>);<br>        System.out.println(f2);<span class="hljs-comment">//C:\Users</span><br><br>        File f3 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>        System.out.println(f3);<span class="hljs-comment">//a.txt</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>常用方法</p><h3 id="获取功能的方法"><a href="#获取功能的方法" class="headerlink" title="获取功能的方法"></a>获取功能的方法</h3><ul><li><code>public String getAbsolutePath()</code>//返回绝对路径名称字符串</li><li><code>public String getPath()</code>//返回路径名称字符串</li><li><code>public String getName()</code>//返回文件或目录名称</li><li><code>public Long length()</code>//返回文件大小</li></ul><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> file;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.sql.SQLOutput;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileDemo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        show01();<br>        <br>        show02();<br><br>        show03();<br><br>        show04();<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    public Long length()//返回文件大小</span><br><span class="hljs-comment">    获取的是构造方法指向的文件大小 以字节为单位</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show04</span><span class="hljs-params">()</span> </span>&#123;<br>        File f1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\Users\\MaLin\\Desktop\\JavaCode\\背景图片1.jpg&quot;</span>);<br>        <span class="hljs-keyword">long</span> length = f1.length();<br>        System.out.println(length);<span class="hljs-comment">//450171</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    public String getName()//返回文件或目录名称</span><br><span class="hljs-comment">    获取构造方法中传递的路径的结尾部分（文件或文件夹）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show03</span><span class="hljs-params">()</span> </span>&#123;<br>        File f1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\Users\\MaLin\\Desktop\\JavaCode\\a.txt&quot;</span>);<br>        String name1 = f1.getName();<br>        System.out.println(name1);<span class="hljs-comment">//a.txt</span><br><br>        File f2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\Users\\MaLin\\Desktop\\JavaCode&quot;</span>);<br>        String name2 = f2.getName();<br>        System.out.println(name2);<span class="hljs-comment">//JavaCode</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    public String getPath()//返回路径名称字符串</span><br><span class="hljs-comment">    获取构造方法中传递的路径</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    toString方法调用的就是getPath方法</span><br><span class="hljs-comment">    源码：</span><br><span class="hljs-comment">    public String toString() &#123;</span><br><span class="hljs-comment">        return getPath();</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show02</span><span class="hljs-params">()</span> </span>&#123;<br>        File f1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\Users\\MaLin\\Desktop\\JavaCode\\src&quot;</span>);<br>        File f2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>        String p1 = f1.getPath();<br>        String p2 = f2.getPath();<br>        System.out.println(p1);<span class="hljs-comment">//C:\Users\MaLin\Desktop\JavaCode\src</span><br>        System.out.println(p2);<span class="hljs-comment">//a.txt</span><br><br>        System.out.println(f1);<span class="hljs-comment">//C:\Users\MaLin\Desktop\JavaCode\src</span><br>        System.out.println(f1.toString());<span class="hljs-comment">//C:\Users\MaLin\Desktop\JavaCode\src</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    public String getAbsolutePath()//返回绝对路径名称字符串</span><br><span class="hljs-comment">    获取构造方法中传递的绝对路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show01</span><span class="hljs-params">()</span> </span>&#123;<br>        File f1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\Users\\MaLin\\Desktop\\JavaCode\\src&quot;</span>);<br>        String absolutePath1 = f1.getAbsolutePath();<br>        System.out.println(absolutePath1);<span class="hljs-comment">//C:\Users\MaLin\Desktop\JavaCode\src</span><br><br>        File f2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>        String absolutePath2 = f2.getAbsolutePath();<br>        System.out.println(absolutePath2);<span class="hljs-comment">//C:\Users\MaLin\Desktop\JavaCode\a.txt</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="判断功能的方法"><a href="#判断功能的方法" class="headerlink" title="判断功能的方法"></a>判断功能的方法</h3><ul><li><code>public boolean exists()</code>：File类表示的文件或文件夹是否存在</li><li><code>public boolean isFile()</code> ：File类表示的是否是文件</li><li><code>public boolean isDirectory()</code> ：File类表示的是否是文件夹</li></ul><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> file;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">File类的判断功能方法</span><br><span class="hljs-comment">    public boolean exists()</span><br><span class="hljs-comment">    public boolean isFile()</span><br><span class="hljs-comment">    public boolean isDirectory()</span><br><span class="hljs-comment">    注意事项</span><br><span class="hljs-comment">        isFile()</span><br><span class="hljs-comment">        isDirectory()</span><br><span class="hljs-comment">        这两个方法使用前提：路径必须存在，否则都返回false</span><br><span class="hljs-comment">        使用前最好用exists()方法判断一下路径是否存在</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileDemo04</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        demo01();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">demo01</span><span class="hljs-params">()</span> </span>&#123;<br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\Users\\MaLin\\Desktop\\JavaCode&quot;</span>);<br>        System.out.println(file1.exists());<span class="hljs-comment">//true</span><br><br>        File file2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\Users\\MaLin\\Desktop\\JavaCode\\背景图片1.jpg&quot;</span>);<br>        System.out.println(file2.exists());<span class="hljs-comment">//true</span><br><br>        System.out.println(<span class="hljs-string">&quot;=======================================&quot;</span>);<br><br><br>        <span class="hljs-keyword">if</span> (file1.exists() &amp;&amp; file2.exists()) &#123;<br>            System.out.println(file1.isFile());<span class="hljs-comment">//false</span><br>            System.out.println(file2.isFile());<span class="hljs-comment">//ture</span><br>            System.out.println(file1.isDirectory());<span class="hljs-comment">//false</span><br>            System.out.println(file2.isDirectory());<span class="hljs-comment">//true</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="创建和删除功能的方法"><a href="#创建和删除功能的方法" class="headerlink" title="创建和删除功能的方法"></a>创建和删除功能的方法</h3><ul><li><code>public boolean createNewFile()</code>：当且仅当该名称文件不存在时，创建一个新的空的文件。</li><li><code>public boolean delete()</code>：删除由此File表示的文件或目录</li><li><code>public boolean mkdir()</code>：创建由此File表示的文件夹</li><li><code>public boolean mkdirs()</code>：创建由此File表示的目录，包括任何必须但不存在的父目录</li></ul><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> file;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileDemo05</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//show01();</span><br>        <span class="hljs-comment">//show02();</span><br>        show03();<br><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    public boolean delete()</span><br><span class="hljs-comment">    删除构造方法中创建的文件或文件夹</span><br><span class="hljs-comment">    返回值</span><br><span class="hljs-comment">        false文件夹中有内容(文件或文件夹)不会删除文件夹 构造方法中不存在路径</span><br><span class="hljs-comment">        true删除成功</span><br><span class="hljs-comment">    注意事项</span><br><span class="hljs-comment">        delete()方法会直接删除文件或文件夹，不会走回收站</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show03</span><span class="hljs-params">()</span> </span>&#123;<br>        File f1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> b1 = f1.delete();<br>        System.out.println(b1);<br><br>        File f2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> b2 = f2.delete();<br>        System.out.println(b2);<br><br>        File f3 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;111&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> b3 = f3.delete();<br>        System.out.println(b3);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    public boolean mkdir()</span><br><span class="hljs-comment">    public boolean mkdirs()</span><br><span class="hljs-comment">    返回值</span><br><span class="hljs-comment">        false</span><br><span class="hljs-comment">        true</span><br><span class="hljs-comment">    注意</span><br><span class="hljs-comment">        此方法只能创建文件夹</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show02</span><span class="hljs-params">()</span> </span>&#123;<br><br>        File f1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> b1 = f1.mkdir();<br>        System.out.println(b1);<span class="hljs-comment">//true</span><br><br>        File f2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;111\\222\\333&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> b2 = f2.mkdirs();<br>        System.out.println(b2);<span class="hljs-comment">//true</span><br><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    public boolean creatNewFile()</span><br><span class="hljs-comment">    创建文件的路径和名称在构造方法中给出</span><br><span class="hljs-comment">    返回值</span><br><span class="hljs-comment">        false文件已存在，创建文件失败</span><br><span class="hljs-comment">        true文件不存在，创建文件成功</span><br><span class="hljs-comment">    注意事项</span><br><span class="hljs-comment">        只能创建文件</span><br><span class="hljs-comment">        创建文件的路径必须存在，否则会抛出异常</span><br><span class="hljs-comment">    creatNewFile()这个方法声明抛出了IOException，我们调用这个方法要么throws这个异常，要么try catch这个异常</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        File f1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;1.txt&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> b1 = f1.createNewFile();<br>        System.out.println(<span class="hljs-string">&quot;b1:&quot;</span> + b1);<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="遍历目录的方法"><a href="#遍历目录的方法" class="headerlink" title="遍历目录的方法"></a>遍历目录的方法</h3><ul><li><code>public String[] list()</code>：返回一个String数组，表示该File类目录中的所有子文件或目录</li><li><code>public File[] listFile()</code>：返回一个File数组，表示该File类目录的所有子文件或目录</li></ul><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> file;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">public String[] list()：返回一个String数组，表示该File类目录中的所有子文件或目录</span><br><span class="hljs-comment">public File[] listFile()：返回一个File数组，表示该File类目录的所有子文件或目录</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">list() listFile()方法遍历的是构造方法中传递的目录</span><br><span class="hljs-comment">如果构造方法中传递的目录不存在或者传递的不是一个目录路径，会报空指针异常</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileDemo06</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        show01();<br>        <span class="hljs-comment">//show02();</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show02</span><span class="hljs-params">()</span> </span>&#123;<br>        File f1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\Users\\MaLin\\Desktop\\JavaCode&quot;</span>);<br>        File[] files = f1.listFiles();<br>        <span class="hljs-keyword">for</span> (File fileList : files) &#123;<br>            System.out.println(fileList);<span class="hljs-comment">/*</span><br><span class="hljs-comment">            C:\Users\MaLin\Desktop\JavaCode\.idea</span><br><span class="hljs-comment">            C:\Users\MaLin\Desktop\JavaCode\1.txt</span><br><span class="hljs-comment">            C:\Users\MaLin\Desktop\JavaCode\JavaCode.iml</span><br><span class="hljs-comment">            C:\Users\MaLin\Desktop\JavaCode\out</span><br><span class="hljs-comment">            C:\Users\MaLin\Desktop\JavaCode\src</span><br><span class="hljs-comment">            C:\Users\MaLin\Desktop\JavaCode\背景图片1.jpg</span><br><span class="hljs-comment">            C:\Users\MaLin\Desktop\JavaCode\背景图片2.jpg</span><br><span class="hljs-comment">            C:\Users\MaLin\Desktop\JavaCode\背景图片3.jpg</span><br><span class="hljs-comment">            */</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show01</span><span class="hljs-params">()</span> </span>&#123;<br>        File f1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\Users\\MaLin\\Desktop\\JavaCode&quot;</span>);<br>        String[] fl1 = f1.list();<br>        <span class="hljs-keyword">for</span> (String fileList: fl1<br>             ) &#123;<br>            System.out.println(fileList);<span class="hljs-comment">/*</span><br><span class="hljs-comment">            .idea</span><br><span class="hljs-comment">            1.txt</span><br><span class="hljs-comment">            JavaCode.iml</span><br><span class="hljs-comment">            out</span><br><span class="hljs-comment">            src</span><br><span class="hljs-comment">            背景图片1.jpg</span><br><span class="hljs-comment">            背景图片2.jpg</span><br><span class="hljs-comment">            背景图片3.jpg</span><br><span class="hljs-comment">            */</span><br><br>        &#125;<br>    &#125;<br><br>    <br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>基本数据类型的数据，使用起来很方便，但是没有对用的方法来操作这些数据，我们可以使用一个类，把基本数据类型包装起来，这个类叫包装类</p><p>在包装类中，我们可以定义一些方法来操作基本数据类型的数据</p><p>例如Integer类、Double类。。。位于Java.lang包下</p><table><thead><tr><th align="center">基本数据类型</th><th align="center">对应的包装类</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">Byte</td></tr><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">int</td><td align="center"><strong>Interger</strong></td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">char</td><td align="center"><strong>Character</strong></td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr></tbody></table><h3 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h3><p>装箱：把基本数据类型的数据，包装到包装类中</p><p><del>构造方法</del></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer (<span class="hljs-keyword">int</span> value)<span class="hljs-comment">//构造一个新分配的Integer对象，它表示指定的int值</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer (String s)<span class="hljs-comment">//构造一个新分配的Integer对象，它表示String参数所指示的int值</span><br>    <span class="hljs-comment">//传递的字符串必须是基本类型的字符串，否则会抛出异常 &quot;100&quot;正确 &quot;a&quot;抛出异常</span><br></code></pre></td></tr></table></figure><p>静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> Integer <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span><span class="hljs-comment">//返回一个表示指定的int值的Interger实例</span></span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> Integer <span class="hljs-title">valueOf</span><span class="hljs-params">(String s)</span><span class="hljs-comment">//返回保存指定的String的值的Integer对象</span></span><br></code></pre></td></tr></table></figure><p>拆箱：取出包装类中的基本数据类型的数据</p><p>成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">intValue</span><span class="hljs-params">()</span><span class="hljs-comment">//以int类型返回该Integer的值</span></span><br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> integer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntegerDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//装箱</span><br>        <span class="hljs-comment">//构造方法</span><br>        Integer in1 = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>);<span class="hljs-comment">//该方法已经过时了</span><br>        System.out.println(in1);<span class="hljs-comment">//1 重写了toString方法</span><br><br>        Integer in2 = <span class="hljs-keyword">new</span> Integer(<span class="hljs-string">&quot;1&quot;</span>);<br>        System.out.println(in2);<span class="hljs-comment">//1</span><br><br>        <span class="hljs-comment">//静态方法</span><br>        Integer in3 = Integer.valueOf(<span class="hljs-number">1</span>);<br>        System.out.println(in3);<br><br>        Integer in4 = Integer.valueOf(<span class="hljs-string">&quot;1&quot;</span>);<br>        <span class="hljs-comment">//Integer in4 = Integer.valueOf(&quot;a&quot;);//Exception in thread &quot;main&quot; java.lang.NumberFormatException 数字格式化异常</span><br>        System.out.println(in4);<br><br>        <span class="hljs-comment">//拆箱</span><br>        <span class="hljs-keyword">int</span> i = in1.intValue();<br>System.out.println(i);<span class="hljs-comment">//1</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="自动装箱与自动拆箱"><a href="#自动装箱与自动拆箱" class="headerlink" title="自动装箱与自动拆箱"></a>自动装箱与自动拆箱</h3><p>​    基本数据类型和包装类之间可以自动的相互转换（JDK1.5以后）</p><p><strong>自动装箱</strong></p><p>直接把int类型的整数包装起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer in1 = <span class="hljs-number">1</span>;<span class="hljs-comment">//相当与Integer in1 = new Integer(1);</span><br></code></pre></td></tr></table></figure><p><strong>自动拆箱</strong></p><p>如上面的in1是包装类，无法直接参与运算，可以自动转换为基本数据类型的数据在参与计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">in + 2;相当于in.intValue() + 2;自动拆箱</span><br><span class="hljs-comment">in = in + 2;相当于in = new Integer(3);自动装箱</span><br><span class="hljs-comment">*/</span><br>in1 = in1 + <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>ArrayList集合无法直接存储整数，可以存储包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>list.add(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">int</span> i = list.get(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> integer;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntegerDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//自动装箱</span><br>        Integer in1 = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//自动拆箱</span><br>        in1 = in1 + <span class="hljs-number">2</span>;<br>        System.out.println(in1);<span class="hljs-comment">//3</span><br><br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-number">1</span>);<span class="hljs-comment">//自动装箱，相当于list.add(new Integer(1));</span><br>        <span class="hljs-comment">//Integer integer = list.get(0);返回的是包装类Integer</span><br>        <span class="hljs-keyword">int</span> i = list.get(<span class="hljs-number">0</span>);<span class="hljs-comment">//自动拆箱，相当于list.get(0).intValue();</span><br>        System.out.println(i);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="基本数据类型与字符串相互转换"><a href="#基本数据类型与字符串相互转换" class="headerlink" title="基本数据类型与字符串相互转换"></a>基本数据类型与字符串相互转换</h3><p><strong>基本类型转为String</strong></p><ol><li><p>基本数据类型的值+””</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String s = <span class="hljs-number">100</span> + <span class="hljs-string">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>使用包装类中的静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">toString</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span><span class="hljs-comment">//返回指定int类型数据的String对象</span></span><br></code></pre></td></tr></table></figure></li><li><p>使用String类中的静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span><span class="hljs-comment">//返回int类型的数据</span></span><br></code></pre></td></tr></table></figure></li></ol><p>String转为对应的基本类型</p><ol><li><p>使用包装类的静态方法parseXX(“字符串”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">parseInt</span><span class="hljs-params">(String s)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">parseDouble</span><span class="hljs-params">(String s)</span></span>;<br>...<br></code></pre></td></tr></table></figure></li></ol><p>注：</p><p>字符串的形式必须为基本类型（char类型除外）否则会报<strong>java.lang.NumberFormatException</strong>数字格式化异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i =  Integer.parseInt(<span class="hljs-string">&quot;a&quot;</span>);<span class="hljs-comment">//java.lang.NumberFormatException 数字格式化异常</span><br></code></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> integer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntegerDemo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//基本数据类型——&gt;String</span><br>        <span class="hljs-comment">//基本数据类型的值+&quot;&quot;</span><br>        String s1 = <span class="hljs-number">100</span> + <span class="hljs-string">&quot;&quot;</span>;<br>        System.out.println(s1 + <span class="hljs-number">100</span>);<span class="hljs-comment">//100100</span><br><br>        <span class="hljs-comment">//使用包装类的静态方法</span><br>        String s2 = Integer.toString(<span class="hljs-number">100</span>);<br>        System.out.println(s2 + <span class="hljs-number">100</span>);<span class="hljs-comment">//100100</span><br><br>        <span class="hljs-comment">//使用String类的valueOf方法</span><br>        String s3 = String.valueOf(<span class="hljs-number">100</span>);<br>        System.out.println(s3 + <span class="hljs-number">100</span>);<span class="hljs-comment">//100100</span><br><br>        <span class="hljs-comment">//字符串--&gt;基本数据类型</span><br>        <span class="hljs-comment">//包装类的parseXX(&quot;s&quot;)方法</span><br>        <span class="hljs-keyword">int</span> i = Integer.parseInt(<span class="hljs-string">&quot;100&quot;</span>);<br>        System.out.println(i + <span class="hljs-number">100</span>);<span class="hljs-comment">//200</span><br><br>        <span class="hljs-comment">//int i2 =  Integer.parseInt(&quot;a&quot;);//java.lang.NumberFormatException 数字格式化异常</span><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>java.util.Date:表示日期、时间的类，精确到毫秒</p><h3 id="毫秒值"><a href="#毫秒值" class="headerlink" title="毫秒值"></a>毫秒值</h3><p>1000毫秒 = 1秒</p><p>可以用于时间和日期的计算</p><ol><li><p>把日期转换为毫秒进行计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> date;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">时间原点</span><br><span class="hljs-comment">19700101 00:00:00 (英国格林威治)</span><br><span class="hljs-comment">19700101 08:00:00 (中国 东八区时间+8h)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//获取当前系统时间到时间原点一共经历了多少毫秒</span><br>        System.out.println(System.currentTimeMillis());<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li><li><p>把毫秒转换为日期</p></li></ol><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> date;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        dateDemo01();<span class="hljs-comment">//Thu May 13 15:44:39 CST 2021</span><br>        dateDemo02(<span class="hljs-number">0L</span>);<span class="hljs-comment">//Thu Jan 01 08:00:00 CST 1970</span><br><br>    &#125;<br><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dateDemo01</span><span class="hljs-params">()</span> </span>&#123;<br>        Date date = <span class="hljs-keyword">new</span> Date();<br>        System.out.println(date);<span class="hljs-comment">//直接打印调用的是date对象的toString方法，它重写了toString方法</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dateDemo02</span><span class="hljs-params">(Long l)</span> </span>&#123;<br>        Date date = <span class="hljs-keyword">new</span> Date(l);<br>        System.out.println(date);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> date;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateDemo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        dataDemo03();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dataDemo03</span><span class="hljs-params">()</span> </span>&#123;<br>        Date date = <span class="hljs-keyword">new</span> Date();<br>        <span class="hljs-keyword">long</span> time = date.getTime();<span class="hljs-comment">//该成员方法返回的是一个long类型的数值 到时间原点有多少毫秒</span><br>        System.out.println(time);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="DateFormat类"><a href="#DateFormat类" class="headerlink" title="DateFormat类"></a>DateFormat类</h3><p>java.text.DataFormat：时间日期的格式化子类的抽象类</p><p>作用：</p><ol><li><p>格式化（日期–&gt;文本）</p></li><li><p>解析（文本–&gt;日期）</p></li></ol><p>成员方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SimpleDateFormat(String pattern) <span class="hljs-comment">//用于给定的模式和默认语言环境的日期格式符号构造</span><br></code></pre></td></tr></table></figure><p>参数：String pattern用于指定模式</p><p>模式：区分大小写</p><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210513174340.png" alt="simpleDataFormat"></p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//&quot;yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="hljs-comment">//&quot;yyyy年MM月dd日 HH时mm分ss秒&quot;    </span><br></code></pre></td></tr></table></figure><p>注：</p><p><strong>模式中的字母不能改，连接模式的符号可以改变。</strong></p><p>示例</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package <span class="hljs-type">date</span>;<br><br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> SimpleDataFormatDemo01 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) throws ParseException &#123;<br>        sdf1();<br>        sdf2();<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        使用DateFormat中的format方法把日期转换为文本</span><br><span class="hljs-comment">        1.创建SimpleDataFormat对象并指定对应模式</span><br><span class="hljs-comment">        2.调用对象的format(date)方法把传进来的date日期格式化为指定模式的文本</span><br><span class="hljs-comment">     */</span><br>    private static <span class="hljs-type">void</span> sdf1() &#123;<br>        //<span class="hljs-number">1.</span>创建SimpleDataFormat对象并指定对应模式<br>        SimpleDateFormat sdf = <span class="hljs-built_in">new</span> SimpleDateFormat(&quot;yyyy年MM月dd日 HH时mm分ss秒&quot;);<br>        //<span class="hljs-number">2.</span>调用对象的format(<span class="hljs-type">date</span>)方法把传进来的<span class="hljs-type">date</span>日期格式化为指定模式的文本<br>        <span class="hljs-type">Date</span> <span class="hljs-type">date</span> = <span class="hljs-built_in">new</span> <span class="hljs-type">Date</span>();<br>        String <span class="hljs-type">text</span> = sdf.format(<span class="hljs-type">date</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-type">date</span>);//Thu May <span class="hljs-number">13</span> <span class="hljs-number">18</span>:<span class="hljs-number">13</span>:<span class="hljs-number">14</span> CST <span class="hljs-number">2021</span><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-type">text</span>);//<span class="hljs-number">2021</span>年<span class="hljs-number">05</span>月<span class="hljs-number">13</span>日 <span class="hljs-number">18</span>时<span class="hljs-number">13</span>分<span class="hljs-number">14</span>秒<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        使用DataFormat中的parse方法把文本转换为日期</span><br><span class="hljs-comment">        1.创建SimpleDataFormat对象并指定对应模式</span><br><span class="hljs-comment">        2.调用对象的format(date)方法把传进来的date日期格式化为指定模式的文本</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        注：</span><br><span class="hljs-comment">        public Date parse(String source) throws ParseException</span><br><span class="hljs-comment">        parse方法声明了一个异常ParseException解析异常</span><br><span class="hljs-comment">        如果字符串和构造方法中的模式不一样，就会抛出此异常</span><br><span class="hljs-comment">        调用一个抛出异常的方法就必须处理这个异常</span><br><span class="hljs-comment">        1.throws继续抛出异常</span><br><span class="hljs-comment">        2.try...catch这个异常</span><br><span class="hljs-comment">     */</span><br>    private static <span class="hljs-type">void</span> sdf2() throws ParseException &#123;<br><br>        SimpleDateFormat sdf = <span class="hljs-built_in">new</span> SimpleDateFormat(&quot;yyyy年MM月dd日 HH时mm分ss秒&quot;);<br>        <span class="hljs-type">Date</span> <span class="hljs-type">date</span> = sdf.parse(&quot;2021年05月13日 18时13分14秒&quot;);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-type">date</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h3><p>计算一个人活了多少天</p><ol><li>Scanner获取这个人指定模式的出生日期，计算其对应的毫秒值</li><li>获取当前时间的毫秒值</li><li>两个毫秒值相减，把计算结果转换为天</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> date;<br><br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">计算一个人活了多少天</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">1. Scanner获取这个人指定模式的出生日期，计算其对应的毫秒值</span><br><span class="hljs-comment">2. 获取当前时间的毫秒值</span><br><span class="hljs-comment">3. 两个毫秒值相减，把计算结果转换为天</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br><span class="hljs-comment">//新建Scanner对象用于获取用户输入</span><br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入你的出生日期，格式为yyyy-MM-dd&quot;</span>);<br><br>        <span class="hljs-comment">//把用户输入的日期转换为毫秒值</span><br>        String birthDate = sc.next();<br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>        Date date = sdf.parse(birthDate);<br>        <br>        <span class="hljs-comment">//拿到两个毫秒值</span><br>        <span class="hljs-keyword">long</span> time1 = date.getTime();<br>        <span class="hljs-keyword">long</span> time2 = <span class="hljs-keyword">new</span> Date().getTime();<br><br>        <span class="hljs-comment">//毫秒转换为日</span><br>        System.out.println((time2-time1)/<span class="hljs-number">1000</span>/<span class="hljs-number">60</span>/<span class="hljs-number">60</span>/<span class="hljs-number">24</span>);<br>sc.close();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><p><code>java.lang.System</code>类提供了大量的静态方法，可以获取与系统相关的信息或系统级操作</p><p>常用方法</p><ul><li><code>public static long currentTimeMillis()</code>：返回以毫秒只为单位的当前时间</li><li><code>public static void arraycopy(Object src, int srcPocs, Object dest, int destPos, int length)</code>：数组中指定的的数据拷贝到另一个数组中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> system;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">- public static long currentTimeMillis() 返回以毫秒只为单位的当前时间</span><br><span class="hljs-comment">- public static void arraycopy(Object src, int srcPocs, Object dest, int destPos, int length)</span><br><span class="hljs-comment">    数组中指定的的数据拷贝到另一个数组中</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SystemDemo01</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//demo01();</span><br>        demo02();<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    public static void arraycopy(Object src, int srcPocs, Object dest, int destPos, int length)</span><br><span class="hljs-comment">    数组中指定的的数据拷贝到另一个数组中</span><br><span class="hljs-comment">    参数</span><br><span class="hljs-comment">        src - 源数组。</span><br><span class="hljs-comment">        srcPos - 源数组中的起始位置。</span><br><span class="hljs-comment">        dest - 目标数组。</span><br><span class="hljs-comment">        destPos - 目标数据中的起始位置。</span><br><span class="hljs-comment">        length - 要复制的数组元素的数量。</span><br><span class="hljs-comment">    练习</span><br><span class="hljs-comment">        将src数组的前三个元素复制到dest数组的元素的前三个位置</span><br><span class="hljs-comment">        src:[1, 2, 3, 4, 5]</span><br><span class="hljs-comment">        dest:[6, 7, 8, 9, 10]</span><br><span class="hljs-comment">        复制后</span><br><span class="hljs-comment">            dest:[1, 2, 3, 9, 10]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">demo02</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] src = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-keyword">int</span>[] dest = &#123;<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;<br>        System.out.println(<span class="hljs-string">&quot;复制前：&quot;</span> + Arrays.toString(dest));<span class="hljs-comment">//复制前：[6, 7, 8, 9, 10]</span><br>        System.arraycopy(src, <span class="hljs-number">0</span>, dest, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;复制后：&quot;</span> + Arrays.toString(dest));<span class="hljs-comment">//复制后：[1, 2, 3, 9, 10]</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    `public static long currentTimeMillis()`：返回以毫秒只为单位的当前时间</span><br><span class="hljs-comment">    用来测试程序的效率</span><br><span class="hljs-comment">    练习</span><br><span class="hljs-comment">        用for循环打印1-999所需的毫秒值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">demo01</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">long</span> s = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">999</span>; i++) &#123;<br>            System.out.println(i);<br>        &#125;<br>        <span class="hljs-keyword">long</span> e = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;程序共耗时：&quot;</span> + (e - s) + <span class="hljs-string">&quot;毫秒&quot;</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p><code>java.lang.String</code>代表字符串，程序中的所有字符”abc”，都可以看为实现这个类的实例</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h3 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h3><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p>java.lang.StringBuffer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringBuffer</span></span><br></code></pre></td></tr></table></figure><p>线程安全的可变字符序列。一个类似于 <code>String</code> 的字符串缓冲区，但不能修改。虽然在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。</p><p>构造方法</p><p>StringBuffer()<br>          构造一个其中不带字符的字符串缓冲区，其初始容量为 16 个字符。<br>StringBuffer(CharSequence seq)<br>          public java.lang.StringBuilder(CharSequence seq) 构造一个字符串缓冲区，它包含与指定的 CharSequence 相同的字符。<br>StringBuffer(int capacity)<br>          构造一个不带字符，但具有指定初始容量的字符串缓冲区。<br>StringBuffer(String str)<br>          构造一个字符串缓冲区，并将其内容初始化为指定的字符串内容。</p><h2 id="StringBuilder-字符串缓冲区"><a href="#StringBuilder-字符串缓冲区" class="headerlink" title="StringBuilder 字符串缓冲区"></a>StringBuilder 字符串缓冲区</h2><p>字符串缓冲区可以提高字符串的操作效率</p><p>底层也是一个数组，但是没有被final修饰，可以改变长度</p><p>byte[] byte = new byte[16]</p><p>StringBuilder在内存中始终是一个数组，占用空间小，效率高。</p><p>如果超出StringBuilder的容量，他会自动扩容</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public StringBuilder()</code>：构造一个空的StringBuilder容器</li><li><code>public StringBuilder(String str)</code>：构造一个StringBuilder容器，并将字符串添加进去</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> stringbuilder;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">java.lang.StringBuilder 字符串缓冲区可以提高字符串的操作效率</span><br><span class="hljs-comment">构造方法</span><br><span class="hljs-comment">    public StringBuilder()：构造一个空的StringBuilder容器</span><br><span class="hljs-comment">    public StringBuilder(String str)：构造一个StringBuilder容器，并将字符串添加进去</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringBuilderDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        StringBuilder stringBuilder1 = <span class="hljs-keyword">new</span> StringBuilder();<br>        System.out.println(<span class="hljs-string">&quot;sbu1:&quot;</span> + stringBuilder1);<br><br>        StringBuilder stringBuilder2 = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;abc&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;sbu2:&quot;</span> + stringBuilder2);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="成员方法-1"><a href="#成员方法-1" class="headerlink" title="成员方法"></a>成员方法</h3><ul><li><code>public StringBuilder append(...)</code>：添加任意类型的数据的字符串形式，并返回当前对象本身</li><li><code>public String toString()</code>：将StringBuilder对象转换为String对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> stringbuilder;<br><br><span class="hljs-keyword">import</span> java.util.Locale;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">- public StringBuilder append(...)：添加任意类型的数据的字符串形式，并返回当前对象本身</span><br><span class="hljs-comment">- public String toString()：将StringBuilder对象转换为String对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringBuilderDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        StringBuilder sbu1 = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        sbu1.append(&quot;abc&quot;);</span><br><span class="hljs-comment">        sbu1.append(true);</span><br><span class="hljs-comment">        sbu1.append(1);</span><br><span class="hljs-comment">        sbu1.append(&#x27;a&#x27;);</span><br><span class="hljs-comment">        System.out.println(sbu1);*/</span><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        链式编程:方法的返回值就是对象，可以根据对象继续调用方法</span><br><span class="hljs-comment">         */</span><br>        System.out.println(<span class="hljs-string">&quot;abc&quot;</span>.toUpperCase());<span class="hljs-comment">//ABC   转换为大写字母</span><br>        sbu1.append(<span class="hljs-string">&quot;abc&quot;</span>).append(<span class="hljs-keyword">true</span>).append(<span class="hljs-number">1</span>).append(<span class="hljs-string">&#x27;a&#x27;</span>);<br>        System.out.println(sbu1);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> stringbuilder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringBuilderDemo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//StringBuilder---&gt;String</span><br>        StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;hello&quot;</span>);<br>        String s1 = stringBuilder.toString();<br>        System.out.println(s1);<br>        <br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络编程</title>
    <link href="/2021/05/12/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2021/05/12/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="1-1概述"><a href="#1-1概述" class="headerlink" title="1.1概述"></a>1.1概述</h2><p>地球村</p><h2 id="1-2网络通信的要素"><a href="#1-2网络通信的要素" class="headerlink" title="1.2网络通信的要素"></a>1.2网络通信的要素</h2><h2 id="1-3IP"><a href="#1-3IP" class="headerlink" title="1.3IP"></a>1.3IP</h2><p>ip地址</p><ul><li>IPV4/IPV6<ul><li>IPV4    192.168.123.1    四个字节    42亿</li><li>IPV6    2409:8a20:4cb8:5ad0:3dd6:bade:e683:4774        128位    八个无符号整数</li></ul></li><li>公网 私网<ul><li>ABCD类地址</li><li>192.168.xx.xx    专门给组织内部使用</li></ul></li><li><h2 id="域名-记忆IP的问题"><a href="#域名-记忆IP的问题" class="headerlink" title="域名    记忆IP的问题"></a>域名    记忆IP的问题</h2></li></ul><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210518120342.png" alt="image-20210518120334853"></p><h2 id="1-4端口"><a href="#1-4端口" class="headerlink" title="1.4端口"></a>1.4端口</h2>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GUI编程之贪吃蛇</title>
    <link href="/2021/05/12/GUI%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87/"/>
    <url>/2021/05/12/GUI%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87/</url>
    
    <content type="html"><![CDATA[<h1 id="贪吃蛇小游戏"><a href="#贪吃蛇小游戏" class="headerlink" title="贪吃蛇小游戏"></a>贪吃蛇小游戏</h1><p><a href="https://pan.baidu.com/s/1RNXo1n7bbKDIu-eAMHCwbw">素材下载提取码7777</a></p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.snake;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-comment">//游戏主程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StartGame</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//实例JFrame</span><br>        JFrame jFrame = <span class="hljs-keyword">new</span> JFrame();<br>        <span class="hljs-comment">//设置属性</span><br>        jFrame.setBounds(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">900</span>,<span class="hljs-number">720</span>);<br>        jFrame.setResizable(<span class="hljs-keyword">false</span>);<br>        jFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>        <span class="hljs-comment">//把GamePanel加进来</span><br>        jFrame.add(<span class="hljs-keyword">new</span> GamePanel());<br><br>        <span class="hljs-comment">//设置可见性</span><br>        jFrame.setVisible(<span class="hljs-keyword">true</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.snake;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.ActionEvent;<br><span class="hljs-keyword">import</span> java.awt.event.ActionListener;<br><span class="hljs-keyword">import</span> java.awt.event.KeyEvent;<br><span class="hljs-keyword">import</span> java.awt.event.KeyListener;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">//游戏面板</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GamePanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JPanel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">KeyListener</span>, <span class="hljs-title">ActionListener</span> </span>&#123;<br>    <span class="hljs-comment">//定义蛇的数据结构 脑袋+身体+节数</span><br>    <span class="hljs-keyword">int</span> length;<br>    <span class="hljs-keyword">int</span>[] snakeX = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">500</span>];<br>    <span class="hljs-keyword">int</span>[] snakeY = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">500</span>];<br>    <span class="hljs-comment">//蛇移动方向</span><br>    String fx;<br><br>    <span class="hljs-comment">//食物</span><br>    <span class="hljs-keyword">int</span> foodx;<br>    <span class="hljs-keyword">int</span> foody;<br>    Random random = <span class="hljs-keyword">new</span> Random();<br><br><br>    <span class="hljs-comment">//游戏的暂停与开始</span><br>    <span class="hljs-keyword">boolean</span> flag;<br><br>    <span class="hljs-comment">//游戏失败判定</span><br>    <span class="hljs-keyword">boolean</span> isfail;<br><br>    <span class="hljs-comment">//分数</span><br>    <span class="hljs-keyword">int</span> score;<br><br><br>    Timer timer = <span class="hljs-keyword">new</span> Timer(<span class="hljs-number">200</span>, <span class="hljs-keyword">this</span>);<br><br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">GamePanel</span><span class="hljs-params">()</span> </span>&#123;<br>        init();<span class="hljs-comment">//初始化</span><br>        <span class="hljs-comment">//获得焦点和键盘事件</span><br>        setFocusable(<span class="hljs-keyword">true</span>);<br>        addKeyListener(<span class="hljs-keyword">this</span>);<br>        timer.start();<br>    &#125;<br><br>    <span class="hljs-comment">//初始化方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        length = <span class="hljs-number">3</span>;<br>        snakeX[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>;<br>        snakeY[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>;<span class="hljs-comment">//蛇头</span><br>        snakeX[<span class="hljs-number">1</span>] = <span class="hljs-number">75</span>;<br>        snakeY[<span class="hljs-number">1</span>] = <span class="hljs-number">100</span>;<span class="hljs-comment">//蛇身</span><br>        snakeX[<span class="hljs-number">2</span>] = <span class="hljs-number">50</span>;<br>        snakeY[<span class="hljs-number">2</span>] = <span class="hljs-number">100</span>;<span class="hljs-comment">//蛇身</span><br>        fx = <span class="hljs-string">&quot;R&quot;</span>;<br>        flag = <span class="hljs-keyword">false</span>;<br>        isfail = <span class="hljs-keyword">false</span>;<br>        score = <span class="hljs-number">0</span>;<br><br>        foodx = <span class="hljs-number">25</span>+ <span class="hljs-number">25</span> * random.nextInt(<span class="hljs-number">34</span>);<br>        foody = <span class="hljs-number">75</span> + <span class="hljs-number">25</span> * random.nextInt(<span class="hljs-number">24</span>);<br>    &#125;<br><br><br>    <span class="hljs-comment">//绘制面板 游戏中的所有东西都是由Graphics这个画笔画的</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">paintComponent</span><span class="hljs-params">(Graphics g)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.paintComponent(g);<span class="hljs-comment">//清屏</span><br>        setBackground(Color.white);<span class="hljs-comment">//定义面板背景颜色</span><br>        Data.header.paintIcon(<span class="hljs-keyword">this</span>, g, <span class="hljs-number">25</span>, <span class="hljs-number">11</span>);<span class="hljs-comment">//绘制头部广告位</span><br>        g.fillRect(<span class="hljs-number">25</span>, <span class="hljs-number">75</span>, <span class="hljs-number">850</span>, <span class="hljs-number">600</span>);<span class="hljs-comment">//绘制长方形，游戏的主界面</span><br><br>        <span class="hljs-comment">//画分数</span><br>        g.setColor(Color.YELLOW);<br>        g.setFont(<span class="hljs-keyword">new</span> Font(<span class="hljs-string">&quot;微软雅黑&quot;</span>, Font.BOLD,<span class="hljs-number">15</span>));<br>        g.drawString(<span class="hljs-string">&quot;当前分数为：&quot;</span> + score, <span class="hljs-number">750</span>, <span class="hljs-number">35</span>);<br>        <span class="hljs-comment">//画食物</span><br>        Data.food.paintIcon(<span class="hljs-keyword">this</span>, g, foodx, foody);<br>        <span class="hljs-comment">//画蛇头</span><br>        <span class="hljs-keyword">if</span> (fx.equals(<span class="hljs-string">&quot;R&quot;</span>)) &#123;<br>            Data.right.paintIcon(<span class="hljs-keyword">this</span>, g, snakeX[<span class="hljs-number">0</span>], snakeY[<span class="hljs-number">0</span>]);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fx.equals(<span class="hljs-string">&quot;L&quot;</span>)) &#123;<br>            Data.left.paintIcon(<span class="hljs-keyword">this</span>, g, snakeX[<span class="hljs-number">0</span>], snakeY[<span class="hljs-number">0</span>]);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fx.equals(<span class="hljs-string">&quot;U&quot;</span>)) &#123;<br>            Data.up.paintIcon(<span class="hljs-keyword">this</span>, g, snakeX[<span class="hljs-number">0</span>], snakeY[<span class="hljs-number">0</span>]);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fx.equals(<span class="hljs-string">&quot;D&quot;</span>)) &#123;<br>            Data.down.paintIcon(<span class="hljs-keyword">this</span>, g, snakeX[<span class="hljs-number">0</span>], snakeY[<span class="hljs-number">0</span>]);<br>        &#125;<br><br>        <span class="hljs-comment">//画蛇身</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; length; i++) &#123;<br>            Data.body.paintIcon(<span class="hljs-keyword">this</span>, g, snakeX[i], snakeY[i]);<br>        &#125;<br>        <span class="hljs-comment">//画开始与暂停游戏</span><br>        <span class="hljs-keyword">if</span> (flag == <span class="hljs-keyword">false</span>) &#123;<br>            g.setColor(Color.WHITE);<br>            g.setFont(<span class="hljs-keyword">new</span> Font(<span class="hljs-string">&quot;微软雅黑&quot;</span>, Font.BOLD, <span class="hljs-number">40</span>));<br>            g.drawString(<span class="hljs-string">&quot;请按空格开始游戏&quot;</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>);<br>        &#125;<br>        <span class="hljs-comment">//画游戏结束</span><br>        <span class="hljs-keyword">if</span> (isfail) &#123;<br>            g.setColor(Color.RED);<br>            g.setFont(<span class="hljs-keyword">new</span> Font(<span class="hljs-string">&quot;微软雅黑&quot;</span>, Font.BOLD, <span class="hljs-number">40</span>));<br>            g.drawString(<span class="hljs-string">&quot;GAME OVER&quot;</span>, <span class="hljs-number">350</span>, <span class="hljs-number">350</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">keyTyped</span><span class="hljs-params">(KeyEvent e)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">//重写键盘按压事件</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> </span>&#123;<br><br>        <span class="hljs-keyword">int</span> keyCode = e.getKeyCode();<br>        <span class="hljs-keyword">if</span> (isfail) &#123;<br>            flag = <span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">if</span> (keyCode == KeyEvent.VK_SPACE) &#123;<br>                init();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (keyCode == KeyEvent.VK_SPACE) &#123;<br><br>            flag = !flag;<br>            repaint();<br>        &#125;<br>        <span class="hljs-comment">//蛇的移动</span><br>        <span class="hljs-keyword">if</span> (keyCode == KeyEvent.VK_UP) &#123;<br>            fx = <span class="hljs-string">&quot;U&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (keyCode == KeyEvent.VK_DOWN) &#123;<br>            fx = <span class="hljs-string">&quot;D&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (keyCode == KeyEvent.VK_LEFT) &#123;<br>            fx = <span class="hljs-string">&quot;L&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (keyCode == KeyEvent.VK_RIGHT) &#123;<br>            fx = <span class="hljs-string">&quot;R&quot;</span>;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">//事件监听 通过固定事件来刷新 1s=10次</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            <span class="hljs-comment">//身体移动</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = length - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>                snakeX[i] = snakeX[i - <span class="hljs-number">1</span>];<br>                snakeY[i] = snakeY[i - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-comment">//脑袋走向</span><br>            <span class="hljs-keyword">if</span> (fx.equals(<span class="hljs-string">&quot;R&quot;</span>)) &#123;<br>                <span class="hljs-comment">//头右移</span><br>                snakeX[<span class="hljs-number">0</span>] = snakeX[<span class="hljs-number">0</span>] + <span class="hljs-number">25</span>;<br><br>                <span class="hljs-comment">//边界判断</span><br>                <span class="hljs-keyword">if</span> (snakeX[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">850</span>) &#123;<br>                    snakeX[<span class="hljs-number">0</span>] = <span class="hljs-number">25</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fx.equals(<span class="hljs-string">&quot;L&quot;</span>)) &#123;<br>                <span class="hljs-comment">//头左移</span><br>                snakeX[<span class="hljs-number">0</span>] = snakeX[<span class="hljs-number">0</span>] - <span class="hljs-number">25</span>;<br><br>                <span class="hljs-comment">//边界判断</span><br>                <span class="hljs-keyword">if</span> (snakeX[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">25</span>) &#123;<br>                    snakeX[<span class="hljs-number">0</span>] = <span class="hljs-number">850</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fx.equals(<span class="hljs-string">&quot;U&quot;</span>)) &#123;<br>                <span class="hljs-comment">//头上移</span><br>                snakeY[<span class="hljs-number">0</span>] = snakeY[<span class="hljs-number">0</span>] - <span class="hljs-number">25</span>;<br><br>                <span class="hljs-comment">//边界判断</span><br>                <span class="hljs-keyword">if</span> (snakeY[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">75</span>) &#123;<br>                    snakeY[<span class="hljs-number">0</span>] = <span class="hljs-number">650</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fx.equals(<span class="hljs-string">&quot;D&quot;</span>)) &#123;<br>                <span class="hljs-comment">//头左移</span><br>                snakeY[<span class="hljs-number">0</span>] = snakeY[<span class="hljs-number">0</span>] + <span class="hljs-number">25</span>;<br><br>                <span class="hljs-comment">//边界判断</span><br>                <span class="hljs-keyword">if</span> (snakeY[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">650</span>) &#123;<br>                    snakeY[<span class="hljs-number">0</span>] = <span class="hljs-number">75</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">//吃食物判断</span><br>            <span class="hljs-keyword">if</span> (foodx == snakeX[<span class="hljs-number">0</span>] &amp;&amp; foody == snakeY[<span class="hljs-number">0</span>]) &#123;<br>                length++;<br>                score += <span class="hljs-number">10</span>;<br>                foodx = <span class="hljs-number">25</span> + <span class="hljs-number">25</span> * random.nextInt(<span class="hljs-number">34</span>);<br>                foody = <span class="hljs-number">75</span> + <span class="hljs-number">25</span> * random.nextInt(<span class="hljs-number">24</span>);<br>            &#125;<br><br>            <span class="hljs-comment">//失败判定</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = length - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>                <span class="hljs-keyword">if</span> (snakeX[<span class="hljs-number">0</span>] == snakeX[i] &amp;&amp; snakeY[<span class="hljs-number">0</span>] == snakeY[i]) &#123;<br>                    isfail = <span class="hljs-keyword">true</span>;<br>                    flag = <span class="hljs-keyword">false</span>;<br>                &#125;<br>            &#125;<br><br><br>            repaint();<br>        &#125;<br>        <span class="hljs-comment">//启动计时器</span><br>        timer.start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.snake;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-comment">//数据中心</span><br><span class="hljs-comment">//用于存放图片相关数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Data</span> </span>&#123;<br>    <span class="hljs-comment">//绝对路径  相对路径</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> URL headerUrl = Data.class.getResource(<span class="hljs-string">&quot;/statics/header.png&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ImageIcon header = <span class="hljs-keyword">new</span> ImageIcon(headerUrl);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> URL bodyUrl = Data.class.getResource(<span class="hljs-string">&quot;/statics/body.png&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ImageIcon body = <span class="hljs-keyword">new</span> ImageIcon(bodyUrl);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> URL downUrl = Data.class.getResource(<span class="hljs-string">&quot;/statics/down.png&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ImageIcon down = <span class="hljs-keyword">new</span> ImageIcon(downUrl);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> URL foodUrl = Data.class.getResource(<span class="hljs-string">&quot;/statics/food.png&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ImageIcon food = <span class="hljs-keyword">new</span> ImageIcon(foodUrl);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> URL leftUrl = Data.class.getResource(<span class="hljs-string">&quot;/statics/left.png&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ImageIcon left = <span class="hljs-keyword">new</span> ImageIcon(leftUrl);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> URL rightUrl = Data.class.getResource(<span class="hljs-string">&quot;/statics/right.png&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ImageIcon right = <span class="hljs-keyword">new</span> ImageIcon(rightUrl);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> URL upUrl = Data.class.getResource(<span class="hljs-string">&quot;/statics/up.png&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ImageIcon up = <span class="hljs-keyword">new</span> ImageIcon(upUrl);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>游戏截图</p><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210513212938.png" alt="贪吃蛇"></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gitee+PicGo免费私人图床搭建教程</title>
    <link href="/2021/05/11/Gitee-PicGo%E5%85%8D%E8%B4%B9%E7%A7%81%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <url>/2021/05/11/Gitee-PicGo%E5%85%8D%E8%B4%B9%E7%A7%81%E4%BA%BA%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Gitee-PicGo免费私人图床搭建教程"><a href="#Gitee-PicGo免费私人图床搭建教程" class="headerlink" title="Gitee+PicGo免费私人图床搭建教程"></a>Gitee+PicGo免费私人图床搭建教程</h1><p>我们在写Markdown博客的时候，上传到网上后，图片仍然保存在本地并不会上传。</p><p>解决方法</p><ul><li>自己搭建免费图床</li><li><del>用收费图床</del></li></ul><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ol><li><p>注册Gitee账号</p><ol><li><p><a href="https://gitee.com/">Gitee官网</a></p></li><li><p>新建仓库<img src="https://gitee.com/Linsip/blog/raw/master/img/20210512023922.png" alt="image-20210512023801125"></p></li><li><p>生成私人令牌</p><p>打开账号设置，私人令牌，生成令牌</p><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210512024238.png" alt="私人令牌"></p><p>勾选下面几项，描述自己随便写，然后提交</p><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210512024547.png" alt="私人令牌"></p><p><strong>保存好你的私人令牌</strong></p><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210512024910.png" alt="私人令牌生成"></p></li></ol></li><li><p>下载安装PicGo</p><ol><li><p><a href="https://molunerfinn.com/PicGo/">PicGo下载</a></p></li><li><p>自行安装</p><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210512021839.png" alt="PicGo"></p></li></ol></li><li><p>Node.js</p><ol><li><p><a href="https://nodejs.org/en/download/package-manager/">Node.js</a></p></li><li><p>检验是否安装成功</p><p>命令行输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node --version<br></code></pre></td></tr></table></figure><p>如果看到版本号就安装成功</p></li></ol></li></ol><h2 id="PicGo配置"><a href="#PicGo配置" class="headerlink" title="PicGo配置"></a>PicGo配置</h2><p>PicGo下载安装一个gitee-uploader插件</p><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210512015945.png" alt="安装gitee-uploader插件"></p><p>打开图床设置，填入右边方框内容</p><p>其中：</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">repo</td><td align="center">比如你的 gitee 账号为 user，存储图片的仓库为 images，则此处填入 <strong>user/images</strong></td></tr><tr><td align="center">branch</td><td align="center">分支</td></tr><tr><td align="center">token</td><td align="center">私人令牌</td></tr><tr><td align="center">path</td><td align="center">路径</td></tr></tbody></table><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210512020239.png" alt="图床设置"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="Typera"><a href="#Typera" class="headerlink" title="Typera"></a>Typera</h3><ol><li>打开Typera，按<code>ctrl</code>+<code>.</code>进入偏好设置，点击图像</li><li>对插入图片做以下设置</li><li>上传服务选择PicGo，路径选择自己安装的PicGo路径</li></ol><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210512014039.png" alt="typera"></p><p>点击<strong>验证图片上传选项</strong>，弹出如下内容表示配置成功</p><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210512014619.png" alt="图片验证选项"></p><p>在Typera插入图片时就会自动上传，而不用保存在本地</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图床</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OOP原则</title>
    <link href="/2021/05/11/OOP%E5%8E%9F%E5%88%99/"/>
    <url>/2021/05/11/OOP%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="OOP原则"><a href="#OOP原则" class="headerlink" title="OOP原则"></a>OOP原则</h1><h2 id="OOP概述"><a href="#OOP概述" class="headerlink" title="OOP概述"></a>OOP概述</h2><blockquote><p>面向对象程序设计(Object Oriented Programming)作为一种新方法，其本质是以建立模型体现出来的抽象思维过程和面向对象的方法。模型是用来反映现实世界中事物特征的。任何一个模型都不可能反映客观事物的一切具体特征，只能对事物特征和变化规律的一种抽象，且在它所涉及的范围内更普遍、更集中、更深刻地描述客体的特征。通过建立模型而达到的抽象是人们对客体认识的深化。</p></blockquote><p>什么是优秀的代码？</p><ul><li>代码可读性高</li><li>逻辑清晰</li><li>高内聚，低耦合</li><li>···</li></ul><p>OOP三大特性</p><ul><li>封装</li><li>继承</li><li>多态</li></ul><h2 id="OOP五大设计原则"><a href="#OOP五大设计原则" class="headerlink" title="OOP五大设计原则"></a>OOP五大设计原则</h2><p>单一职责原则</p><p>开闭原则</p><p>里氏替换原则</p><p>接口隔离原则</p><p>依赖倒置原则</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>高内聚，低耦合</strong></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GUI图形用户界面</title>
    <link href="/2021/05/06/GUI/"/>
    <url>/2021/05/06/GUI/</url>
    
    <content type="html"><![CDATA[<h1 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h1><p>GUI全称Graphical User Interface，图形用户界面</p><p>组件</p><ul><li><p>窗口</p></li><li><p>弹窗</p></li><li><p>面板</p></li><li><p>文本框</p></li><li><p>列表框</p></li><li><p>按钮</p></li><li><p>图片</p></li><li><p>监听事件</p></li><li><p>鼠标</p></li><li><p>键盘事件</p></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>GUI核心技术：<strong>AWT、SWing</strong></p><p>为什么不火</p><ol><li><p>界面不美观</p></li><li><p>需要jre环境</p></li></ol><p>为什么要学习GUI</p><ol><li><strong>MVC</strong>，了解监听器</li><li>可以写出自己心中想要的工具</li><li>工作中可能维护到SWing界面</li></ol><h2 id="AWT"><a href="#AWT" class="headerlink" title="AWT"></a>AWT</h2><h3 id="AWT介绍"><a href="#AWT介绍" class="headerlink" title="AWT介绍"></a><strong>AWT介绍</strong></h3><p>AWT(Abstract Windows Toolkit)抽象窗口工具</p><p>包含很多类和接口</p><p>元素：窗口、按钮、文本框</p><p>Java.awt包的层次结构如下</p><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210511142213.png" alt="image-20210511142206455"></p><h3 id="组件和容器Component-and-Container"><a href="#组件和容器Component-and-Container" class="headerlink" title="组件和容器Component and Container"></a>组件和容器Component and Container</h3><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><blockquote><p>容器(Container)也是一个类，实际上是Component的子类，因此容器本身也是一个组件，具有组件的所有性质，但是它的主要功能是容纳其它组件和容器。容器可以简化图形化界面的设计，以整体结构来布置界面。所有的容器都可以通过add()方法向容器中添加组件。常用的容器3种：Panel, Frame, Applet。</p><p>来源：百度百科</p></blockquote><p><strong>框架Frame</strong></p><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Frame frame = <span class="hljs-keyword">new</span> Frame(<span class="hljs-string">&quot;&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>要生成一个窗口，通常使用Window的子类Frame类进行实例化，而不是直接使用Window 类，框架的外观就像平常Windows系统下的窗口，有标题、边框、菜单和大小等。setSize()方法可以设置框架尺寸的大小，setVisibe()方法可以设置窗口的可见性。</p><p>来源：百度百科</p></blockquote><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson01;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-comment">//第一个图形界面</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFrame</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//Frame 看源码</span><br>        Frame frame = <span class="hljs-keyword">new</span> Frame(<span class="hljs-string">&quot;我的第一个Java图形界面&quot;</span>);<br>        <span class="hljs-comment">//设置可见性</span><br>        frame.setVisible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">//设置窗口大小</span><br>        frame.setSize(<span class="hljs-number">400</span>, <span class="hljs-number">400</span>);<br>        <span class="hljs-comment">//设置背景颜色</span><br>        frame.setBackground(<span class="hljs-keyword">new</span> Color(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>        <span class="hljs-comment">//设置弹出的初始位置</span><br>        frame.setLocation(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//设置大小固定</span><br>        frame.setResizable(<span class="hljs-keyword">false</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>窗口出现问题</strong></p><ol><li><p>窗口关闭不掉</p></li><li><p>解决方法：停止Java程序运行</p></li></ol><p>回顾封装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson01;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-comment">//封装TestFrame</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFrame02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//开启多个窗口</span><br>        MyFrame myFrame1 = <span class="hljs-keyword">new</span> MyFrame(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<br>        MyFrame myFrame2 = <span class="hljs-keyword">new</span> MyFrame(<span class="hljs-number">400</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<br>        MyFrame myFrame3 = <span class="hljs-keyword">new</span> MyFrame(<span class="hljs-number">200</span>, <span class="hljs-number">400</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<br>        MyFrame myFrame4 = <span class="hljs-keyword">new</span> MyFrame(<span class="hljs-number">400</span>, <span class="hljs-number">400</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//自定义类来继承Frame实现封装</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Frame</span> </span>&#123;<br>    <span class="hljs-comment">//定义静态变量，用于区别多个窗口</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> id;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyFrame</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> h)</span> </span>&#123;<br>        <span class="hljs-comment">//调用父类即Frame</span><br>        <span class="hljs-keyword">super</span>(<span class="hljs-string">&quot;MyFrame&quot;</span> + (++id));<br>        <span class="hljs-comment">//设置参数</span><br>        setVisible(<span class="hljs-keyword">true</span>);<br>        setBackground(Color.black);<br>        setBounds(x, y, w, h);<br>        setResizable(<span class="hljs-keyword">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="面板panel"><a href="#面板panel" class="headerlink" title="面板panel"></a>面板panel</h4><blockquote><p>框架一般用作Java应用程序的窗口，而Applet是Java小程序的窗口。与Frame不同，Applet是在网页中显示的，也可以通过添加Panel进行组件布局。</p><p>来源：百度百科</p></blockquote><p>Panel一个空间，非独立存在</p><p>可以在panel中添加文本框、文本域、列表、单选按钮、复选按钮、画布、标签、字体大小、事件、滚动条</p><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Panel panel = <span class="hljs-keyword">new</span> Panel();<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> cn.linsip.lesson01;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.WindowAdapter;<br><span class="hljs-keyword">import</span> java.awt.event.WindowEvent;<br><br><span class="hljs-comment">//Panel</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPanel</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Frame frame = <span class="hljs-keyword">new</span> MyFrame(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">400</span>, <span class="hljs-number">400</span>, Color.RED);<br>        Panel panel = <span class="hljs-keyword">new</span> Panel();<br>        <span class="hljs-comment">//设置布局</span><br>        frame.setLayout(<span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//设置坐标</span><br>        panel.setBounds(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<span class="hljs-comment">//Panel的坐标是相对于Frame的</span><br>        panel.setBackground(Color.white);<br>        <span class="hljs-comment">//panel加入frame</span><br>        frame.add(panel);<br>        <span class="hljs-comment">//窗口监听WindowListener，实现关闭窗口功能,监听器参数是一个内部类WindowAdapter</span><br>        <br>        <span class="hljs-comment">//适配器模式</span><br>        frame.addWindowListener(<span class="hljs-keyword">new</span> WindowAdapter() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowClosing</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br>                System.exit(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h3><blockquote><p>布局管理器（LayoutManager）：每个容器都有一个布局管理器，当容器需要对某个组件进行定位或判断其大小、尺寸时，就会调用其对应的布局管理器。使用布局管理器可以实现跨平台的特性，并且获得动态的布局效果。布局管理器负责管理组件的排列顺序、大小和位置。不同的布局管理器使用不同的布局策略，容器可以通过选择不同的布局管理器来决定如何布局。</p><p>来源：百度百科</p></blockquote><ol><li><h4 id="流式布局Flowlayout"><a href="#流式布局Flowlayout" class="headerlink" title="流式布局Flowlayout"></a><strong>流式布局Flowlayout</strong></h4><blockquote><p>FlowLayout是Panel 和 Applet 的默认布局管理器。在该布局管理器中，组件在容器中按照从上到下，从左到右的顺序进行排列，行满后则换行。</p></blockquote><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//默认构造方法，设置居中对齐方式，横向和纵向间隔均为默认5像素</span><br>FlowLayout();<br><span class="hljs-comment">//设置居左对齐，横向和纵向间隔均为默认5像素</span><br>FlowLayout(<span class="hljs-keyword">new</span> FlowLayout.LEFT);<br><span class="hljs-comment">//设置居右对齐，横向间隔20像素，纵向间隔20像</span><br>FlowLayout(<span class="hljs-keyword">new</span> FlowLayout.RIGHT, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson01;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFlowLayout</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Frame frame = <span class="hljs-keyword">new</span> Frame();<br>        <span class="hljs-comment">//组件按钮</span><br>        Button button1 = <span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;button1&quot;</span>);<br>        Button button2 = <span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;button2&quot;</span>);<br>        Button button3 = <span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;button3&quot;</span>);<br>        <span class="hljs-comment">//设置流式布局</span><br>        frame.setLayout(<span class="hljs-keyword">new</span> FlowLayout(FlowLayout.LEFT));<br>        frame.setVisible(<span class="hljs-keyword">true</span>);<br>        frame.setBounds(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">200</span>);<br>        <span class="hljs-comment">//添加Buttun到Frame</span><br>        frame.add(button1);<br>        frame.add(button2);<br>        frame.add(button3);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><strong>边界布局管理器BorderLayout</strong></p><blockquote><p>BorderLayout是Window、Frame和Dialog的默认布局管理器，其将容器分成North、South、East、West和Center 5个区域，每个区域只能放置一个组件。在使用add()方法添加组件到容器时，必须指定将其放置在哪个区域中。使用BorderLayout时，如果容器大小发生变换，组件的相对位置不变。</p><p>来源：百度百科</p></blockquote><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">BorderLayout bl = <span class="hljs-keyword">new</span> BorderLayout();<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson01;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestBorderTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//一个Frame</span><br>        Frame frame = <span class="hljs-keyword">new</span> Frame();<br>        <span class="hljs-comment">//四个按钮</span><br>        Button east = <span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;EAST&quot;</span>);<br>        Button west = <span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;WEST&quot;</span>);<br>        Button south = <span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;SOUTH&quot;</span>);<br>        Button north = <span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;NORTH&quot;</span>);<br>        Button center = <span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;CENTER&quot;</span>);<br>        <span class="hljs-comment">//按钮添加到frame</span><br>        frame.add(east,BorderLayout.EAST);<br>        frame.add(west,BorderLayout.WEST);<br>        frame.add(south,BorderLayout.SOUTH);<br>        frame.add(north,BorderLayout.NORTH);<br>        frame.add(center,BorderLayout.CENTER);<br>        <span class="hljs-comment">//设置frame属性</span><br>        frame.setVisible(<span class="hljs-keyword">true</span>);<br>        frame.setBounds(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">200</span>);<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><strong>网格布局管理器GridLayout</strong></p><blockquote><p>GridLayout 可使容器中的各个组件呈网格状布局，平局占据容器的空间，即使容器的大小发生变化，每个组件还是平均占据容器的空间。和FlowLayout一样，GridLayout也是按照从上到下，从左到右的规律进行排列的。</p><p>来源：百度百科</p></blockquote><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">GridLayout = <span class="hljs-keyword">new</span> GridLayout();<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson01;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.WindowAdapter;<br><span class="hljs-keyword">import</span> java.awt.event.WindowEvent;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestGridLayout</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Frame frame = <span class="hljs-keyword">new</span> Frame();<br>        frame.setVisible(<span class="hljs-keyword">true</span>);<br>        Button button1 = <span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;butten1&quot;</span>);<br>        Button button2 = <span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;button2&quot;</span>);<br>        Button button3 = <span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;button3&quot;</span>);<br>        Button button4 = <span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;button4&quot;</span>);<br>        Button button5 = <span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;button5&quot;</span>);<br>        Button button6 = <span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;button6&quot;</span>);<br>        frame.setLayout(<span class="hljs-keyword">new</span> GridLayout(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>));<br>        <span class="hljs-comment">//frame.setBounds(100,100,200,200);</span><br>        frame.add(button1);<br>        frame.add(button2);<br>        frame.add(button3);<br>        frame.add(button4);<br>        frame.add(button5);<br>        frame.add(button6);<br>        frame.pack();<span class="hljs-comment">//Java函数，自动匹配大小</span><br>        frame.addWindowListener(<span class="hljs-keyword">new</span> WindowAdapter() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowClosing</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br>                System.exit(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><p><strong>练习</strong></p><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210511150250.png" alt="image-20210511150249932"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson01;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.WindowAdapter;<br><span class="hljs-keyword">import</span> java.awt.event.WindowEvent;<br><span class="hljs-keyword">import</span> java.awt.event.WindowListener;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FrameDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Frame frame = <span class="hljs-keyword">new</span> Frame(<span class="hljs-string">&quot;练习&quot;</span>);<br>        Panel panel1 = <span class="hljs-keyword">new</span> Panel(<span class="hljs-keyword">new</span> BorderLayout());<br>        Panel panel2 = <span class="hljs-keyword">new</span> Panel(<span class="hljs-keyword">new</span> GridLayout(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>));<br>        Panel panel3 = <span class="hljs-keyword">new</span> Panel(<span class="hljs-keyword">new</span> BorderLayout());<br>        Panel panel4 = <span class="hljs-keyword">new</span> Panel(<span class="hljs-keyword">new</span> GridLayout(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>));<br>        frame.setLayout(<span class="hljs-keyword">new</span> GridLayout(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>));<br>        frame.setSize(<span class="hljs-number">400</span>, <span class="hljs-number">400</span>);<br>        frame.setVisible(<span class="hljs-keyword">true</span>);<br>        <br>        panel1.add(<span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;east&quot;</span>), BorderLayout.EAST);<br>        panel1.add(<span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;west&quot;</span>), BorderLayout.WEST);<br>        panel2.add(<span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;p2-1&quot;</span>));<br>        panel2.add(<span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;p2-2&quot;</span>));<br><br>        panel1.add(panel2, BorderLayout.CENTER);<br>        frame.add(panel1);<br><br>        panel3.add(<span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;east&quot;</span>), BorderLayout.EAST);<br>        panel3.add(<span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;west&quot;</span>), BorderLayout.WEST);<br>        panel4.add(<span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;p4-1&quot;</span>));<br>        panel4.add(<span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;p4-2&quot;</span>));<br>        panel4.add(<span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;p4-3&quot;</span>));<br>        panel4.add(<span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;p4-4&quot;</span>));<br><br>        panel3.add(panel4, BorderLayout.CENTER);<br>        frame.add(panel3);<br><br>        frame.addWindowListener(<span class="hljs-keyword">new</span> WindowAdapter() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowClosing</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br>                System.exit(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ol><li>Frame是一个顶级窗口</li><li>Panel无法单独显示，必须添加其到某个容器中</li><li>掌握3种布局管理器</li><li>Frame设置大小、定位、背景颜色、可见性、监听。</li></ol><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><blockquote><p>Java事件监听器是由事件类和监听接口组成，自定义一个事件前，必须提供一个事件的监听接口以及一个事件类。JAVA中监听接口是继承java.util.EventListener的类，事件类继承java.util.EventObject的类。</p><p>来源：百度百科</p></blockquote><p>事件发生的时候，该干什么</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson02;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.ActionEvent;<br><span class="hljs-keyword">import</span> java.awt.event.ActionListener;<br><span class="hljs-keyword">import</span> java.awt.event.WindowAdapter;<br><span class="hljs-keyword">import</span> java.awt.event.WindowEvent;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestActionEvent01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//按下按钮，触发事件</span><br>        Frame frame = <span class="hljs-keyword">new</span> Frame();<br>        Button button = <span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;say hello&quot;</span>);<br><span class="hljs-comment">//给按钮添加一个事件监听，ActionListener是一个接口，需要一个ActionListener参数，我们自定义一个类来实现这个接口</span><br>        MyActionListener myActionListener = <span class="hljs-keyword">new</span> MyActionListener();<br><span class="hljs-comment">//按钮添加监听</span><br>        button.addActionListener(myActionListener);<br><span class="hljs-comment">//按钮加入frame</span><br>        frame.add(button, BorderLayout.CENTER);<br>        <span class="hljs-comment">//设置窗口属性</span><br>        frame.pack();<br>        frame.setVisible(<span class="hljs-keyword">true</span>);<br><span class="hljs-comment">//我们这里重写以下关闭窗口的方法</span><br>        windowClosing(frame);<br>    &#125;<br><span class="hljs-comment">//关闭窗口的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowClosing</span><span class="hljs-params">(Frame frame)</span> </span>&#123;<br>        frame.addWindowListener(<span class="hljs-keyword">new</span> WindowAdapter() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowClosing</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br>                System.exit(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//自定义类来实现接口ActionListener</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyActionListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ActionListener</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210511152225.png" alt="image-20210511152225598"></p><p>两个按钮共用一个事件</p><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson02;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.ActionEvent;<br><span class="hljs-keyword">import</span> java.awt.event.ActionListener;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestActionEvent02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//俩按钮实现一个事件</span><br>        Frame frame = <span class="hljs-keyword">new</span> Frame();<br>        Button button1 = <span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;start&quot;</span>);<br>        Button button2 = <span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;stop&quot;</span>);<br><span class="hljs-comment">//自定义类来实现事件监听</span><br>        MyMonitor myActionListener = <span class="hljs-keyword">new</span> MyMonitor();<br><span class="hljs-comment">//按钮添加监听</span><br>        button1.addActionListener(myActionListener);<br>        button2.addActionListener(myActionListener);<br><span class="hljs-comment">//frame添加button</span><br>        frame.add(button1, BorderLayout.NORTH);<br>        frame.add(button2, BorderLayout.SOUTH);<br><br><span class="hljs-comment">//frame属性</span><br>        frame.pack();<br>        frame.setVisible(<span class="hljs-keyword">true</span>);<br>        windowClosing(frame);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowClosing</span><span class="hljs-params">(Frame frame)</span> </span>&#123;<br>        frame.addWindowListener(<span class="hljs-keyword">new</span> WindowAdapter() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowClosing</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br>                System.exit(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMonitor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ActionListener</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;按钮getCommand:&quot;</span> + e.getActionCommand());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210511152612.png" alt="image-20210511152612642"></p><p>注：</p><p>优先用setActionCommand()，其次才是Button的标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">button1.setActionCommand(<span class="hljs-string">&quot;s&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="输入框监听TextField"><a href="#输入框监听TextField" class="headerlink" title="输入框监听TextField"></a>输入框监听TextField</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson02;<br><br><span class="hljs-keyword">import</span> cn.linsip.lesson01.TestFrame;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.ActionEvent;<br><span class="hljs-keyword">import</span> java.awt.event.ActionListener;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestText</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//启动</span><br>        <span class="hljs-keyword">new</span> MyFrame();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//我们用自定义类来封装Frame</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Frame</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyFrame</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//添加文本框</span><br>        TextField textField = <span class="hljs-keyword">new</span> TextField();<br>        add(textField);<br><br>        <span class="hljs-comment">//监听文本框输入的文字</span><br>        MyMonitor2 myMonitor2 = <span class="hljs-keyword">new</span> MyMonitor2();<br>        textField.addActionListener(myMonitor2);<br><br>        <span class="hljs-comment">//设置替换编码</span><br>        <span class="hljs-comment">//textField.setEchoChar(&#x27;*&#x27;);</span><br><br>        <span class="hljs-comment">//设置大小，可见性等等</span><br>        pack();<br>        setVisible(<span class="hljs-keyword">true</span>);<br>        window<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowClosing</span><span class="hljs-params">(Frame frame)</span> </span>&#123;<br>        frame.addWindowListener(<span class="hljs-keyword">new</span> WindowAdapter() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowClosing</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br>                System.exit(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMonitor2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ActionListener</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> </span>&#123;<br>        TextField testField = (TextField) e.getSource();<span class="hljs-comment">//事件获得的资源返回的是一个对象，强转为文本域</span><br>        System.out.println(testField.getText());<span class="hljs-comment">//获得文本框内容并打印</span><br>        testField.setText(<span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">//设置文本框内容为空</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210511171032.png" alt="image-20210511171032146"></p><p>简易的计算器，组合+内部类回归复习</p><p>OOP原则：组合，大于继承</p><p><strong>组合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">B</span></span>&#123;<br>    <br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">private</span> B b;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习</strong></p><p>加法计算器</p><p>如图</p><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210511171601.png" alt="image-20210511171601617"></p><p>思路：</p><ol><li>根据拿到前两个数值，返回第三个数值</li><li>如何拿到前两个数值</li><li>如何返回第三个数值</li><li>进一步优化代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson02;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.ActionEvent;<br><span class="hljs-keyword">import</span> java.awt.event.ActionListener;<br><span class="hljs-comment">//main函数用于启动或者测试程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCalc</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Calc calc = <span class="hljs-keyword">new</span> Calc();<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//自定义一个计算器类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Calc</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Frame</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Calc</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//3个文本框</span><br>        TextField text1 = <span class="hljs-keyword">new</span> TextField(<span class="hljs-number">20</span>);<br>        TextField text2 = <span class="hljs-keyword">new</span> TextField(<span class="hljs-number">20</span>);<br>        TextField text3 = <span class="hljs-keyword">new</span> TextField(<span class="hljs-number">20</span>);<br>        <span class="hljs-comment">//一个按钮+事件</span><br>        Button button = <span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;=&quot;</span>);<br>        button.addActionListener(<span class="hljs-keyword">new</span> MyMonitor3(text1, text2, text3));<br><br>        <span class="hljs-comment">//一个标签</span><br>        Label label = <span class="hljs-keyword">new</span> Label(<span class="hljs-string">&quot;+&quot;</span>);<br>        <span class="hljs-comment">//Flowlayout布局,</span><br>        setLayout(<span class="hljs-keyword">new</span> FlowLayout());<br>        add(text1);<br>        add(label);<br>        add(text2);<br>        add(button);<br>        add(text3);<br><br>        pack();<br>        setVisible(<span class="hljs-keyword">true</span>);<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//自定义一个监听器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMonitor3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ActionListener</span> </span>&#123;<br>    <span class="hljs-comment">//构造方法拿到这三个值</span><br>    <span class="hljs-keyword">private</span> TextField text1, text2, text3;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyMonitor3</span><span class="hljs-params">(TextField text1, TextField text2, TextField text3)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.text1 = text1;<br>        <span class="hljs-keyword">this</span>.text2 = text2;<br>        <span class="hljs-keyword">this</span>.text3 = text3;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> </span>&#123;<br>        <span class="hljs-comment">//按下按钮事件e，1获取前两个文本框内容，</span><br>        <span class="hljs-keyword">int</span> num1 = Integer.parseInt(text1.getText());<br>        <span class="hljs-keyword">int</span> num2 = Integer.parseInt(text2.getText());<br><br>        <span class="hljs-comment">//2计算返回值到第三个文本框</span><br>        text3.setText(<span class="hljs-string">&quot;&quot;</span> + (num1 + num2));<br><br>        <span class="hljs-comment">//,3清除前两个框</span><br>        text1.setText(<span class="hljs-string">&quot;&quot;</span>);<br>        text2.setText(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>完全面向对象的写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson02;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.ActionEvent;<br><span class="hljs-keyword">import</span> java.awt.event.ActionListener;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCalc2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Calc2().loadCalc();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Calc2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Frame</span> </span>&#123;<br>    TextField text1, text2, text3;<br>    Button button;<br>    Label label;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loadCalc</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//3个文本框</span><br>        text1 = <span class="hljs-keyword">new</span> TextField(<span class="hljs-number">20</span>);<br>        text2 = <span class="hljs-keyword">new</span> TextField(<span class="hljs-number">20</span>);<br>        text3 = <span class="hljs-keyword">new</span> TextField(<span class="hljs-number">20</span>);<br>        <span class="hljs-comment">//一个按钮+事件</span><br>        button = <span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;=&quot;</span>);<br>        button.addActionListener(<span class="hljs-keyword">new</span> MyMonitor4(<span class="hljs-keyword">this</span>));<br>        <span class="hljs-comment">//一个标签</span><br>        label = <span class="hljs-keyword">new</span> Label(<span class="hljs-string">&quot;+&quot;</span>);<br><br><br>        <span class="hljs-comment">//Flowlayout布局,</span><br>        setLayout(<span class="hljs-keyword">new</span> FlowLayout());<br>        add(text1);<br>        add(label);<br>        add(text2);<br>        add(button);<br>        add(text3);<br><br>        pack();<br>        setVisible(<span class="hljs-keyword">true</span>);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMonitor4</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ActionListener</span> </span>&#123;<br>    <span class="hljs-comment">//构造方法拿到这个对象</span><br>    <span class="hljs-keyword">private</span> Calc2 calc2 = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyMonitor4</span><span class="hljs-params">(Calc2 calc2)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.calc2 = calc2;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> </span>&#123;<br>        <span class="hljs-comment">//1获取前两个文本框内容，</span><br>        <span class="hljs-comment">//2计算返回值到第三个文本框</span><br>        <span class="hljs-comment">//3清除前两个框</span><br>        <span class="hljs-keyword">int</span> num1 = Integer.parseInt(calc2.text1.getText());<br>        <span class="hljs-keyword">int</span> num2 = Integer.parseInt(calc2.text2.getText());<br><br>        calc2.text3.setText(<span class="hljs-string">&quot;&quot;</span> + (num1 + num2));<br><br>        calc2.text1.setText(<span class="hljs-string">&quot;&quot;</span>);<br>        calc2.text2.setText(<span class="hljs-string">&quot;&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>内部类写法</p><p>内部类可以直接访问外部类的属性和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson02;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.ActionEvent;<br><span class="hljs-keyword">import</span> java.awt.event.ActionListener;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCalc2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Calc2().loadCalc();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Calc2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Frame</span> </span>&#123;<br>    TextField text1, text2, text3;<br>    Button button;<br>    Label label;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loadCalc</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//3个文本框</span><br>        text1 = <span class="hljs-keyword">new</span> TextField(<span class="hljs-number">20</span>);<br>        text2 = <span class="hljs-keyword">new</span> TextField(<span class="hljs-number">20</span>);<br>        text3 = <span class="hljs-keyword">new</span> TextField(<span class="hljs-number">20</span>);<br>        <span class="hljs-comment">//一个按钮+事件</span><br>        button = <span class="hljs-keyword">new</span> Button(<span class="hljs-string">&quot;=&quot;</span>);<br>        button.addActionListener(<span class="hljs-keyword">new</span> MyMonitor4());<br>        <span class="hljs-comment">//一个标签</span><br>        label = <span class="hljs-keyword">new</span> Label(<span class="hljs-string">&quot;+&quot;</span>);<br><br><br>        <span class="hljs-comment">//Flowlayout布局,</span><br>        setLayout(<span class="hljs-keyword">new</span> FlowLayout());<br>        add(text1);<br>        add(label);<br>        add(text2);<br>        add(button);<br>        add(text3);<br><br>        pack();<br>        setVisible(<span class="hljs-keyword">true</span>);<br><br>    &#125;<br>    <span class="hljs-comment">//内部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMonitor4</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ActionListener</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> </span>&#123;<br>        <span class="hljs-comment">//1获取前两个文本框内容，</span><br>        <span class="hljs-comment">//2计算返回值到第三个文本框</span><br>        <span class="hljs-comment">//3清除前两个框</span><br>        <span class="hljs-keyword">int</span> num1 = Integer.parseInt(calc2.text1.getText());<br>        <span class="hljs-keyword">int</span> num2 = Integer.parseInt(calc2.text2.getText());<br><br>        calc2.text3.setText(<span class="hljs-string">&quot;&quot;</span> + (num1 + num2));<br><br>        calc2.text1.setText(<span class="hljs-string">&quot;&quot;</span>);<br>        calc2.text2.setText(<span class="hljs-string">&quot;&quot;</span>);<br><br>    &#125;<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="画笔"><a href="#画笔" class="headerlink" title="画笔"></a>画笔</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson03;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPaint</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">new</span> Paint().loadFrame();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Paint</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Frame</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loadFrame</span><span class="hljs-params">()</span> </span>&#123;<br>        setBounds(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">400</span>, <span class="hljs-number">400</span>);<br>        setVisible(<span class="hljs-keyword">true</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">paint</span><span class="hljs-params">(Graphics g)</span> </span>&#123;<br>        <span class="hljs-comment">//g.setColor(Color.ORANGE);</span><br>        g.drawOval(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<br>        g.fillOval(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<br>        <span class="hljs-comment">//还原画笔默认颜色</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="鼠标监听"><a href="#鼠标监听" class="headerlink" title="鼠标监听"></a>鼠标监听</h4><p>目的：想要实现鼠标画画</p><p>思路：<img src="C:/TyperaPic/image-20210506113625442.png" alt="image-20210506113625442"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson03;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.MouseAdapter;<br><span class="hljs-keyword">import</span> java.awt.event.MouseEvent;<br><span class="hljs-keyword">import</span> java.awt.event.MouseListener;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">鼠标监听事件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMouseListener</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Myframe(<span class="hljs-string">&quot;画图&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Myframe</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Frame</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> ArrayList points;<br>    <span class="hljs-comment">//画画需要画笔，需要监听鼠标位置，需要用集合存储</span><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Myframe</span><span class="hljs-params">(String title)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(title);<br>        setBounds(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">400</span>, <span class="hljs-number">400</span>);<br>        <span class="hljs-comment">//存鼠标点击的位置</span><br>        points = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        setVisible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">//鼠标监听器针对这个窗口</span><br>        addMouseListener(<span class="hljs-keyword">new</span> MyMouseListener());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">paint</span><span class="hljs-params">(Graphics g)</span> </span>&#123;<br>        <span class="hljs-comment">//画画,监听鼠标的事件</span><br>        Iterator iterator = points.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            Point point = (Point) iterator.next();<br>            g.setColor(Color.BLUE);<br>            g.fillOval(point.x, point.y, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//添加这个点到界面上</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addPoint</span><span class="hljs-params">(Point point)</span> </span>&#123;<br>        points.add(point);<br><br>    &#125;<br><br>    <span class="hljs-comment">//适配器模式</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMouseListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MouseAdapter</span> </span>&#123;<br>        <span class="hljs-comment">//鼠标    按下 弹起 按住不放</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mousePressed</span><span class="hljs-params">(MouseEvent e)</span> </span>&#123;<br><br>            Myframe myframe = (Myframe) e.getSource();<br>            <span class="hljs-comment">//我们点击的时候就会产生一个点</span><br>            <span class="hljs-comment">//这个点就是鼠标点击的点</span><br>            myframe.addPoint(<span class="hljs-keyword">new</span> Point(e.getX(), e.getY()));<br>            <span class="hljs-comment">//每次点击鼠标都要重画一次</span><br>            myframe.repaint();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="窗口监听"><a href="#窗口监听" class="headerlink" title="窗口监听"></a>窗口监听</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson03;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.WindowAdapter;<br><span class="hljs-keyword">import</span> java.awt.event.WindowEvent;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestWindow</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> WindowFrame();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WindowFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Frame</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WindowFrame</span><span class="hljs-params">()</span></span>&#123;<br>        setBackground(Color.BLUE);<br>        setBounds(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">400</span>,<span class="hljs-number">400</span>);<br>        setVisible(<span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-keyword">this</span>.addWindowListener(<br>                <span class="hljs-keyword">new</span> WindowAdapter() &#123;<br>                    <span class="hljs-comment">//关闭窗口</span><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowClosing</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br>                        System.out.println(<span class="hljs-string">&quot;正在关闭&quot;</span>);<br>                        System.exit(<span class="hljs-number">0</span>);<br>                    &#125;<br><br>                    <span class="hljs-comment">//激活窗口</span><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">windowActivated</span><span class="hljs-params">(WindowEvent e)</span> </span>&#123;<br>                        System.out.println(<span class="hljs-string">&quot;已进入当前窗口&quot;</span>);<br>                    &#125;<br><br>                &#125;<br>        );<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="键盘监听"><a href="#键盘监听" class="headerlink" title="键盘监听"></a>键盘监听</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson03;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.KeyAdapter;<br><span class="hljs-keyword">import</span> java.awt.event.KeyEvent;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestKeyListener</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> MyFrame();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFrame</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Frame</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyFrame</span><span class="hljs-params">()</span></span>&#123;<br>        setBounds(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<span class="hljs-number">400</span>,<span class="hljs-number">400</span>);<br>        setBackground(Color.yellow);<br>        setVisible(<span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-keyword">this</span>.addKeyListener(<span class="hljs-keyword">new</span> KeyAdapter() &#123;<br>            <span class="hljs-comment">//键盘按压</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> </span>&#123;<br>                <span class="hljs-comment">//获得按压的键</span><br>                <span class="hljs-keyword">int</span> keyCode = e.getKeyCode();<br>                System.out.println(keyCode);<br>                <span class="hljs-keyword">if</span> (keyCode == KeyEvent.VK_UP) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;UP&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Swing"><a href="#Swing" class="headerlink" title="Swing"></a>Swing</h2><h3 id="窗口、面板"><a href="#窗口、面板" class="headerlink" title="窗口、面板"></a>窗口、面板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson04;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JFrameDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>        JFrame jFrame = <span class="hljs-keyword">new</span> JFrame(<span class="hljs-string">&quot;第一个JFrame窗口&quot;</span>);<br>        jFrame.setBounds(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">400</span>,<span class="hljs-number">400</span>);<br>        jFrame.setVisible(<span class="hljs-keyword">true</span>);<br>        JLabel jLabel = <span class="hljs-keyword">new</span> JLabel(<span class="hljs-string">&quot;我的第一个JFrame窗口&quot;</span>,SwingConstants.CENTER);<span class="hljs-comment">//建一个label放在容器中间</span><br>        jFrame.add(jLabel);<br>        jFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<span class="hljs-comment">//添加窗口关闭，默认隐藏</span><br>        jFrame.getContentPane().setBackground(Color.cyan);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> JFrameDemo01().init();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="弹窗"><a href="#弹窗" class="headerlink" title="弹窗"></a>弹窗</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson04;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.ActionEvent;<br><span class="hljs-keyword">import</span> java.awt.event.ActionListener;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DialogDemo01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JFrame</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DialogDemo01</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.setBounds(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<br>        <span class="hljs-keyword">this</span>.setVisible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br><br>        Container contentPane = <span class="hljs-keyword">this</span>.getContentPane();<br>        contentPane.setLayout(<span class="hljs-keyword">null</span>);<br><br>        JButton jButton = <span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;弹窗&quot;</span>);<br>        jButton.setBounds(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">80</span>, <span class="hljs-number">50</span>);<br><br>        jButton.addActionListener(<span class="hljs-keyword">new</span> ActionListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> </span>&#123;<br>                <span class="hljs-keyword">new</span> MyDialog();<br>            &#125;<br>        &#125;);<br>        contentPane.add(jButton);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> DialogDemo01();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDialog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JDialog</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyDialog</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.setVisible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">this</span>.setBounds(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<br><br>        Container contentPane = <span class="hljs-keyword">this</span>.getContentPane();<br>        <span class="hljs-comment">//contentPane.setLayout(null);</span><br><br>        contentPane.add(<span class="hljs-keyword">new</span> JLabel(<span class="hljs-string">&quot;弹窗警告&quot;</span>));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> JLabel(<span class="hljs-string">&quot;xxx&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="Icon"><a href="#Icon" class="headerlink" title="Icon"></a>Icon</h4><p>如何画一个标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson04;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">图标，继承Frame类，实现Icon接口</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IconDemo01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JFrame</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Icon</span> </span>&#123;<br>    <span class="hljs-comment">//属性：宽高</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> width;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> height;<br><br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">IconDemo01</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">IconDemo01</span><span class="hljs-params">(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.width = width;<br>        <span class="hljs-keyword">this</span>.height = height;<br>    &#125;<br>    <span class="hljs-comment">//初始化方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        setBounds(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">800</span>, <span class="hljs-number">600</span>);<br>        <span class="hljs-comment">//图标放在标签上</span><br>        IconDemo01 iconDemo01 = <span class="hljs-keyword">new</span> IconDemo01(<span class="hljs-number">15</span>,<span class="hljs-number">15</span>);<br>        JLabel jLabel = <span class="hljs-keyword">new</span> JLabel(<span class="hljs-string">&quot;图标&quot;</span>, iconDemo01 , SwingConstants.CENTER);<br>        Container container = getContentPane();<br>        container.add(jLabel);<br><br>        setVisible(<span class="hljs-keyword">true</span>);<br>        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br><br>    &#125;<br><br>    <span class="hljs-comment">//main方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//通过调用new IconDemo01()的init()方法来</span><br>        <span class="hljs-keyword">new</span> IconDemo01().init();<br>    &#125;<br>    <span class="hljs-comment">//重写接口Icon的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">paintIcon</span><span class="hljs-params">(Component c, Graphics g, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>        <span class="hljs-comment">//画图标，画一个圆</span><br>        g.fillOval(x, y, width, height);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getIconWidth</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> width;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getIconHeight</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> height;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="图片标签ImageIcon"><a href="#图片标签ImageIcon" class="headerlink" title="图片标签ImageIcon"></a>图片标签ImageIcon</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson04;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ImageIconDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JFrame</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ImageIconDemo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//获取图片的地址</span><br>        URL url = ImageIconDemo.class.getResource(<span class="hljs-string">&quot;Hush a by little girl.jpg&quot;</span>);<br>        ImageIcon imageIcon = <span class="hljs-keyword">new</span> ImageIcon(url);<br><br>        <span class="hljs-comment">//new JLabel标签</span><br>        JLabel jLabel = <span class="hljs-keyword">new</span> JLabel();<br>        jLabel.setIcon(imageIcon);<br>        jLabel.setHorizontalAlignment(SwingConstants.CENTER);<br><span class="hljs-comment">//把JLabel标签放面板上</span><br>        Container container = getContentPane();<br>        container.add(jLabel);<br><br>        <br>        pack();<br>        setVisible(<span class="hljs-keyword">true</span>);<br>        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> ImageIconDemo();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="面板"><a href="#面板" class="headerlink" title="面板"></a>面板</h3><p>JPanel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson05;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JPanelDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JFrame</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">JPanelDemo</span><span class="hljs-params">()</span>  </span>&#123;<br>        <span class="hljs-comment">//容器</span><br>        Container container = getContentPane();<br>        container.setLayout(<span class="hljs-keyword">new</span> GridLayout(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>));<br>        <span class="hljs-comment">//面板</span><br>        JPanel jPanel1 = <span class="hljs-keyword">new</span> JPanel(<span class="hljs-keyword">new</span> GridLayout(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>));<br>        JPanel jPanel2 = <span class="hljs-keyword">new</span> JPanel(<span class="hljs-keyword">new</span> GridLayout(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br>        JPanel jPanel3 = <span class="hljs-keyword">new</span> JPanel(<span class="hljs-keyword">new</span> GridLayout(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>));<br>        JPanel jPanel4 = <span class="hljs-keyword">new</span> JPanel(<span class="hljs-keyword">new</span> GridLayout(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>));<br>        <span class="hljs-comment">//添加jButton按钮到JPanel面板</span><br>        jPanel1.add(<span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;1&quot;</span>));<br>        jPanel1.add(<span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;1&quot;</span>));<br>        jPanel1.add(<span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;1&quot;</span>));<br>        jPanel2.add(<span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;2&quot;</span>));<br>        jPanel2.add(<span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;2&quot;</span>));<br>        jPanel3.add(<span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;3&quot;</span>));<br>        jPanel3.add(<span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;3&quot;</span>));<br>        jPanel4.add(<span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;4&quot;</span>));<br>        jPanel4.add(<span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;4&quot;</span>));<br>        jPanel4.add(<span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;4&quot;</span>));<br>        jPanel4.add(<span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;4&quot;</span>));<br>        jPanel4.add(<span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;4&quot;</span>));<br>        jPanel4.add(<span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;4&quot;</span>));<br>        <span class="hljs-comment">//添加jPanel面板到容器中</span><br>        container.add(jPanel1);<br>        container.add(jPanel2);<br>        container.add(jPanel3);<br>        container.add(jPanel4);<br><br>        setBounds(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">400</span>, <span class="hljs-number">400</span>);<br>        setVisible(<span class="hljs-keyword">true</span>);<br>        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">new</span> JPanelDemo();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>JScroll面板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson01;<br><br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JScrollDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JFrame</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">JScrollDemo</span><span class="hljs-params">()</span> </span>&#123;<br><br>        Container container = getContentPane();<br>        <span class="hljs-comment">//文本域</span><br>        JTextArea jTextArea = <span class="hljs-keyword">new</span> JTextArea(<span class="hljs-number">20</span>, <span class="hljs-number">50</span>);<br>        jTextArea.setText(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br><br>        JScrollPane jScrollPane = <span class="hljs-keyword">new</span> JScrollPane(jTextArea);<br>        container.add(jScrollPane);<br><br><br>        setBounds(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">400</span>, <span class="hljs-number">400</span>);<br>        setVisible(<span class="hljs-keyword">true</span>);<br>        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> JScrollDemo();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><p>图片按钮</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson05;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JButtonDemo01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JFrame</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">JButtonDemo01</span><span class="hljs-params">()</span> </span>&#123;<br>        Container container = getContentPane();<br><br>        URL resource = JButtonDemo01.class.getResource(<span class="hljs-string">&quot;wechat.jpg&quot;</span>);<br><br>        Icon icon = <span class="hljs-keyword">new</span> ImageIcon(resource);<br><br>        JButton jButton = <span class="hljs-keyword">new</span> JButton();<br>        jButton.setIcon(icon);<br>        jButton.setToolTipText(<span class="hljs-string">&quot;图片按钮&quot;</span>);<br><br>        container.add(jButton);<br><br>        setVisible(<span class="hljs-keyword">true</span>);<br>        setSize(<span class="hljs-number">400</span>,<span class="hljs-number">400</span>);<br>        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> JButtonDemo01();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>单选按钮</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson05;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JButtonDemo02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JFrame</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">JButtonDemo02</span><span class="hljs-params">()</span> </span>&#123;<br>        Container container = getContentPane();<br><br>        <span class="hljs-comment">//URL resource = JButtonDemo01.class.getResource(&quot;wechat.jpg&quot;);</span><br><br>        <span class="hljs-comment">//Icon icon = new ImageIcon(resource);</span><br><br>        JRadioButton jRadioButton1 = <span class="hljs-keyword">new</span> JRadioButton(<span class="hljs-string">&quot;jRB1&quot;</span>);<br>        JRadioButton jRadioButton2 = <span class="hljs-keyword">new</span> JRadioButton(<span class="hljs-string">&quot;jRB2&quot;</span>);<br>        JRadioButton jRadioButton3 = <span class="hljs-keyword">new</span> JRadioButton(<span class="hljs-string">&quot;jRB3&quot;</span>);<br><br>        ButtonGroup buttonGroup = <span class="hljs-keyword">new</span> ButtonGroup();<br>        buttonGroup.add(jRadioButton1);<br>        buttonGroup.add(jRadioButton2);<br>        buttonGroup.add(jRadioButton3);<br><br>        container.add(jRadioButton1,BorderLayout.CENTER);<br>        container.add(jRadioButton2,BorderLayout.NORTH);<br>        container.add(jRadioButton3,BorderLayout.SOUTH);<br><br>        setSize(<span class="hljs-number">400</span>,<span class="hljs-number">400</span>);<br>        setVisible(<span class="hljs-keyword">true</span>);<br>        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> JButtonDemo02();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>复选按钮</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson05;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JButtonDemo03</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JFrame</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">JButtonDemo03</span><span class="hljs-params">()</span> </span>&#123;<br>        Container container = getContentPane();<br><br>        JCheckBox jCheckBox1 = <span class="hljs-keyword">new</span> JCheckBox(<span class="hljs-string">&quot;jCheckBox1&quot;</span>);<br>        JCheckBox jCheckBox2 = <span class="hljs-keyword">new</span> JCheckBox(<span class="hljs-string">&quot;jCheckBox2&quot;</span>);<br>        JCheckBox jCheckBox3 = <span class="hljs-keyword">new</span> JCheckBox(<span class="hljs-string">&quot;jCheckBox3&quot;</span>);<br><br>        container.add(jCheckBox1,BorderLayout.NORTH);<br>        container.add(jCheckBox2,BorderLayout.CENTER);<br>        container.add(jCheckBox3,BorderLayout.SOUTH);<br><br><br>        setSize(<span class="hljs-number">400</span>,<span class="hljs-number">400</span>);<br>        setVisible(<span class="hljs-keyword">true</span>);<br>        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> JButtonDemo03();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>下拉框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson06;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestComboboxDemo01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JFrame</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TestComboboxDemo01</span><span class="hljs-params">()</span> </span>&#123;<br>        Container container = getContentPane();<br><br>        JComboBox jComboBox = <span class="hljs-keyword">new</span> JComboBox();<br><br>        jComboBox.addItem(<span class="hljs-string">&quot;1&quot;</span>);<br>        jComboBox.addItem(<span class="hljs-string">&quot;2&quot;</span>);<br>        jComboBox.addItem(<span class="hljs-string">&quot;3&quot;</span>);<br>        jComboBox.addItem(<span class="hljs-keyword">null</span>);<br><br>        container.add(jComboBox);<br>        setSize(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br>        setVisible(<span class="hljs-keyword">true</span>);<br>        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">new</span> TestComboboxDemo01();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>列表框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson06;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestComboboxDemo02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JFrame</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TestComboboxDemo02</span><span class="hljs-params">()</span> </span>&#123;<br>        Container container = getContentPane();<br>        <span class="hljs-comment">//生成列表内容</span><br>        <span class="hljs-comment">//String[] strings = &#123;1 ,2 , 3&#125;;</span><br><br>        Vector contents = <span class="hljs-keyword">new</span> Vector();<br><br>        JList jList = <span class="hljs-keyword">new</span> JList(contents);<br>        contents.add(<span class="hljs-string">&quot;111&quot;</span>);<br>        contents.add(<span class="hljs-string">&quot;222&quot;</span>);<br>        contents.add(<span class="hljs-string">&quot;333&quot;</span>);<br><br>        container.add(jList);<br><br>        setSize(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br>        setVisible(<span class="hljs-keyword">true</span>);<br>        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">new</span> TestComboboxDemo02();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>应用场景</p><ul><li>选择地区，一般是单个选项</li><li>列表展示信息，一般是动态扩容</li></ul><h3 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h3><p>文本框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson06;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTextDemo01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JFrame</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TestTextDemo01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> HeadlessException </span>&#123;<br>        Container container = getContentPane();<br><br>        JTextField jTextField1 = <span class="hljs-keyword">new</span> JTextField(<span class="hljs-string">&quot;jTextField1&quot;</span>);<br>        JTextField jTextField2 = <span class="hljs-keyword">new</span> JTextField(<span class="hljs-string">&quot;jTextField2&quot;</span>);<br><br>        container.add(jTextField1, BorderLayout.NORTH);<br>        container.add(jTextField2, BorderLayout.SOUTH);<br><br><br>        setSize(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>        setVisible(<span class="hljs-keyword">true</span>);<br>        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> TestTextDemo01();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>密码框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson06;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTextDemo02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JFrame</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TestTextDemo02</span><span class="hljs-params">()</span> </span>&#123;<br>        Container container = getContentPane();<br><br>        JPasswordField jPasswordField = <span class="hljs-keyword">new</span> JPasswordField();<br>        jPasswordField.setEchoChar(<span class="hljs-string">&#x27;*&#x27;</span>);<br><br>        container.add(jPasswordField);<br><br>        setSize(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>        setVisible(<span class="hljs-keyword">true</span>);<br>        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">new</span> TestTextDemo02();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>文本域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.linsip.lesson06;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTextDemo03</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JFrame</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TestTextDemo03</span><span class="hljs-params">()</span> </span>&#123;<br><br>        Container container = getContentPane();<br><br>        JTextArea jTextArea = <span class="hljs-keyword">new</span> JTextArea(<span class="hljs-number">20</span>, <span class="hljs-number">50</span>);<br>        jTextArea.setText(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br><br>        JScrollPane jScrollPane = <span class="hljs-keyword">new</span> JScrollPane(jTextArea);<br>        container.add(jScrollPane);<br><br>        setSize(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>        setVisible(<span class="hljs-keyword">true</span>);<br>        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> TestTextDemo03();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java, GUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE自学笔记</title>
    <link href="/2021/04/30/JavaSE%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/04/30/JavaSE%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaSE自学笔记（本人所看b站视频狂神说Java）"><a href="#JavaSE自学笔记（本人所看b站视频狂神说Java）" class="headerlink" title="JavaSE自学笔记（本人所看b站视频狂神说Java）"></a>JavaSE自学笔记（<a href="https://www.bilibili.com/video/BV12J41137hu">本人所看b站视频狂神说Java</a>）</h1><h2 id="初识Java"><a href="#初识Java" class="headerlink" title="初识Java"></a>初识Java</h2><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p>自建博客</p><p>[Hexo博客的搭建与部署](<a href="https://linsip.cn/2021/04/20/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/">Hexo博客的搭建部署 - Linsip</a>)</p><h3 id="MarkDown语法"><a href="#MarkDown语法" class="headerlink" title="MarkDown语法"></a>MarkDown语法</h3><p>[MarkDown语法笔记](<a href="https://linsip.cn/2021/04/29/Markdown%E8%AF%AD%E6%B3%95/#Markdown%E8%AF%AD%E6%B3%95">Markdown语法 - Linsip</a>)</p><h3 id="常用Dos命令"><a href="#常用Dos命令" class="headerlink" title="常用Dos命令"></a>常用Dos命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">//退回上级目录<br><span class="hljs-built_in">cd</span> ..<br><br>//退回到根目录<br><span class="hljs-built_in">cd</span>\<br><br>//进入某文件夹<br><span class="hljs-built_in">cd</span> 文件夹路径<br><br>//新建文件夹<br>md 文件夹名<br><br>//删除文件夹<br>rd 文件夹名<br><br>//拷贝文件<br>copy 文件路径 目标路径 文件<br><br>//删除文件<br>del 文件路径 文件<br><br>//查看目录下所有文件<br>dir 路径<br><br>//格式化硬盘（别乱用！！！！）<br>format 盘符<br><br>//清理屏幕（clean screen）<br>cls<br><br>//退出<br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h3 id="计算机语言发展史-简史"><a href="#计算机语言发展史-简史" class="headerlink" title="计算机语言发展史(简史)"></a>计算机语言发展史(简史)</h3><p>计算机语言可以分为机器语言、汇编语言、高级语言三类，其对应的计算机语言发展历史的三个阶段</p><p>第一阶段</p><blockquote><p>1946年2月14日，世界上第一台计算机ENAC诞生，使用的是最原始的穿孔卡片。这种卡片上使用的语言是只有专家才能理解的语言，与人类语言差别极大，这种语言就称为机器语言。机器语言是第一代计算机语言。这种语言本质上是计算机能识别的唯一语言，人类很难理解。以后的语言就是在这个的基础上简化而来。虽然后来发展的语言能让人类直接理解但最终送入计算机的还是这种机器语言。</p></blockquote><p>第二阶段</p><blockquote><p>计算机语言发展到第二代，出现了汇编语言。汇编语言用助记符代替了操作码，用地址符号或标号代替地址码。这样就用符号代替了机器语言的二进制码。汇编语言也称为符号语言。比起机器语言，汇编大大进步了。尽管还是复杂，用起来容易出错，但在计算机语言发展史上是机器语言向更高级的语言进化的桥梁</p></blockquote><p>第三阶段</p><blockquote><p>当计算机语言发展到第三代时，就进入了“面向人类”的高级语言。高级语言是一种接近于人们使用习惯的程序设计语言。它允许用英文写计算程序，程序中的符号和算式也与日常用的数学式子差不多。高级语言发展于20世纪50年代中叶到70年代，流行的高级语言已经开始固化在计算机内存里了，比如 basic语言。现在，计算机语言仍然在不断的发展，种类也相当多，比如 FORTRAN语言， COBOL语言，C语言，C++，C#， PASCAO，JAVA等等。</p><p>原文请看：<a href="http://www.mahaixiang.cn/bcyy/2048.html">计算机语言的发展简史-马海祥博客 (mahaixiang.cn)</a></p></blockquote><h3 id="Java的历史（简史）"><a href="#Java的历史（简史）" class="headerlink" title="Java的历史（简史）"></a>Java的历史（简史）</h3><p>1991年4月，James Gosling领导的Green Project计划，致力于开发一种适用于各种电子性消费产品的程序架构，诞生了Java的前身–Oak</p><p>1995年5月23日，Oak被更名为Java，由Sun公司在Sun World上正式发布。第一次提出了“Write once,Run anywhere”的口号</p><p>···</p><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><blockquote><p><a href="https://baike.baidu.com/item/JDK/1011">JDK</a><em>（Java Development Kit）</em>称为Java开发包或Java开发工具，是一个编写Java的Applet小程序和应用程序的程序开发环境。JDK是整个Java的核心，包括了Java运行环境<em>（Java Runtime Environment）</em>，一些Java工具和Java的核心类库<em>（Java API）</em>。</p><p>来源：百度百科</p></blockquote><p>安装JDK：<a href="https://www.oracle.com/java/technologies/javase-downloads.html">JDK官网</a></p><p>推荐下载Java SE 8或者Java SE 11</p><h3 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h3><blockquote><p>Java运行环境（Java Runtime Environment，简称JRE）是一个软件，由太阳微系统所研发，JRE可以让计算机系统运行Java应用程序（Java Application）。</p><p>JRE的内部有一个Java虚拟机（Java Virtual Machine，JVM）以及一些标准的<a href="https://baike.baidu.com/item/%E7%B1%BB%E5%88%AB/693095">类别</a>函数库（Class Library）。</p><p>来源：百度百科</p></blockquote><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><h3 id="第一行代码"><a href="#第一行代码" class="headerlink" title="第一行代码"></a>第一行代码</h3><p>尝试用记事本写下下面这几行代码或者推荐使用<a href="https://notepad-plus-plus.org/downloads/v7.9.2/">Notepad++</a></p><p>并且在命令提示符上编译运行出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="编译型与解释型"><a href="#编译型与解释型" class="headerlink" title="编译型与解释型"></a>编译型与解释型</h3><p><strong>编译型</strong>：简单来说就像是一个翻译，对我们写的的源代码进行翻译，生成计算机能看得懂的可执行代码</p><p><strong>解释型</strong>：一边翻译，一边执行</p><p>Java（解释型+编译型）：java是通过javac.exe编译成.class文件 然后通过jvm加载.class文件，然后调用java.exe执行文件。在此之前你要下载安装JDK并配置环境变量。</p><h3 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h3><p>先了解什么是<strong>IDE</strong></p><blockquote><p>集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。所有具备这一特性的软件或者软件套（组）都可以叫集成开发环境。如微软的Visual Studio系列，Borland的C++ Builder、Delphi系列等。该程序可以独立运行，也可以和其它程序并用。IDE多被用于开发HTML应用软件。例如，许多人在设计网站时使用IDE（如HomeSite、DreamWeaver等），因为很多项任务会自动生成。</p><p>来源：百度百科</p></blockquote><p>IDEA业界公认最好的Java开发工具</p><p>下载：<a href="https://www.jetbrains.com/">IDEA官网</a></p><p>安装：按自己需求安装，或者默认安装</p><p><strong>配置环境变量</strong></p><ol><li>我的电脑–&gt;属性–&gt;高级系统设置–&gt;高级–&gt;环境变量</li><li>在打开的<strong>系统变量</strong>中新建变量，变量名：JAVA_HOME，变量值：JDK安装目录</li><li><strong>系统变量</strong>中Path下添加如下内容%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</li><li>测试是否配置成功cmd</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -version<br></code></pre></td></tr></table></figure><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h4 id="单行注释-Line-comment"><a href="#单行注释-Line-comment" class="headerlink" title="单行注释 Line comment"></a><strong>单行注释</strong> Line comment</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注释 这就是注释的基本格式，到本行结束所有的字符被编译器忽略</span><br><span class="hljs-comment">//public class Demo01 表示定义了一个类 名称为Demo01 修饰符为public，其中类名称必须与文件名称相同</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;<br>    <span class="hljs-comment">//main方法，代表一个程序的起点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//打印输出语句（屏幕显示）</span><br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="多行注释-block-comment"><a href="#多行注释-block-comment" class="headerlink" title="多行注释 block comment"></a><strong>多行注释</strong> block comment</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;China NO.1!&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="文档注释JavaDoc"><a href="#文档注释JavaDoc" class="headerlink" title="文档注释JavaDoc"></a>文档注释JavaDoc</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*<span class="hljs-doctag">@author</span></span><br><span class="hljs-comment">*<span class="hljs-doctag">@version</span></span><br><span class="hljs-comment">*<span class="hljs-doctag">@since</span></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>参数</p><table><thead><tr><th align="center">参数信息</th><th align="center"></th></tr></thead><tbody><tr><td align="center">@author</td><td align="center">作者</td></tr><tr><td align="center">@version</td><td align="center">版本号</td></tr><tr><td align="center">@since</td><td align="center">指明最早使用jdk版本</td></tr><tr><td align="center">@param</td><td align="center">参数名</td></tr><tr><td align="center">@return</td><td align="center">返回值</td></tr><tr><td align="center">@throws</td><td align="center">抛出异常情况</td></tr></tbody></table><p>拓展：如何用IDEA生成自己的api文档？</p><p>Tools——Generate JavaDoc</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h4><p>Java的所有组成部分都需要名字。类名、变量名、方法名都被称为<strong>标识符</strong></p><h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a><strong>命名规则</strong></h4><p>类名：首字母大写的驼峰命名，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>变量名：首字母小写的驼峰命名规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> getNum = <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><p>方法名：首字母小写的驼峰命名规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getMax</span><span class="hljs-params">()</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h4><ul><li><p>所有的标识符都应该以字母<code>A-Z</code>,<code>a-z</code>美元<code>$</code>或者下划线**<code>_</code>**开始</p></li><li><p>标识符<strong>大小写敏感</strong></p></li><li><p>标识符可以用中文但是不建议</p></li><li><p>不得使用Java中的<strong>关键字</strong>作为标识符</p></li></ul><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><h4 id="什么是关键字？"><a href="#什么是关键字？" class="headerlink" title="什么是关键字？"></a><strong>什么是关键字？</strong></h4><p>有特殊含义的，被保留的，不能随意使用的字符</p><p>java中一共有53个关键字（不用记忆）</p><h4 id="Java常用关键字："><a href="#Java常用关键字：" class="headerlink" title="Java常用关键字："></a><strong>Java常用关键字</strong>：</h4><table><thead><tr><th align="center">abstract</th><th align="center">default</th><th align="center">if</th><th align="center">private</th><th align="center">this</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">do</td><td align="center">implements</td><td align="center">protected</td><td align="center">throw</td></tr><tr><td align="center">break</td><td align="center">double</td><td align="center">import</td><td align="center">public</td><td align="center">throws</td></tr><tr><td align="center">byte</td><td align="center">else</td><td align="center">instanceof</td><td align="center">return</td><td align="center">transient</td></tr><tr><td align="center">case</td><td align="center">extends</td><td align="center">int</td><td align="center">short</td><td align="center">try</td></tr><tr><td align="center">catch</td><td align="center">final</td><td align="center">interface</td><td align="center">static</td><td align="center">volatile</td></tr><tr><td align="center">char</td><td align="center">finally</td><td align="center">long</td><td align="center">strictfp</td><td align="center">while</td></tr><tr><td align="center">class</td><td align="center">float</td><td align="center">native</td><td align="center">super</td><td align="center"></td></tr><tr><td align="center"><del>const</del></td><td align="center">for</td><td align="center">new</td><td align="center">switch</td><td align="center"></td></tr><tr><td align="center">continue</td><td align="center"><del>goto</del></td><td align="center">package</td><td align="center">synchronized</td><td align="center"></td></tr></tbody></table><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h4><ul><li><p>关键字都是是完全小写的字母</p></li><li><p>Java中的true和false不是关键字</p></li><li><p>Java中有两个特殊关键字（Java保留字，Java不用，你也不能用）goto，const。</p></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>java是一种<strong>强类型语言</strong>，即java的变量的使用要严格符合规定，先定义再使用</p><p><strong>强类型语言</strong>：所有变量的定义必须严格符合规定，必须先定义后使用。<strong>安全性高，速度慢</strong></p><p><strong>弱类型语言</strong>：</p><p>JS VB</p><p>Java的数据类型分为<strong>基本数据类型</strong>和<strong>引用类型</strong></p><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a><strong>基本数据类型</strong></h4><p><strong>8种基本数据类型primitive type</strong></p><p><strong>整数类型</strong></p><table><thead><tr><th align="center">类型</th><th align="center">占位</th><th align="center">最值</th><th align="center">注</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">8bit</td><td align="center">0x7f~0x80 (127)</td><td align="center"></td></tr><tr><td align="center">short</td><td align="center">16bit</td><td align="center">0x7fff~0x8000 (32767)</td><td align="center"></td></tr><tr><td align="center">int</td><td align="center">32bit</td><td align="center">0x7fffffff~0x80000000 (21亿)</td><td align="center"></td></tr><tr><td align="center">long</td><td align="center">64bit</td><td align="center">…</td><td align="center">字面量需要使用L后缀</td></tr></tbody></table><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span></span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>       <span class="hljs-comment">//八大基本数据类型</span><br>       <br>       <span class="hljs-comment">//整数类型</span><br>       <span class="hljs-keyword">int</span> num1 = <span class="hljs-number">10</span>;<span class="hljs-comment">//最常用</span><br>       <span class="hljs-keyword">byte</span> num2 = <span class="hljs-number">20</span>;<br>       <span class="hljs-keyword">short</span> num3 = <span class="hljs-number">30</span>;<br>       <span class="hljs-keyword">long</span> num4 = <span class="hljs-number">40L</span>;<span class="hljs-comment">//long类型要在数字后加一个L</span><br>       <br>        <span class="hljs-comment">//浮点数</span><br><span class="hljs-keyword">float</span> num5 = <span class="hljs-number">10.1F</span>;<span class="hljs-comment">//float类型要在数字后面加F</span><br>       <span class="hljs-keyword">double</span> num6 = <span class="hljs-number">3.14</span>;<br>       <br>       <span class="hljs-comment">//字符</span><br>        <span class="hljs-keyword">char</span> name = <span class="hljs-string">&#x27;a&#x27;</span>;<br>       <br>       <span class="hljs-comment">//字符串，String不是关键字，是一个类</span><br>       <span class="hljs-comment">//String name = &quot;马林&quot;;</span><br>       <br>       <span class="hljs-comment">//布尔值</span><br>       <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br>   &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>浮点类型</strong></p><p>float（浮点型）:32bit</p><p>double（双精度）:64bit</p><table><thead><tr><th>类型</th><th align="center">占位</th><th align="center">最值</th><th align="center">注</th></tr></thead><tbody><tr><td>float</td><td align="center">32</td><td align="center">(-2^31)~(2^31-1)</td><td align="center">float类型精度过低，很少使用（一般都用double），字面量后缀F</td></tr><tr><td>double</td><td align="center">64</td><td align="center"></td><td align="center">浮点数的字面量默认为double，字面量后缀D</td></tr></tbody></table><p><strong>字符类型</strong></p><p>char（字节型）:16bit</p><table><thead><tr><th align="center">类型</th><th align="center">占位</th><th align="center">取值</th><th align="center">注</th></tr></thead><tbody><tr><td align="center">char</td><td align="center">16</td><td align="center">0~2^16-1</td><td align="center">char是一个2进制数（16位无符号整数），这个数值是一个unicode编码</td></tr></tbody></table><p>编码拓展</p><p>某个数除了表示一个数之外，还可以表示为一个字符</p><p>Unicode编码是全球范围内的编码方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datatype;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">编码拓展</span><br><span class="hljs-comment">Unicode编码</span><br><span class="hljs-comment">65--A</span><br><span class="hljs-comment">97--a</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span> c = <span class="hljs-number">65</span>;<br>        System.out.println(c);<span class="hljs-comment">//A</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>特殊字符用转义字符表示</p><table><thead><tr><th align="center">转义字符</th><th align="center">代表的意思</th></tr></thead><tbody><tr><td align="center">\n</td><td align="center">回车</td></tr><tr><td align="center">\t</td><td align="center">制表</td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">···</td><td align="center"></td></tr></tbody></table><p><strong>布尔类型</strong></p><p>boolean类型：用于表达真假。常用于判断语句。</p><table><thead><tr><th align="center">类型</th><th align="center">占位</th><th align="center">取值</th><th align="center">注</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">1</td><td align="center">false true</td><td align="center">默认值为false</td></tr></tbody></table><h4 id="引用类型reference-type"><a href="#引用类型reference-type" class="headerlink" title="引用类型reference type"></a><strong>引用类型</strong>reference type</h4><p>类：</p><p>接口：</p><p>数组：</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>Java是强类型语言，进行有些运算的时候需要用到类型转换。</p><p>不同类型的数据先转换为同一类型的数据，然后进行计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>System.out.println((<span class="hljs-keyword">int</span>)c+i);<span class="hljs-comment">//98</span><br></code></pre></td></tr></table></figure><h4 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h4><p>基本数据类型转换分为<strong>强制类型转换</strong>和<strong>自动类型转换</strong>（隐式类型转换）</p><p><strong>自动类型转换方向</strong></p><p>char–&gt;int–&gt;long–&gt;float–&gt;double</p><p>byte–&gt;short–&gt;int–&gt;long–&gt;float–&gt;double</p><p><strong>强制类型转换方向</strong></p><p>char&lt;–int&lt;–long&lt;–float&lt;–double</p><p>byte&lt;–short&lt;–int&lt;–long&lt;–float&lt;–double</p><p>强制类型转换会出现<strong>内存溢出</strong>的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">128</span>;<br><span class="hljs-keyword">byte</span> b = (<span class="hljs-keyword">int</span>)i;<span class="hljs-comment">//内存溢出</span><br>System.out.println(b);<span class="hljs-comment">//-128</span><br></code></pre></td></tr></table></figure><p>也可能有<strong>精度</strong>问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">double</span> d1 = <span class="hljs-number">20.7</span>;<br><span class="hljs-keyword">int</span> i = (<span class="hljs-keyword">int</span>)d1;<br>System.out.println(i);<span class="hljs-comment">//20</span><br></code></pre></td></tr></table></figure><p>操作比较大的数的时候注意溢出问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span><br>    public static void main(String[] args)&#123;<br>    <span class="hljs-keyword">int</span> money = <span class="hljs-number">10_0000_0000</span>;<span class="hljs-comment">//JDK7的新特性，数字之间加_用于区分数字，计算不受影响</span><br>    <span class="hljs-keyword">int</span> year = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">int</span> total = money*year;<span class="hljs-comment">//计算的时候溢出了</span><br>    <span class="hljs-keyword">long</span> total2 = money*year;<span class="hljs-comment">//默认类型int，右边在计算之前就出现问题</span><br>    System.out.println(total);<span class="hljs-comment">//-1474836480</span><br>    System.out.println(total2);<span class="hljs-comment">//-1474836480</span><br>    <span class="hljs-comment">//解决方法：在计算之前先转换数据类型</span><br>    <span class="hljs-keyword">long</span> total3 = money*(<span class="hljs-keyword">long</span>)year;<br>&#125;<br></code></pre></td></tr></table></figure><p>自动类型转换 低–高，不会存在内存溢出的问题。</p><p><strong>注意点</strong></p><ul><li>不能对布尔类型进行转换</li><li>不能将变量类型转换为不相干的类型</li><li>把高容量数据转换为低容量数据 ，须强制转换</li><li>转换的时候会有<strong>内存溢出</strong>或者<strong>精度</strong>问题的情况</li></ul><h4 id="引用类型转换"><a href="#引用类型转换" class="headerlink" title="引用类型转换"></a>引用类型转换</h4><p>向下转型：小类型转大类型</p><p>向上转型：大类型转小类型</p><p>instanceof：检查引用对象的类型</p><h3 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h4><p>变量就是可以变化的量</p><p>Java变量是程序的最基本的存储单元，其要素包括<strong>变量名</strong>、<strong>变量类型</strong>和<strong>作用域</strong>。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell">数据类型 变量名 = 值;可以用逗号隔开用于声明多个同类型变量。<br><span class="hljs-class"><span class="hljs-keyword">type</span> varName [=value] [&#123;,<span class="hljs-title">varName</span>[=<span class="hljs-title">value</span>]&#125;];</span><br></code></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li>每个变量都有其类型，可以是基本类型，也可以是引用类型。</li><li>变量名必须为合法的标识符。</li><li>变量的声明是一条完整的语句，因此每个声明都必须以分号结束。</li></ul><p>变量的作用域</p><ul><li>类变量</li><li>实例变量</li><li>局部变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Variable</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> allClicks = <span class="hljs-number">0</span>;<span class="hljs-comment">//类变量 加了static的变量 从属于类，随着类出现和消失</span><br>    String str = <span class="hljs-string">&quot;hello world!&quot;</span>;<span class="hljs-comment">//实例变量:从属于对象，在类的里面，方法的外面，如果不进行初始化，则会变为该数据类型的默认值 0 0.0 u0000 false null（除了基本类型其他的都是null）</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<span class="hljs-comment">//局部变量</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-comment">//类变量 static</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> salary = <span class="hljs-number">2500</span>;<br>    <span class="hljs-comment">//属性：变量，类里面除了方法还可以定义一些属性</span><br>    <span class="hljs-comment">//实例变量，从属于对象</span><br>    String name;<br>    <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-comment">//main方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main[String[] args]&#123;<br>        <br>        <span class="hljs-comment">//局部变量；必须声明和初始化值</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;<br>        System.out.println(i);<br>        <br>        <span class="hljs-comment">//变量类型 变量名 = new Demo();</span><br>        Demo demo = <span class="hljs-keyword">new</span> Demo();<br>        System.out.println(demo.name);<br>        System.out.println(demo.age);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(i);<br>    &#125;<br>&#125;<br>    <br></code></pre></td></tr></table></figure><p>变量的命名规范</p><p>所有的变量、方法、类名：<strong>见名知意</strong></p><p>类成员变量：首字母小写和驼峰原则：monthSalary</p><p>常量：大写字母和下划线    MAX_VALUE</p><p>类名：首字母大写和驼峰原则    Demo</p><p>方法名：首字母小写和驼峰原则    run()    getMax()</p><p>常量：初始化后不能改变的值</p><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a><strong>常量</strong></h4><p>可以理解为一种特殊的变量，他的值被设定后，<strong>在程序运行期间不会改变</strong>。</p><p>常量名一般用大写字母表示</p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs monkey"><span class="hljs-keyword">final</span> 常量名 = 常量值；<br><span class="hljs-keyword">final</span> <span class="hljs-built_in">PI</span> = <span class="hljs-number">3.14</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>   <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> PI = <span class="hljs-number">3.14</span>;<span class="hljs-comment">//修饰符不分前后</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main [String[] args]&#123;<br>        System.out.println(PI);<br>    &#125;<br>&#125;<br>    <br></code></pre></td></tr></table></figure><hr><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span></span>&#123;<br>    <span class="hljs-comment">//算数运算符</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main[String[] args]&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">int</span> c = <span class="hljs-number">30</span>;<br>    <span class="hljs-keyword">int</span> d = <span class="hljs-number">40</span>;<br>        <span class="hljs-keyword">int</span> e = <span class="hljs-number">21</span>;<br>    System.out.println(a+b);<span class="hljs-comment">//30</span><br>    System.out.println(a-b);<span class="hljs-comment">//-10</span><br>    System.out.println(a*b);<span class="hljs-comment">//200</span><br>    System.out.println(a/(<span class="hljs-keyword">double</span>)b);<span class="hljs-comment">//0.5</span><br>        System.out.println(e%a);<span class="hljs-comment">//%取余 也叫模运算 即21/10=2...121%10=1    </span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li>整数除法运算，会出现下溢出现象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">3</span>;<br>        System.out.println(a/b);<span class="hljs-comment">//1  下溢出，余数1被舍弃</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>低于int类型（short）（byte）的运算都按int类型运算</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main[String[] args]&#123;<br>    <span class="hljs-keyword">long</span> a = <span class="hljs-number">111222333222111L</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">123</span>;<br>        <span class="hljs-keyword">short</span> c = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">byte</span> d = <span class="hljs-number">8</span>;<br>        <span class="hljs-comment">//</span><br>        System.out.println(a+b+c+d);<span class="hljs-comment">//Long</span><br>        System.out.println(b+c+d);<span class="hljs-comment">//Int</span><br>        System.out.println(C+D);<span class="hljs-comment">//Int</span><br>            <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>模运算</strong></p><p>（%）表示计算除法的余数</p><p>​    0对其他数的余数为0</p><p>​    负数的余数是负数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datatype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i1 = <span class="hljs-number">11</span>;<br>        <span class="hljs-keyword">int</span> i2 = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> i3 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> i4 = -<span class="hljs-number">11</span>;<br>        System.out.println(i1 % i2);<span class="hljs-comment">//1</span><br>        System.out.println(i3 % i2);<span class="hljs-comment">//0</span><br>        System.out.println(i4 % i2);<span class="hljs-comment">//-1</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>自增自减</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">//++ -- 自增 自减</span><br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">int</span> b = a++;<span class="hljs-comment">//表示a先赋值给b，然后再自增1</span><br>System.out.println(a);<span class="hljs-comment">//4</span><br>        <span class="hljs-keyword">int</span> c = ++a;<span class="hljs-comment">//表示a先自增1，然后赋值给c</span><br>System.out.println(a);<span class="hljs-comment">//5</span><br>        System.out.println(b);<span class="hljs-comment">//3</span><br>        System.out.println(c);<span class="hljs-comment">//5</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>=赋值运算符表示把等号右边的赋值给左边</p><p>==才是现实意义上的等于，属于关系运算符</p><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>    <span class="hljs-comment">//关系运算符，返回的是布尔值 false true</span><br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>        System.out.println(a&gt;b);<br>        System.out.println(a&lt;b);<br>        System.out.println(a==b);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//逻辑运算符</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-function">pubic <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">//&amp;&amp;与 ||或 !非</span><br>        <span class="hljs-keyword">boolean</span> a = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">boolean</span> b = <span class="hljs-keyword">false</span>;<br>        <br>        System.out.println(<span class="hljs-string">&quot;a&amp;&amp;b:&quot;</span>+(a&amp;&amp;b));<br>        System.out.println(<span class="hljs-string">&quot;a||b&quot;</span>+(a||b));<br>        System.out.println(<span class="hljs-string">&quot;!(a&amp;&amp;b)&quot;</span>+!(a&amp;&amp;b));<br>        <br>        <span class="hljs-comment">//短路运算,进行逻辑与运算时会发生短路运算</span><br>        <span class="hljs-keyword">int</span> c = <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">boolean</span> d = (c&lt;<span class="hljs-number">4</span>)&amp;&amp;(c++&lt;<span class="hljs-number">4</span>);<span class="hljs-comment">//这里发生了短路运算，与运算下，c&lt;4为false，计算机就不会计算&amp;&amp;后面的c++&lt;4,所以c还是5，不会自增</span><br>        System.out.println(c);<span class="hljs-comment">//5</span><br>        System.out.println(d);<span class="hljs-comment">//false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//位运算</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    A = 0011 1100</span><br><span class="hljs-comment">    B = 0000 1101</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    A&amp;B = 0000 1100 如果A与B两个二进制数对应位上都为1，结果才为1，否则就是0</span><br><span class="hljs-comment">    A|B = 0011 1101 如果A与B两个二进制数对应位上都为0，结果才为0，否则就是1</span><br><span class="hljs-comment">    A^B = 0011 0001 如果A与B两个二进制数相对应位上相同就为0，不同就为1</span><br><span class="hljs-comment">    ~B = 1111 0010 取反</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    2*8怎么运算最快？2*2*2*2</span><br><span class="hljs-comment">    0000 00000</span><br><span class="hljs-comment">    0000 00011</span><br><span class="hljs-comment">    0000 00102</span><br><span class="hljs-comment">    0000 00113</span><br><span class="hljs-comment">    0000 01004</span><br><span class="hljs-comment">    ...</span><br><span class="hljs-comment">    0001 000016</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    &lt;&lt;*2</span><br><span class="hljs-comment">    &gt;&gt;/2</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>       <span class="hljs-comment">//2*8怎么运算最快？2*2*2*2</span><br>        System.out.println(<span class="hljs-number">2</span>&lt;&lt;<span class="hljs-number">3</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>拓展</strong></p><p>如何进行幂运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">//幂运算 很多运算需要用到一些工具类 </span><br>        <span class="hljs-keyword">double</span> pow = Math.pow(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//2^3 Math工具类位于Java.lang包下，其方法都是静态方法，直接类名.方法名就可以使用</span><br>        System.out.println(pow);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>条件运算符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//三元运算符</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main&#123;<br>        <span class="hljs-comment">//x?y:z</span><br>        <span class="hljs-comment">//如果x为true，结果就为y，否则就为z</span><br>        <br>        <span class="hljs-keyword">int</span> score = <span class="hljs-number">80</span>;<br>        String type = score&lt;<span class="hljs-number">60</span>?<span class="hljs-string">&quot;不及格&quot;</span>:<span class="hljs-string">&quot;及格&quot;</span>;<br>        System.out.println(type);<span class="hljs-comment">//及格</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>拓展赋值运算符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//拓展运算符</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>        <br>        a+=b;<br>        a-=b;<br>        a*=b;<br>        a/=b;<br>        <br>        <span class="hljs-comment">//字符串连接符++遇到String类型的会变为字符串连接符</span><br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>+a+b);<span class="hljs-comment">//1020</span><br>        System.out.println(a+b+<span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">//30</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main[String[] args]&#123;<br>    <span class="hljs-keyword">long</span> a = <span class="hljs-number">111222333222111L</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">123</span>;<br>        <span class="hljs-keyword">short</span> c = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">byte</span> d = <span class="hljs-number">8</span>;<br>        <span class="hljs-comment">//</span><br>        System.out.println(a+b+c+d);<span class="hljs-comment">//Long</span><br>        System.out.println(b+c+d);<span class="hljs-comment">//Int</span><br>        System.out.println(C+D);<span class="hljs-comment">//Int</span><br>            <br>&#125;<br>&#125;<br>   <br></code></pre></td></tr></table></figure><h3 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h3><p>为了更好的组织类，java提供了包机制，用于区别类名的命名空间</p><p>包语句的语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pkg1[.pkg2[.pkg3...]];<br></code></pre></td></tr></table></figure><p>一般利用公司域名的倒置作为包名比如<a href="http://www.baidu.com&gt;com.baidu.www/">www.baidu.com&gt;com.baidu.www</a></p><p>为了使用某一个包的成员，我们需要在java程序中导入该包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> package1[.package2...].(classname|*);<br></code></pre></td></tr></table></figure><h3 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h3><p>用idea生成api帮助文档</p><p>Tools–&gt;Generate JavaDoc</p><p><img src="C:/Users/MaLin/myblog/source/_posts/R8i5Fwlz4HkUhPu.png" alt="generateJavaDoc"></p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h3><p>Scanner类的hasNext()与hasNextLine()判断是否还有输入的数据</p><p>通过Scanner类的next()与nextLine()方法获取输入的字符串</p><p>示例一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-comment">//导包语句，Idea自动生成</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScannerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">//创建一个Scanner对象</span><br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-comment">//判断用户有没有输入字符串</span><br>        <span class="hljs-keyword">if</span> (scanner.hasNext())&#123;<br>            <span class="hljs-comment">//</span><br>            String str = scanner.next();<br>            System.out.println(<span class="hljs-string">&quot;输入的内容为：&quot;</span>+str);<br>        &#125;<br>        <span class="hljs-comment">//关闭scanner，凡是属于IO流的类不关闭就会一直占用资源</span><br>        scanner.close();<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>示例二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScannerDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建一个Scanner对象</span><br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-comment">//提示用户输入</span><br>        System.out.println(<span class="hljs-string">&quot;输入名字&quot;</span>);<br>        <span class="hljs-comment">//判断用户是否输入</span><br>        <span class="hljs-keyword">if</span> (scanner.hasNextLine()) &#123;<br>            <span class="hljs-comment">//String类用于接收</span><br>            String name = scanner.nextLine();<br>            <span class="hljs-comment">//打印出名字</span><br>            System.out.println(name);<br>        &#125;<br>        <span class="hljs-comment">//关闭scanner，减少资源占用</span><br>        scanner.close();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>next():</strong></p><ul><li>一定读取到有效字符后才结束输入</li><li>有效字符前的空格，会被方法忽略</li><li>有效字符后面的空格，会被方法当为结束符</li></ul><p>next()方法不能得到带有空格的字符串</p><p><strong>nextLine():</strong></p><ul><li>以回车作为结束符</li><li>可以获得空格</li></ul><p>练习题1：输入多个数字，并求出总和与平均数，通过非数字的输入来结束输出并输出执行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScannerDemo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//定义两个变量用于后面的求和与计算平均数</span><br>        <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//new一个Scannner类的对象</span><br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-comment">//用循环来判断是否输入的是数字，以及求和，累计数字个数</span><br>        <span class="hljs-keyword">while</span> (scanner.hasNextDouble()) &#123;<br>            sum += scanner.nextDouble();<br>            num++;<br>        &#125;<br>        <span class="hljs-comment">//输出结果</span><br>        System.out.println(<span class="hljs-string">&quot;输入数字的个数为&quot;</span> + num);<br>        System.out.println(<span class="hljs-string">&quot;输入数字的和为：&quot;</span> + sum);<br>        System.out.println(<span class="hljs-string">&quot;输入数字的平均数为&quot;</span> + (sum / num));<br>        <span class="hljs-comment">//关闭scanner</span><br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p>顺序结构是Java的基本结构，除非特别指明，否则就按从上到下，从左到右，一句一句的执行。</p><p>顺序结构是最基本的算法结构，是任何算法都离不开的一种基本算法结构。</p><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><p><strong>if - else语句</strong></p><p>基本语法：</p><p>if单选择结构语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (布尔表达式) &#123;<br>语句<br>&#125;<br></code></pre></td></tr></table></figure><p>if双选择结构语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式)&#123;<br>语句<span class="hljs-number">1</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>语句<span class="hljs-number">2</span><br>&#125;<br></code></pre></td></tr></table></figure><p>if多选择结构语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">1</span>)&#123;<br>语句<span class="hljs-number">1</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">2</span>)&#123;<br>语句<span class="hljs-number">2</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">3</span>)&#123;<br>语句<span class="hljs-number">3</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>语句<span class="hljs-number">4</span><br>&#125;<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IfDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;你好，世界！&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>练习1:输入成绩，判断成绩，60以上成绩合格，60以下成绩不合格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IfDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入成绩：&quot;</span>);<br>        <span class="hljs-keyword">if</span> (scanner.hasNextInt()) &#123;<br>            <span class="hljs-keyword">int</span> i = scanner.nextInt();<br>            <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">60</span> &amp;&amp; i &lt;= <span class="hljs-number">100</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;成绩合格&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; i &lt; <span class="hljs-number">60</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;成绩不合格&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;非法成绩！！！&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入整数！！！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>switch - case语句</strong></p><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> () &#123;<br>    <span class="hljs-keyword">case</span> 字面量:<br>        代码;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span> 字面量:<br>        代码;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意点</p><ul><li>switch不能处理long类型，Java se7开始 switch支持String类型</li><li>case后面必须为数字或者字面量，不能写语句</li><li>default表示没有满足case条件的其他一切情况</li><li>不要忘记写break，不写会出现”case穿透“，后面的case、default都会执行</li></ul><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p><strong>while循环</strong></p><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (布尔表达式) &#123;<br>    循环体<br>&#125;<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WhileDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//输出1~100</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i&lt;<span class="hljs-number">100</span>)&#123;<br>            i++;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意点</p><ul><li>循环体内一定要有能让布尔表达式为false的情况，否则就是死循环，会一直执行循环体</li></ul><p>死循环</p><p>当我们有特殊需求需要使用死循环的时候</p><p>例如：输出0~无限大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WhileDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            i++;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>尽量不要这么写，cpu会卡死！！！</p><p><strong>do - while循环</strong></p><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-comment">//循环体语句</span><br>&#125; <span class="hljs-keyword">while</span> (布尔表达式);<br></code></pre></td></tr></table></figure><p>相对于while循环，do-while循环会至少执行一次循环体</p><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoWhileDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">while</span> (a &lt; <span class="hljs-number">0</span>) &#123;<br>            a++;<br>            System.out.println(a);<br>        &#125;<br>        <span class="hljs-keyword">do</span> &#123;<br>            a++;<br>            System.out.println(a);<span class="hljs-comment">//这里会输出1</span><br>        &#125; <span class="hljs-keyword">while</span> (a &lt; <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>for循环</strong></p><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (初始化语句;布尔表达式;更新) &#123;<br>    <span class="hljs-comment">//循环体语句</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意点：</p><ul><li>先执行初始化语句，初始化语句可以初始化一个或多个循环控制变量，也可以为空</li><li>然后执行布尔表达式，布尔表达式为true则执行一次循环体语句，之后是更新语句，布尔表达式，循环体语句……直到布尔表达式为false就执行终止循环</li></ul><p>练习题1：计算0~100之间奇数与偶数的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">```<br><br><br><br>练习题<span class="hljs-number">2</span>：用<span class="hljs-keyword">for</span>循环输出<span class="hljs-number">1</span>~<span class="hljs-number">1000</span>之间能被<span class="hljs-number">5</span>整除的数，每行三个<br><br>```java<br></code></pre></td></tr></table></figure><p><strong>练习题3：打印九九乘法表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">```<br><br>**增强<span class="hljs-keyword">for</span>循环**<br><br>Java5引入了一种主要用于数组或者集合的增强型<span class="hljs-keyword">for</span>循环<br><br>语法格式<br><br>```java<br><span class="hljs-keyword">for</span> (声明语句:表达式) &#123;<br>    <span class="hljs-comment">//代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意点</p><ul><li>声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环体语句块，其值与此时数组元素的值相等。</li><li>表达式：表达式是要访问的数组名或者是返回值为数组的方法。</li></ul><h3 id="break-amp-continue"><a href="#break-amp-continue" class="headerlink" title="break &amp; continue"></a>break &amp; continue</h3><p>break在任何循环体主体部分，均可用break控制循环的流程。break<strong>用于强行退出循环</strong>，不执行循环中的剩余语句。</p><p>continue语句实在循环体语句中，<strong>用于阻止某次循环</strong>，即跳过循环体中未执行的语句，接着进行下一次是否执行循环的判定。</p><p>拓展：</p><p><strong>goto关键字</strong>很早就在程序设计语言中出现。尽管goto仍是Java的一个保留字，但并未在语言中得到正式的使用；Java没有goto。然而在break和continue这两个关键字上，可以看到goto的影子————带标签的break和continue</p><p>标签是指后面跟一个冒号的标识符例如：label</p><p>对于Java来说，唯一用到标签的地方是在循环语句之前。在循环语句之前设置标签的唯一理由是：我们希望在其中嵌套另一个循环，因为break和continue关键字只会终止当前循环，但是如果和标签一起使用，他们就会中断到存在标签的地方</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="urn语句"><a href="#urn语句" class="headerlink" title="urn语句"></a>urn语句</h3><p><strong>局部变量</strong></p><p>方法的参数的参数定义，是临时变量（空壳，相当于声明变量而没有赋值）</p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MethodDemo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>    <span class="hljs-comment">//这里的sum()方法中的1，2就是实参</span><br>        <span class="hljs-keyword">int</span> a = sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>        System.out.println(a);<br>&#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<span class="hljs-comment">//这里的int a，int b就是形参</span><br>        <span class="hljs-keyword">return</span> a+b;<br>    &#125;<br>&#125;<br>    <br></code></pre></td></tr></table></figure><h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>重载就是在一个类中，有<strong>相同的函数名称</strong>，但是<strong>形参不同</strong>的函数。</p><p>方法的重载必须满足下列规则：</p><p>​    方法名称必须<strong>相同</strong></p><p>​    参数列表必须<strong>不同</strong></p><p>​    返回值类型可以相同也可以不同，仅仅返回值类型的不同不足以构成方法的重载。</p><p>实现理论：</p><p>​    方法名称相同时，编译器会根据调用方法的参数个数、参数类型去逐个匹配，以选择对应的方法，如果匹配失败则编译器报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">double</span> max = max(<span class="hljs-number">10.1</span>,<span class="hljs-number">10.0</span>);<br>        System.out.println(max);<br>    &#125;<br>    <br>    <span class="hljs-comment">//比大小</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1,<span class="hljs-keyword">int</span> num2)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">if</span>(num1==num2)&#123;<br>            System.out.println(<span class="hljs-string">&quot;num1==num2&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//这里的return用于终止该方法。</span><br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (num1&gt;num2)&#123;<br>            result = num1;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            result = num2;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">double</span> num1,<span class="hljs-keyword">double</span> num2)</span></span>&#123;<br>        <span class="hljs-keyword">double</span> result = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">if</span>(num1==num2)&#123;<br>            System.out.println(<span class="hljs-string">&quot;num1==num2&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//这里的return用于终止该方法。</span><br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (num1&gt;num2)&#123;<br>            result = num1;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            result = num2;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h3><p>有时候你希望运行一个程序时再给它传递消息，这要靠传递命令行参数给main()函数实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommandLine</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;args.length;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;args[&quot;</span>+i+<span class="hljs-string">&quot;]&quot;</span>+args[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a>可变长参数</h3><p>JDK1.5开始，Java支持传递同类型的可变参数给一个方法。</p><p>在方法声明中，在指定的参数类型后加一个省略号(…)</p><p>一个方法只能指定一个可变参数，它必须是方法的最后一个参数。任何普通参数必须在它之前声明。</p><p><strong>可变参数的本质是一个数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printMax</span><span class="hljs-params">(<span class="hljs-keyword">double</span>...numbers)</span></span>&#123;<br><span class="hljs-keyword">if</span>(numbers.length == <span class="hljs-number">0</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;No argument passed!&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">double</span> result = numbers[<span class="hljs-number">0</span>];<br>    <br>    <span class="hljs-comment">//</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>; i&lt;numbers.length;i++)&#123;<br>        <span class="hljs-keyword">if</span> (numbers[i]&gt;result)&#123;<br>            result =numbers[i];<br>        &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;The max value is &quot;</span>+result);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>A方法调用B方法</p><p>递归就是：A方法调用A方法</p><p>利用递归可以用简单的程序来解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需要少量的程序就可描述出解题过程中所需要的多次重复计算，大大减小了程序的代码量。递归的功能在于利用有限的语句来定义对象的无限集合。</p><p>递归结构包括两个部分：</p><p>​    递归头：什么时候不调用自身方法。如果没有头将陷入死循环。</p><p>​    递归体：什么时候需要调用自身方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-comment">//递归</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>        System.out.println(f(<span class="hljs-number">5</span>));<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> n*f(n-<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><p>数组是拥有相同数据类型数据的有序集合</p><p>其中，每个数据都称为数组的元素，每一个数组元素可以通过下表访问他们。（下标从0开始）</p><p><strong>声明数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">arrayType[] arrayRefVar;<span class="hljs-comment">//首选写法</span><br>arrayType arrayRefVar[];<span class="hljs-comment">//也是数组的声明，但是不建议这样写（c和c++的数组是这样写的）</span><br></code></pre></td></tr></table></figure><p><strong>分配空间</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">arrayRefVar = <span class="hljs-keyword">new</span> arrayType[arraySize];<br></code></pre></td></tr></table></figure><p>声明数组和分配空间可以合并一句来写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">arrayType[] arrayRefVar = <span class="hljs-keyword">new</span> arrayType[arraySize]; <br></code></pre></td></tr></table></figure><p><strong>赋值</strong></p><p>数组是通过索引访问的，索引从0开始；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">arrayRefVar[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>arrayRefVar[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>...<br></code></pre></td></tr></table></figure><p>没有赋值的数据元素有默认值，默认值和数组类型有关</p><p><strong>处理数据</strong></p><p>获取数组长度arrays.length</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">arrayRefVar.length<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo01</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> viod <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">//数组的声明</span><br>        <span class="hljs-keyword">int</span>[] array;<br>        <span class="hljs-comment">//分配数组空间</span><br>        array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>];<br>        <span class="hljs-comment">//分配数值，数组下标从0开始</span><br>        array[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        array[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>        array[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>;<br>        array[<span class="hljs-number">3</span>] = <span class="hljs-number">4</span>;<br>        array[<span class="hljs-number">4</span>] = <span class="hljs-number">5</span>;<br>        <span class="hljs-comment">//遍历数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            System.out.println(array[i]);<br>        &#125;<br>    &#125;<br>&#125;<br>    <br></code></pre></td></tr></table></figure><p> <strong>数组的三种初始化</strong></p><p>静态初始化：创建+赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] array = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<span class="hljs-comment">//基本类型</span><br>Man[] mans = &#123;<span class="hljs-keyword">new</span> Man(),<span class="hljs-keyword">new</span> Man()&#125;;<span class="hljs-comment">//引用类型</span><br></code></pre></td></tr></table></figure><p>动态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>];<br>array[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>array[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>array[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>默认初始化</p><p>数组相当于引用类型，它的元素相当于类的实例变量，一旦数组被分配空间，其元素也就和类中的实例变量一样，被隐式初始化。</p><p>注意点</p><ul><li><strong>数组数据类型确定</strong>，不存在混合类型的数组</li><li><strong>数组长度确定</strong>，数组一旦被创建，其长度就确定，而且不可改变</li><li><strong>数组可以为任何数据类型</strong>，包括基本类型和引用类型</li><li><strong>数组变量属于引用类型</strong>，也可以看为对象，每个数组元素可以看为该数组对象的成员变量，数组的本身就是对象，无论数组元素保存的是基本类型数据还是引用类型数据，数组都是保存在堆中的。</li></ul><p>总结</p><p>数组是相同类型数据的有序集合</p><p>数组属于引用类型，数组也是对象，数组元素相当于成员变量</p><p>数组长度不可变 0~array.length-1，越界则会报错：ArrayIndexOutOfBoundsException即数组下标越界异常</p><p>最早遇到的错误</p><p><strong>ArrayIndexOutOfBoundsException</strong>：数组下标越界异常</p><h3 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h3><p>for each循环</p><p>数组作为方法入参</p><p>数组作为返回值</p><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>二维数组：数组中嵌套数组，可以看为2行3列的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[][] arrays = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> array;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">多维数组</span><br><span class="hljs-comment">二维数组</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1,2</span><br><span class="hljs-comment">        2,3</span><br><span class="hljs-comment">        3,4</span><br><span class="hljs-comment">        4,5</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">int</span>[][] arrays =&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;&#125;;<br>        System.out.println(arrays[<span class="hljs-number">0</span>]);<br>        printArray(arrays[<span class="hljs-number">0</span>]);<br>        System.out.println();<br>        System.out.println(arrays[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br>        System.out.println(arrays[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]);<br>        <span class="hljs-comment">//遍历二维数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;arrays.length;i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;arrays[i].length; j++) &#123;<br>                System.out.println(arrays[i][j]);<br>            &#125;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">//打印数组元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arrays)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;arrays.length; i++) &#123;<br>            System.out.print(arrays[i]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Arrays工具类"><a href="#Arrays工具类" class="headerlink" title="Arrays工具类"></a>Arrays工具类</h3><p>数组的工具类    java.util.Arrays</p><p>数组对象本身并没有什么方法供我们使用，但是我们可以借助API提供的Arrays工具类来帮我们对数组对象进行一些基本的操作</p><p><strong>JDK帮助文档</strong></p><p>Arrays类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名调用</p><p>Arrays类常用功能</p><ul><li>给数组赋值：fill</li><li>对数组排序：sort</li><li>比较数组：equals</li><li>查找数组元素：binarySearch</li></ul><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><p><strong>冒泡排序</strong></p><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> array;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">冒泡排序</span><br><span class="hljs-comment">比较相邻的两个数组元素，如果第一个数组元素比第二个数组元素大，那么便交换他们的位置</span><br><span class="hljs-comment">每一次循环，都会产生一个最大，一个最小的</span><br><span class="hljs-comment">下轮排序可以少一次排序</span><br><span class="hljs-comment">一次循环直到结束</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo07</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">int</span>[] arrays = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">76</span>, <span class="hljs-number">8</span>, <span class="hljs-number">89</span>&#125;;<br>        <span class="hljs-keyword">int</span>[] result = bubbleSort(arrays);<br>        System.out.println(Arrays.toString(result));<br><br><br>    &#125;<br><br>    <span class="hljs-comment">//冒泡排序</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] bubbleSort(<span class="hljs-keyword">int</span>[] a) &#123;<br>        <span class="hljs-comment">//定义一个临时变量，用于内层循环交换数组元素</span><br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//外层循环，判断循环多少次</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-comment">//内层循环，判断相邻两个数组元素的大小，并交换位置</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; a.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (a[j + <span class="hljs-number">1</span>] &lt; a[j]) &#123;<br>                    temp = a[j];<br>                    a[j] = a[j + <span class="hljs-number">1</span>];<br>                    a[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//返回数组a</span><br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>面向对象与面向过程</p><ul><li>面向过程<ul><li>第一步…第二步…</li><li>面向对象适合处理一些较为简单的问题</li></ul></li><li>面向对象<ul><li>分类的思维，思考问题首先需要解决问题有那些分类，然后对于这些分类进行单独思考，最后对于分类下的细节进行面向过程的探索</li><li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题</li></ul></li><li>对于复杂的事物，需要先从宏观上把握、从整体上分析，我们需要使用面向对象的思路来分析整个系统。然后在具体到微观细节，需要用面向过程的思路去解决。</li></ul><p>属性+方法就是一个类</p><h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h3><ul><li>面向对象的本质就是：<strong>以类的方式组织代码，以对象的形式组织（封装）数据</strong>。</li><li>抽象</li><li>面向对象的三大特性<ul><li>封装：把数据封装</li><li>继承：子类继承父类</li><li>多态：</li></ul></li><li>如何理解类与对象<ul><li>从认识论的角度：现有对象后有类。对象是具体的事物。类是抽象的，是对对象的抽象。</li><li>从代码角度考虑先有类后有对象，类是对象的模板</li></ul></li></ul><p>回顾方法</p><pre><code>- 方法的定义</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.review;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MethodRev</span> </span>&#123;<br>    <span class="hljs-comment">//这是一个main方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        MethodRev methodRev = <span class="hljs-keyword">new</span> MethodRev();<br><br>        System.out.println(methodRev.sayHello());<br>    &#125;<br><br>    <span class="hljs-comment">//我们可以自定义一个方法来使用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//抛出异常，后面学</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">readFile</span><span class="hljs-params">(String file)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><pre><code>- 方法的调用</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.review;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">静态方法：有static修饰的方法</span><br><span class="hljs-comment">    带有static关键字的方法和类一起加载</span><br><span class="hljs-comment">非静态方法：没有static修饰的方法</span><br><span class="hljs-comment">    对象创建之后才存在</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//静态方法的调用</span><br>        Student.say();<br>        <span class="hljs-comment">//非静态方法的调用，先实例化这个类，然后在通过对象.方法名调用</span><br>        Student student = <span class="hljs-keyword">new</span> Student();<br>        student.eat();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.review;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">静态方法可以直接调用静态方法</span><br><span class="hljs-comment">静态方法不能直接调用非静态方法(要实例化之后，通过对象名.方法名调用)</span><br><span class="hljs-comment">非静态方法可以直接调用静态方法</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">a</span><span class="hljs-params">()</span> </span>&#123;<br>        b();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">b</span><span class="hljs-params">()</span> </span>&#123;<br>        a();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">c</span><span class="hljs-params">()</span> </span>&#123;<br>        a();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.review;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-keyword">new</span> Demo03().add(<span class="hljs-number">123</span>, <span class="hljs-number">123</span>, <span class="hljs-number">231</span>);<br>        System.out.println(sum);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span>... a)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>            <span class="hljs-keyword">int</span> num1 = a[i];<br>            sum += num1;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.review;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学生说话了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学生吃东西了&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><p>类是一种抽象的数据类型，它是对某一类整体事物的描述、定义，但是不能代表某一个具体的事物</p><p>比如说 Student类 Pet类等等都是用来描述、定义某一类事物该有的特点和行为</p><p>对象是抽象概念的具体实例</p><p>比如说张三家的小狗旺财就是Pet类的一个具体实例</p><p>简单小结类与对象</p><ol><li><p>类与对象</p><ol><li>类是一个抽象的</li><li>对象是具体的</li></ol></li><li><p>方法</p><ol><li>方法的定义、调用</li></ol></li><li><p>对应的引用</p><ol><li>引用类型：除了八大基本类型</li><li>对象通过引用来操作的：栈》》》堆</li></ol></li><li><p>属性：字段 field 成员变量</p><ol><li>默认初始化<ol><li>数字：0</li><li>char：u0000</li><li>boolean：false</li><li>引用：null</li></ol></li><li>修饰符 引用类型 属性名 = 属性值</li></ol></li><li><p>对象的创建及使用</p><ol><li>必须用new关键字创建对象 构造器 Person person = new Person()</li><li>对象的属性 person.name </li><li>对象的方法：person.sleep()</li></ol></li><li><p>类</p><ol><li>静态的属性 属性</li><li>动态的行为 方法</li></ol></li></ol><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><h3 id="new对象"><a href="#new对象" class="headerlink" title="new对象"></a>new对象</h3><p>创建与初始化对象</p><p>使用new关键字创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure><p>使用new关键字创建对象的时候，除了分配内存空间外，还会给创建好的对象进行默认的初始化以及对类中的构造器的使用</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>该露的露，该藏的藏</p><ul><li>我们设计程序追求<strong>高内聚，低耦合</strong>，高内聚是指类的内部数据的操作细节自己完成，不允许外部干涉；低耦合是指尽量暴露少的方法给外部使用</li></ul><p>封装（数据的隐藏）</p><ul><li>通常，应该禁止直接访问一个对象中的数据的实际表示，而是应该通过操作接口来访问，这成为信息的隐藏</li></ul><p>属性私有，get/set</p><p>提高程序安全性，保护数据</p><p>隐藏代码实现细节</p><p>统一接口</p><p>提升系统的可维护性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo04;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">get用来获取private修饰的数据</span><br><span class="hljs-comment">set用来设置private修饰的数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">char</span> sex;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">char</span> <span class="hljs-title">getSex</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSex</span><span class="hljs-params">(<span class="hljs-keyword">char</span> sex)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-comment">//睡觉</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleep</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;正在睡觉&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//学习</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;正在学习&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承的本质是对一批类的抽象，从而实现对世界的更好的建模</p><p>extends：本意拓展，子类是父类的拓展</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo04;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    修饰符</span><br><span class="hljs-comment">    public  公共的，都可以访问</span><br><span class="hljs-comment">    protected</span><br><span class="hljs-comment">    default</span><br><span class="hljs-comment">    private 私有的，属于本类的</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    子类继承父类，只能继承父类public修饰的属性、方法</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> money = <span class="hljs-number">10_0000_0000</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;说了一句话&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo04;<br><span class="hljs-comment">//学生is Person</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo04;<br><span class="hljs-comment">//学生is Person</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop;<br><br><br><span class="hljs-keyword">import</span> oop.demo04.Student;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">规范：一个项目应该只存在一个main方法</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Student s1 = <span class="hljs-keyword">new</span> Student();<br>        <span class="hljs-comment">//Student类里面没有say()方法，Student类继承了Person类，可以执行Person类里面的Say()方法</span><br>        s1.say();<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>java只有单继承没有多继承</p><p>继承是类与类之间的关系，类与类的关系还有依赖、组合、聚合等</p><p>具有继承关系的两个类，一个叫子类，一个叫父类，子类继承父类，用关键字extends表示</p><p>object类</p><ul><li>java中所有的类默认继承Object类，Object类是所有类的超级父类</li><li>快捷键ctrl+h：查看层级结构</li></ul><p><img src="file://C:/Users/MaLin/OneDrive/Markdown%E7%AC%94%E8%AE%B0/image-20210425120953321-1619852418348.png?lastModify=1619852396" alt="image-20210425120953321"></p><p>super</p><ul><li>调用父类的构造方法</li><li>必须只能出现在子类的方法或者构造方法中</li><li>super和this不能同时出现在构造方法中</li></ul><p>vs this</p><ul><li>this：代表本身调用者这个对象，没有继承也可以用</li><li>super：代表父类对象的引用，只能在继承关系下使用</li></ul><p>构造方法</p><ul><li>this():调用本类的构造</li><li>super():调用父类的构造</li></ul><p>方法的重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop;<br><br><span class="hljs-keyword">import</span> oop.demo05.A;<br><span class="hljs-keyword">import</span> oop.demo05.B;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">规范：一个项目应该只存在一个main方法</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//方法的调用之和左边的类型有关</span><br>        A a = <span class="hljs-keyword">new</span> A();<br>        a.test();<br><br>        <span class="hljs-comment">//父类的引用指向子类对象</span><br>        B b = <span class="hljs-keyword">new</span> A();<br>        b.test();<br><br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo05;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">B</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A&gt;test&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo05;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">重写：重写是方法的重写，与属性无关</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;B&gt;test&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo05;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">B</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//注解，有功能的注释</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A&gt;test&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">静态方法和非静态方法有很大的区别</span><br><span class="hljs-comment">静态方法不能被重写，静态方法的调用只和左边的类型有关</span><br><span class="hljs-comment">非静态方法可以被重写(只能是public的方法)，他的调用只和new</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo05;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">重写：重写是方法的重写，与属性无关</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;B&gt;test&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop;<br><br><br><br><span class="hljs-keyword">import</span> oop.demo05.A;<br><span class="hljs-keyword">import</span> oop.demo05.B;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">规范：一个项目应该只存在一个main方法</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//方法的调用之和左边的类型有关</span><br>        A a = <span class="hljs-keyword">new</span> A();<br>        a.test();<br><br>        <span class="hljs-comment">//父类的引用指向子类对象</span><br>        B b = <span class="hljs-keyword">new</span> A();<br>        b.test();<br><br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>重写是方法的重写，与属性无关</p><p>重写注意点</p><ol><li>重写必须有继承关系</li><li>参数列表必须相同</li><li>修饰符：可以被扩大，不可以被缩小 private&lt; default&lt; protected&lt; public</li><li>抛出的异常：可以被缩小，不能被扩大</li></ol><p>为什么需要重写</p><ol><li>父类的方法子类不一定需要或者满足alt insert&gt;&gt;&gt;override</li></ol><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>同一方法可以根据发送方法的不同，采取多种不同的行为方式</p><p>一个对象的实际类型是确定的，但是可以指向对象的引用的类型有很多</p><p>多态的前提</p><ul><li>有继承关系</li><li>子类重写父类方法</li><li>父类引用指向子类对象</li></ul><p>多态是方法的多态，属性没有多态性</p><p>intsanceof</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop;<br><br><br><span class="hljs-keyword">import</span> oop.demo06.Person;<br><span class="hljs-keyword">import</span> oop.demo06.Student;<br><span class="hljs-keyword">import</span> oop.demo06.Teacher;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Object o = <span class="hljs-keyword">new</span> Student();<br><br>        System.out.println(o <span class="hljs-keyword">instanceof</span> Student);<span class="hljs-comment">//ture</span><br>        System.out.println(o <span class="hljs-keyword">instanceof</span> Person);<span class="hljs-comment">//ture</span><br>        System.out.println(o <span class="hljs-keyword">instanceof</span> Object);<span class="hljs-comment">//ture</span><br>        System.out.println(o <span class="hljs-keyword">instanceof</span> Teacher);<span class="hljs-comment">//false</span><br>        System.out.println(o <span class="hljs-keyword">instanceof</span> String);<span class="hljs-comment">//false</span><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        思考</span><br><span class="hljs-comment">        Person</span><br><span class="hljs-comment">        Student</span><br><span class="hljs-comment">        Teacher</span><br><span class="hljs-comment">         */</span><br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo06;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo06;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;run&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo06;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;s run&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;s eat&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意点</p><ol><li>多态是方法的多态</li><li>子类父类，不是继承关系会有类型转换异常ClassCastException</li><li>多态的前提</li></ol><p>static方法不能被重写</p><p>final方法不能被重写</p><p>private方法不能被重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop;<br><br><br><span class="hljs-keyword">import</span> oop.demo06.Person;<br><span class="hljs-keyword">import</span> oop.demo06.Student;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        一个对象的类型是确定的</span><br><span class="hljs-comment">        new Student();</span><br><span class="hljs-comment">        new Person();</span><br><span class="hljs-comment">        可以指向的引用可以不同</span><br><span class="hljs-comment">        Person s1 = new Student();</span><br><span class="hljs-comment">        Student s2 = new Student();</span><br><span class="hljs-comment">        */</span><br>        Student s1 = <span class="hljs-keyword">new</span> Student();<br>        Person s2 = <span class="hljs-keyword">new</span> Student();<br>        Object s3 = <span class="hljs-keyword">new</span> Student();<br><br>        <span class="hljs-comment">//Student能调用的方法都是自己的，或者继承父类的</span><br>        s1.run();<br>        <span class="hljs-comment">//Person能调用的方法只能是</span><br>        s2.run();<br><br>        s1.eat();<br>        ((Student)s2).eat();<br><br><br><br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo06;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;run&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo06;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;s run&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;s eat&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo08;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">abstract抽象类</span><br><span class="hljs-comment">抽象类不能new出来，只能靠子类去实现他</span><br><span class="hljs-comment">抽象类里面可以写普通方法，但是抽象方法只能在抽象类中</span><br><span class="hljs-comment">抽象的抽象：约束</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">抽象类是否存在构造器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Action</span> </span>&#123;<br><span class="hljs-comment">//约束，有人帮我们完成某些功能的具体实现</span><br>    <span class="hljs-comment">//抽象方法，abstract修饰的方法，只有方法的名字没有方法的实现</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> oop.demo08;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">抽象类的所有方法都必须由子类实现（重写），除非子类也是抽象的</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Action</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>普通类：只有具体实现</p><p>抽象类：具体实现和规范（抽象方法）都有</p><p>接口：只有规范</p><p>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是…你必须能…”的思想</p><p>接口的本质就是契约，制定好后大家都要遵守</p><p>OO的精髓是对对象的抽象，最能体现这一点的就是接口，我们讨论设计模式都是针对具备抽象能力的语言（c,java,c#）,设计模式研究的就是如何去抽象</p><p>interface声明接口</p><p>class声明类</p><p>作用：</p><ol><li>约束</li><li>定义一些不同的方法，让不同的人去实现</li><li>public abstract</li><li>public static final</li><li>接口不能被实例化，接口没有构造方法</li><li>implements可以实现多个接口</li><li>必须要重写接口中的方法</li></ol><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>内部类就是在一个类的内部再定义一个类，比如，A类中定义一个B类，那么B类相对于A类来说就是一个内部类，或者说A类相对于B类是外部类</p><ol><li><p>成员内部类</p><ol><li><p>```java<br>package oop.demo10;</p><p>public class Outer {</p><pre><code>private int id = 100;public void out()&#123;    System.out.println(&quot;这是外部方法&quot;);&#125;public class Inner&#123;    public void in()&#123;        System.out.println(&quot;这是内部方法&quot;);    &#125;    public void getId()&#123;        System.out.println(id);    &#125;&#125;</code></pre><p>}</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>   <span class="hljs-number">2.</span> <br><br><span class="hljs-number">2.</span> 静态内部类<br><br>   <span class="hljs-number">1.</span> <span class="hljs-keyword">static</span><br><br>   <span class="hljs-number">2.</span> ```java<br>      package oop.demo10;<br>      <br>      <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> &#123;</span><br>          <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id = <span class="hljs-number">100</span>;<br>          <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">out</span><span class="hljs-params">()</span></span>&#123;<br>              System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;这是外部方法&quot;</span>);<br>          &#125;<br>      <br>          <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span>&#123;</span><br>              <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">in</span><span class="hljs-params">()</span></span>&#123;<br>                  System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;这是内部方法&quot;</span>);<br>              &#125;<br>              <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span></span>&#123;<br>                  System.out.<span class="hljs-built_in">println</span>(id);<br>              &#125;<br>          &#125;<br>      &#125;<br>      <br></code></pre></td></tr></table></figure></li><li></li></ol></li><li><p>局部内部类</p><ol><li>```java<br>package oop.demo10;public class Outer {<br>//局部内部类<pre><code>public void out()&#123;    class Inner&#123;        public void in()&#123;        &#125;    &#125;&#125;</code></pre>}<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>   <span class="hljs-number">2.</span> <br><br><span class="hljs-number">4.</span> 匿名内部类<br><br>   ```java<br>   <span class="hljs-keyword">package</span> oop.demo10;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>   <span class="hljs-comment">//有名字初始化类</span><br>           Apple apple = <span class="hljs-keyword">new</span> Apple();<br>           apple.eat();<br>   <span class="hljs-comment">//没有名字初始化类</span><br>           <span class="hljs-keyword">new</span> Apple().eat();<br>       &#125;<br>   &#125;<br>   <br>   <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Apple</span> </span>&#123;<br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>           System.out.println(<span class="hljs-string">&quot;1&quot;</span>);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>异常：在程序执行过程中，出现了非正常的情况，最终会导致JVM的非正常停止</p><p>在java等面向对象的编程语言中，异常本来就是一个类，产生异常就是创建一个异常对象并抛出了一个异常对象。java处理异常的方式是中断处理。</p><h3 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h3><p><img src="https://gitee.com/Linsip/blog/raw/master/img/20210515161120.png" alt="throwable"></p><h3 id="五个关键字"><a href="#五个关键字" class="headerlink" title="五个关键字"></a>五个关键字</h3><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>使用java内置的异常类可以描述在编程时出现的大部分异常情况。除了这些异常，我们可以自定义异常</p><p>如何自定义异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> exception.demo02;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">自定义异常</span><br><span class="hljs-comment">1.创建自定义异常类</span><br><span class="hljs-comment">2.在方法中通过Throw关键字抛出异常对象</span><br><span class="hljs-comment">3.如果要在当前抛出异常的方法中处理异常，可以用try-catch语句捕获异常，并处理异常；否则就在方法的声明出通过throws关键字</span><br><span class="hljs-comment">指明要抛出给方法调用者的异常</span><br><span class="hljs-comment">4.在出现异常的方法的调用者中处理和捕获异常</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">//1.创建自定义异常类,继承Exception类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span> </span>&#123;<br>    <span class="hljs-comment">//传递数字，&gt;10就抛出异常</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> detail;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyException</span><span class="hljs-params">( <span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.detail = a;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//异常的打印信息</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MyException&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;detail=&quot;</span> + detail +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> exception.demo02;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-comment">//可能会存在异常的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> <span class="hljs-keyword">throws</span> MyException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;传递的参数为&quot;</span>+a);<br>        <span class="hljs-keyword">if</span> (a&gt;<span class="hljs-number">10</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyException(a);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;OK&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            test(<span class="hljs-number">11</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (MyException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;MyException&quot;</span>+e);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>异常总结</p><p>处理运行时异常时，采用逻辑去合理规避同时辅助try-catch</p><p>在多重catch块后面，可以加一个catch(Excption)来处理可能被遗漏的异常</p><p>对于不确定的代码，也可以加try-catch，来处理潜在的异常</p><p>尽量去处理异常，切忌只简单地调用printStackTrace()去打印输出</p><p>具体如何处理异常要根据不同的业务需求和异常类型去决定</p><p>尽量添加finally语句去释放已经占用的资源</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法</title>
    <link href="/2021/04/29/Markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/04/29/Markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><p>Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。由于Markdown的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，许多网站都广泛使用Markdown来撰写帮助文档或是用于论坛上发表消息。 如GitHub、Reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge、简书等，甚至还能被使用来撰写电子书。</p><h2 id="标题："><a href="#标题：" class="headerlink" title="标题："></a>标题：</h2><p><code>#</code>+<code>空格</code>+标题名称：一级标题</p><p><code>##</code>+<code>空格</code>+标题名称：二级标题</p><p>…</p><h2 id="字体："><a href="#字体：" class="headerlink" title="字体："></a>字体：</h2><p><strong>粗体</strong>    <code>**</code>在字的两边加<code>**</code></p><p><em>斜体</em>    <code>*</code>在字的两边加<code>*</code></p><p><del>删除线</del>    <code>~~</code>在字左右加<code>~~</code></p><h2 id="引用："><a href="#引用：" class="headerlink" title="引用："></a>引用：</h2><blockquote><p><code>&gt;</code>+<code>空格</code>就是引用</p></blockquote><h2 id="分割线："><a href="#分割线：" class="headerlink" title="分割线："></a>分割线：</h2><hr><p><code>---</code>或<code>***</code></p><hr><h2 id="图片："><a href="#图片：" class="headerlink" title="图片："></a>图片：</h2><p><img src="" alt="图片名"></p><p><code>!</code>+<code>[这里面写图片名称]</code>+<code>(这里面写图片地址)</code></p><h2 id="超链接："><a href="#超链接：" class="headerlink" title="超链接："></a>超链接：</h2><p><a href="www.bilibili.com">B站</a></p><p><code>[这里网站名称]</code>+<code>(这里写网址)</code></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li><code>1</code>+<code>.</code>+<code>空格</code></li><li></li></ol><ul><li><code>-</code>+<code>空格</code></li><li></li></ul><h2 id="表格："><a href="#表格：" class="headerlink" title="表格："></a>表格：</h2><p><code>|</code> 表头 <code>|</code> 表头<code>|</code><br><code>|</code> <code>---</code> <code>|</code> <code>---</code> <code>|</code><br><code>|</code> 内容 <code>|</code> 内容 <code>|</code></p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><p>三个`</p><p><code>esc</code>下面的按键（英文状态下）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代办事项"><a href="#代办事项" class="headerlink" title="代办事项"></a>代办事项</h2><p><code>-</code>+<code>空格</code>+ <code>[空格]</code><br><code>-</code>+<code>空格</code>+ <code>[x]</code> </p><ul><li><input disabled="" type="checkbox"> 事项1</li><li><input checked="" disabled="" type="checkbox"> 事项2</li></ul><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p><code>$$</code>y=2x^2+1​<code>$$</code></p><p>$$E=mc^2$$</p><p>$$\sum_{i=1}^n a_i=0$$</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p><code>window</code> + <code>e</code></p><p><code>esc</code>下面的按键（英文状态下）</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客的搭建部署</title>
    <link href="/2021/04/20/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/"/>
    <url>/2021/04/20/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo博客搭建教程"><a href="#Hexo博客搭建教程" class="headerlink" title="Hexo博客搭建教程"></a>Hexo博客搭建教程</h1><p><a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="下载安装Git"><a href="#下载安装Git" class="headerlink" title="下载安装Git"></a>下载安装Git</h3><ol><li><p>到<a href="https://gitforwindows.org/">Git官网</a>下载合适版本的Git，并安装</p></li><li><p>检测安装是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version//查看Git版本<br></code></pre></td></tr></table></figure></li></ol><span id="more"></span><p>Git安装成功后可以用Git Bash来进行命令行操作</p><h3 id="下载安装Note-js"><a href="#下载安装Note-js" class="headerlink" title="下载安装Note.js"></a>下载安装Note.js</h3><ol><li><p>到<a href="http://nodejs.cn/download/">Note.js中文官网</a>下载合适的版本，并安装</p></li><li><p>检测是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v//查看note版本<br>npm -v//查看npm版本<br></code></pre></td></tr></table></figure></li></ol><h2 id="搭建本地博客"><a href="#搭建本地博客" class="headerlink" title="搭建本地博客"></a>搭建本地博客</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ol><li><p>打开Git Bash，输入下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><p>检测是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure></li></ol><h3 id="博客初始化"><a href="#博客初始化" class="headerlink" title="博客初始化"></a>博客初始化</h3><ol><li><p>新建一个文件夹作为博客的目录，例如将博客目录设置为myblog</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myblog<br></code></pre></td></tr></table></figure></li><li><p>初始化博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> myblog<br>npm install<br></code></pre></td></tr></table></figure></li></ol><h3 id="博客本地效果"><a href="#博客本地效果" class="headerlink" title="博客本地效果"></a>博客本地效果</h3><ol><li><p>Git Bash执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -g//生成静态页面<br>hexo server//本地预览<br></code></pre></td></tr></table></figure></li><li><p>查看<a href="http://localhost:4000/">本地博客</a>效果</p></li></ol><h2 id="将博客部署到Github"><a href="#将博客部署到Github" class="headerlink" title="将博客部署到Github"></a>将博客部署到Github</h2><h3 id="创建个人Github仓库"><a href="#创建个人Github仓库" class="headerlink" title="创建个人Github仓库"></a>创建个人Github仓库</h3><ol><li>注册一个Github账号，并登录</li><li>新建一个Github仓库，并命名为yourname.github.io。必须按此格式命名，这里yourname可以自定义，比如我的仓库名Linsip.github.io</li></ol><h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><ol><li><p>Git Bash输入下面的命令，生成密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;你的github账户名字&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;你的github邮箱&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>检测输入的用户名与邮箱是否正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config user.name<br>git config user.email<br></code></pre></td></tr></table></figure></li><li><p>输入下面命令创建SSH密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>上传SSH密钥到Github</p></li></ol><h3 id="部署代码到Github上"><a href="#部署代码到Github上" class="headerlink" title="部署代码到Github上"></a>部署代码到Github上</h3><ol><li><p>找到并打开配置文件，修改其内容</p></li><li><p>Git Bash输入下面命令，安装hexo-deployer-git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save//<br></code></pre></td></tr></table></figure></li><li><p>继续执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean//<br>hexo generate//<br>hexo deploy//<br></code></pre></td></tr></table></figure></li><li><p>打开网址<a href="http://yourname.github.io/">http://yourname.github.io</a>就可以看到你自己搭建的博客。这里的yourname就是你Github仓库的名字</p></li></ol><h2 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h2><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><p>待完善</p><h2 id="Hexo博客常用命令"><a href="#Hexo博客常用命令" class="headerlink" title="Hexo博客常用命令"></a>Hexo博客常用命令</h2><h3 id="新建博客目录"><a href="#新建博客目录" class="headerlink" title="新建博客目录"></a>新建博客目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init &lt;folder&gt;<br></code></pre></td></tr></table></figure><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new [layout] &lt;title&gt;<br>//例如<br>hexo n <span class="hljs-string">&quot;我的第一篇博客&quot;</span><br></code></pre></td></tr></table></figure><h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure><h3 id="部署内容到网站"><a href="#部署内容到网站" class="headerlink" title="部署内容到网站"></a>部署内容到网站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></table></figure><h3 id="启用本地预览"><a href="#启用本地预览" class="headerlink" title="启用本地预览"></a>启用本地预览</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><h2 id="Hexo博客常见问题"><a href="#Hexo博客常见问题" class="headerlink" title="Hexo博客常见问题"></a>Hexo博客常见问题</h2><h3 id="更换博客主题"><a href="#更换博客主题" class="headerlink" title="更换博客主题"></a>更换博客主题</h3><p>到<a href="https://hexo.io/themes">Hexo官网</a>找到自己喜欢的主题，</p><p>让后输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
