<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JavaSE自学笔记</title>
    <link href="/2021/04/30/JavaSE%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/04/30/JavaSE%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaSE自学笔记（本人所看b站视频狂神说Java）"><a href="#JavaSE自学笔记（本人所看b站视频狂神说Java）" class="headerlink" title="JavaSE自学笔记（本人所看b站视频狂神说Java）"></a>JavaSE自学笔记（<a href="https://www.bilibili.com/video/BV12J41137hu">本人所看b站视频狂神说Java</a>）</h1><h2 id="初识Java"><a href="#初识Java" class="headerlink" title="初识Java"></a>初识Java</h2><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p>自建博客</p><p>[Hexo博客的搭建与部署](<a href="https://linsip.cn/2021/04/20/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/">Hexo博客的搭建部署 - Linsip</a>)</p><h3 id="MarkDown语法"><a href="#MarkDown语法" class="headerlink" title="MarkDown语法"></a>MarkDown语法</h3><p>[MarkDown语法笔记](<a href="https://linsip.cn/2021/04/29/Markdown%E8%AF%AD%E6%B3%95/#Markdown%E8%AF%AD%E6%B3%95">Markdown语法 - Linsip</a>)</p><h3 id="常用Dos命令"><a href="#常用Dos命令" class="headerlink" title="常用Dos命令"></a>常用Dos命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">//退回上级目录<br><span class="hljs-built_in">cd</span> ..<br><br>//退回到根目录<br><span class="hljs-built_in">cd</span>\<br><br>//进入某文件夹<br><span class="hljs-built_in">cd</span> 文件夹路径<br><br>//新建文件夹<br>md 文件夹名<br><br>//删除文件夹<br>rd 文件夹名<br><br>//拷贝文件<br>copy 文件路径 目标路径 文件<br><br>//删除文件<br>del 文件路径 文件<br><br>//查看目录下所有文件<br>dir 路径<br><br>//格式化硬盘（别乱用！！！！）<br>format 盘符<br><br>//清理屏幕（clean screen）<br>cls<br><br>//退出<br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h3 id="计算机语言发展史-简史"><a href="#计算机语言发展史-简史" class="headerlink" title="计算机语言发展史(简史)"></a>计算机语言发展史(简史)</h3><p>计算机语言可以分为机器语言、汇编语言、高级语言三类，其对应的计算机语言发展历史的三个阶段</p><p>第一阶段</p><blockquote><p>1946年2月14日，世界上第一台计算机ENAC诞生，使用的是最原始的穿孔卡片。这种卡片上使用的语言是只有专家才能理解的语言，与人类语言差别极大，这种语言就称为机器语言。机器语言是第一代计算机语言。这种语言本质上是计算机能识别的唯一语言，人类很难理解。以后的语言就是在这个的基础上简化而来。虽然后来发展的语言能让人类直接理解但最终送入计算机的还是这种机器语言。</p></blockquote><p>第二阶段</p><blockquote><p>计算机语言发展到第二代，出现了汇编语言。汇编语言用助记符代替了操作码，用地址符号或标号代替地址码。这样就用符号代替了机器语言的二进制码。汇编语言也称为符号语言。比起机器语言，汇编大大进步了。尽管还是复杂，用起来容易出错，但在计算机语言发展史上是机器语言向更高级的语言进化的桥梁</p></blockquote><p>第三阶段</p><blockquote><p>当计算机语言发展到第三代时，就进入了“面向人类”的高级语言。高级语言是一种接近于人们使用习惯的程序设计语言。它允许用英文写计算程序，程序中的符号和算式也与日常用的数学式子差不多。高级语言发展于20世纪50年代中叶到70年代，流行的高级语言已经开始固化在计算机内存里了，比如 basic语言。现在，计算机语言仍然在不断的发展，种类也相当多，比如 FORTRAN语言， COBOL语言，C语言，C++，C#， PASCAO，JAVA等等。</p><p>原文请看：<a href="http://www.mahaixiang.cn/bcyy/2048.html">计算机语言的发展简史-马海祥博客 (mahaixiang.cn)</a></p></blockquote><h3 id="Java的历史（简史）"><a href="#Java的历史（简史）" class="headerlink" title="Java的历史（简史）"></a>Java的历史（简史）</h3><p>1991年4月，James Gosling领导的Green Project计划，致力于开发一种适用于各种电子性消费产品的程序架构，诞生了Java的前身–Oak</p><p>1995年5月23日，Oak被更名为Java，由Sun公司在Sun World上正式发布。第一次提出了“Write once,Run anywhere”的口号</p><p>···</p><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><blockquote><p><a href="https://baike.baidu.com/item/JDK/1011">JDK</a><em>（Java Development Kit）</em>称为Java开发包或Java开发工具，是一个编写Java的Applet小程序和应用程序的程序开发环境。JDK是整个Java的核心，包括了Java运行环境<em>（Java Runtime Environment）</em>，一些Java工具和Java的核心类库<em>（Java API）</em>。</p><p>来源：百度百科</p></blockquote><p>安装JDK：<a href="https://www.oracle.com/java/technologies/javase-downloads.html">JDK官网</a></p><p>推荐下载Java SE 8或者Java SE 11</p><h3 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h3><blockquote><p>Java运行环境（Java Runtime Environment，简称JRE）是一个软件，由太阳微系统所研发，JRE可以让计算机系统运行Java应用程序（Java Application）。</p><p>JRE的内部有一个Java虚拟机（Java Virtual Machine，JVM）以及一些标准的<a href="https://baike.baidu.com/item/%E7%B1%BB%E5%88%AB/693095">类别</a>函数库（Class Library）。</p><p>来源：百度百科</p></blockquote><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><h3 id="第一行代码"><a href="#第一行代码" class="headerlink" title="第一行代码"></a>第一行代码</h3><p>尝试用记事本写下下面这几行代码或者推荐使用<a href="https://notepad-plus-plus.org/downloads/v7.9.2/">Notepad++</a></p><p>并且在命令提示符上编译运行出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="编译型与解释型"><a href="#编译型与解释型" class="headerlink" title="编译型与解释型"></a>编译型与解释型</h3><p>编译型：简单来说就像是一个翻译，对我们写的的源代码进行翻译，生成计算机能看得懂的可执行代码</p><p>解释型：一边翻译，一边执行</p><p>Java（解释型+编译型）：java是通过javac.exe编译成.class文件 然后通过jvm加载.class文件，然后调用java.exe执行文件。在此之前你要下载安装JDK并配置环境变量。</p><h3 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h3><p>先了解什么是IDE</p><blockquote><p>集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。所有具备这一特性的软件或者软件套（组）都可以叫集成开发环境。如微软的Visual Studio系列，Borland的C++ Builder、Delphi系列等。该程序可以独立运行，也可以和其它程序并用。IDE多被用于开发HTML应用软件。例如，许多人在设计网站时使用IDE（如HomeSite、DreamWeaver等），因为很多项任务会自动生成。</p><p>来源：百度百科</p></blockquote><p>IDEA业界公认最好的Java开发工具</p><p>下载：<a href="https://www.jetbrains.com/">IDEA官网</a></p><p>安装：按自己需求安装，或者默认安装</p><p>配置环境变量</p><ol><li>我的电脑–&gt;属性–&gt;高级系统设置–&gt;高级–&gt;环境变量</li><li>在打开的<strong>系统变量</strong>中新建变量，变量名：JAVA_HOME，变量值：JDK安装目录</li><li><strong>系统变量</strong>中Path下添加如下内容%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</li><li>测试是否配置成功cmd</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -version<br></code></pre></td></tr></table></figure><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>单行注释 Line comment</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注释 这就是注释的基本格式，到本行结束所有的字符被编译器忽略</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//输出语句</span><br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>多行注释 block comment</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;China NO.1!&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>文档注释JavaDoc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*<span class="hljs-doctag">@author</span></span><br><span class="hljs-comment">*<span class="hljs-doctag">@version</span></span><br><span class="hljs-comment">*<span class="hljs-doctag">@since</span></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>参数</p><table><thead><tr><th align="center">参数信息</th><th align="center"></th></tr></thead><tbody><tr><td align="center">@author</td><td align="center">作者</td></tr><tr><td align="center">@version</td><td align="center">版本号</td></tr><tr><td align="center">@since</td><td align="center">指明最早使用jdk版本</td></tr><tr><td align="center">@param</td><td align="center">参数名</td></tr><tr><td align="center">@return</td><td align="center">返回值</td></tr><tr><td align="center">@throws</td><td align="center">抛出异常情况</td></tr></tbody></table><p>拓展：如何用IDEA生成自己的api文档？</p><p>Tools——Generate JavaDoc</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p> 定义</p><p>Java的所有组成部分都需要名字。类名、变量名、方法名都被称为<strong>标识符</strong></p><p>命名规则</p><p>类名：首字母大写的驼峰命名，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>变量名：首字母小写的驼峰命名规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> getNum = <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><p>方法名：首字母小写的驼峰命名规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getMax</span><span class="hljs-params">()</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li><p>所有的标识符都应该以字母A-Z,a-z美元$或者下划线**_**开始</p></li><li><p>标识符大小写敏感</p></li><li><p>标识符可以用中文但是不建议</p></li><li><p>不得使用Java中的<strong>关键字</strong>作为标识符</p></li></ul><p><strong>关键字</strong></p><p>java中一共有53个关键字</p><p>常用关键字：</p><table><thead><tr><th align="center">abstract</th><th align="center">default</th><th align="center">if</th><th align="center">private</th><th align="center">this</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">do</td><td align="center">implements</td><td align="center">protected</td><td align="center">throw</td></tr><tr><td align="center">break</td><td align="center">double</td><td align="center">import</td><td align="center">public</td><td align="center">throws</td></tr><tr><td align="center">byte</td><td align="center">else</td><td align="center">instanceof</td><td align="center">return</td><td align="center">transient</td></tr><tr><td align="center">case</td><td align="center">extends</td><td align="center">int</td><td align="center">short</td><td align="center">try</td></tr><tr><td align="center">catch</td><td align="center">final</td><td align="center">interface</td><td align="center">static</td><td align="center">volatile</td></tr><tr><td align="center">char</td><td align="center">finally</td><td align="center">long</td><td align="center">strictfp</td><td align="center">while</td></tr><tr><td align="center">class</td><td align="center">float</td><td align="center">native</td><td align="center">super</td><td align="center"></td></tr><tr><td align="center"><del>const</del></td><td align="center">for</td><td align="center">new</td><td align="center">switch</td><td align="center"></td></tr><tr><td align="center">continue</td><td align="center"><del>goto</del></td><td align="center">package</td><td align="center">synchronized</td><td align="center"></td></tr></tbody></table><p>注</p><ul><li><p>Java中的true和false不是关键字</p></li><li><p>Java中有两个特殊关键字（Java保留字，Java不用，你也不能用）goto，const。</p></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>java是一种<strong>强类型语言</strong>，即java的变量的使用要严格符合规定，先定义再使用</p><p><strong>强类型语言</strong>：所有变量的定义必须严格符合规定，必须先定义后使用。<strong>安全性高，速度慢</strong></p><p><strong>弱类型语言</strong>：</p><p>JS VB</p><p>Java的数据类型分为<strong>基本数据类型</strong>和<strong>引用类型</strong></p><p><strong>基本数据类型</strong></p><p><strong>8种基本数据类型primitive type</strong></p><p><strong>整数类型</strong></p><table><thead><tr><th align="center">类型</th><th align="center">占位</th><th align="center">最值</th><th align="center">注</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">8bit</td><td align="center">0x7f~0x80 (127)</td><td align="center"></td></tr><tr><td align="center">short</td><td align="center">16bit</td><td align="center">0x7fff~0x8000 (32767)</td><td align="center"></td></tr><tr><td align="center">int</td><td align="center">32bit</td><td align="center">0x7fffffff~0x80000000 (21亿)</td><td align="center"></td></tr><tr><td align="center">long</td><td align="center">64bit</td><td align="center">…</td><td align="center">字面量需要使用L后缀</td></tr></tbody></table><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span></span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>       <span class="hljs-comment">//八大基本数据类型</span><br>       <br>       <span class="hljs-comment">//整数类型</span><br>       <span class="hljs-keyword">int</span> num1 = <span class="hljs-number">10</span>;<span class="hljs-comment">//最常用</span><br>       <span class="hljs-keyword">byte</span> num2 = <span class="hljs-number">20</span>;<br>       <span class="hljs-keyword">short</span> num3 = <span class="hljs-number">30</span>;<br>       <span class="hljs-keyword">long</span> num4 = <span class="hljs-number">40L</span>;<span class="hljs-comment">//long类型要在数字后加一个L</span><br>       <br>        <span class="hljs-comment">//浮点数</span><br><span class="hljs-keyword">float</span> num5 = <span class="hljs-number">10.1F</span>;<span class="hljs-comment">//float类型要在数字后面加F</span><br>       <span class="hljs-keyword">double</span> num6 = <span class="hljs-number">3.14</span>;<br>       <br>       <span class="hljs-comment">//字符</span><br>        <span class="hljs-keyword">char</span> name = <span class="hljs-string">&#x27;a&#x27;</span>;<br>       <br>       <span class="hljs-comment">//字符串，String不是关键字，是一个类</span><br>       <span class="hljs-comment">//String name = &quot;马林&quot;;</span><br>       <br>       <span class="hljs-comment">//布尔值</span><br>       <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br>   &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>浮点类型</strong></p><p>float（浮点型）:32bit</p><p>double（双精度）:64bit</p><table><thead><tr><th>类型</th><th align="center">占位</th><th align="center">最值</th><th align="center">注</th></tr></thead><tbody><tr><td>float</td><td align="center">32</td><td align="center">(-2^31)~(2^31-1)</td><td align="center">float类型精度过低，很少使用（一般都用double），字面量后缀F</td></tr><tr><td>double</td><td align="center">64</td><td align="center"></td><td align="center">浮点数的字面量默认为double，字面量后缀D</td></tr></tbody></table><p><strong>字符类型</strong></p><p>char（字节型）:16bit</p><table><thead><tr><th align="center">类型</th><th align="center">占位</th><th align="center">取值</th><th align="center">注</th></tr></thead><tbody><tr><td align="center">char</td><td align="center">16</td><td align="center">0~2^16-1</td><td align="center">char是一个2进制数（16位无符号整数），这个数值是一个unicode编码</td></tr></tbody></table><p>编码拓展</p><p>某个数除了表示一个数之外，还可以表示为一个字符</p><p>Unicode编码是全球范围内的编码方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> datatype;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">编码拓展</span><br><span class="hljs-comment">Unicode编码</span><br><span class="hljs-comment">65--A</span><br><span class="hljs-comment">97--a</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span> c = <span class="hljs-number">65</span>;<br>        System.out.println(c);<span class="hljs-comment">//A</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>特殊字符用转义字符表示</p><table><thead><tr><th align="center">转义字符</th><th align="center">代表的意思</th></tr></thead><tbody><tr><td align="center">\n</td><td align="center">回车</td></tr><tr><td align="center">\t</td><td align="center">制表</td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">···</td><td align="center"></td></tr></tbody></table><p><strong>布尔类型</strong></p><p>boolean类型：用于表达真假。常用于判断语句。</p><table><thead><tr><th align="center">类型</th><th align="center">占位</th><th align="center">取值</th><th align="center">注</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">1</td><td align="center">false true</td><td align="center">默认值为false</td></tr></tbody></table><p> <strong>引用类型</strong></p><p>reference type</p><p>类</p><p>接口</p><p>数组</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>Java是强类型语言，进行有些运算的时候需要用到类型转换。</p><p>不同类型的数据先转换为同一类型的数据，然后进行计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>System.out.println((<span class="hljs-keyword">int</span>)c+i);<span class="hljs-comment">//98</span><br></code></pre></td></tr></table></figure><p> 基本数据类型转换</p><p>基本数据类型转换分为<strong>强制类型转换</strong>和<strong>自动类型转换</strong>（隐式类型转换）</p><p>自动类型转换方向</p><p>char–&gt;int–&gt;long–&gt;float–&gt;double</p><p>byte–&gt;short–&gt;int–&gt;long–&gt;float–&gt;double</p><p>强制类型转换方向</p><p>char&lt;–int&lt;–long&lt;–float&lt;–double</p><p>byte&lt;–short&lt;–int&lt;–long&lt;–float&lt;–double</p><p>强制类型转换会出现<strong>内存溢出</strong>的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">128</span>;<br><span class="hljs-keyword">byte</span> b = (<span class="hljs-keyword">int</span>)i;<span class="hljs-comment">//内存溢出</span><br>System.out.println(b);<span class="hljs-comment">//-128</span><br></code></pre></td></tr></table></figure><p>也可能有<strong>精度</strong>问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">double</span> d1 = <span class="hljs-number">20.7</span>;<br><span class="hljs-keyword">int</span> i = (<span class="hljs-keyword">int</span>)d1;<br>System.out.println(i);<span class="hljs-comment">//20</span><br></code></pre></td></tr></table></figure><p>操作比较大的数的时候注意溢出问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span><br>    public static void main(String[] args)&#123;<br>    <span class="hljs-keyword">int</span> money = <span class="hljs-number">10_0000_0000</span>;<span class="hljs-comment">//JDK7的新特性，数字之间加_用于区分数字，计算不受影响</span><br>    <span class="hljs-keyword">int</span> year = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">int</span> total = money*year;<span class="hljs-comment">//计算的时候溢出了</span><br>    <span class="hljs-keyword">long</span> total2 = money*year;<span class="hljs-comment">//默认类型int，右边在计算之前就出现问题</span><br>    System.out.println(total);<span class="hljs-comment">//-1474836480</span><br>    System.out.println(total2);<span class="hljs-comment">//-1474836480</span><br>    <span class="hljs-comment">//解决方法：在计算之前先转换数据类型</span><br>    <span class="hljs-keyword">long</span> total3 = money*(<span class="hljs-keyword">long</span>)year;<br>&#125;<br></code></pre></td></tr></table></figure><p>自动类型转换 低–高，不会存在内存溢出的问题。</p><p><strong>注意点</strong></p><ul><li>不能对布尔类型进行转换</li><li>不能将变量类型转换为不相干的类型</li><li>把高容量数据转换为低容量数据 ，须强制转换</li><li>转换的时候会有<strong>内存溢出</strong>或者<strong>精度</strong>问题的情况</li></ul><p> 引用类型转换</p><p>向下转型：小类型转大类型</p><p>向上转型：大类型转小类型</p><p>instanceof：检查引用对象的类型</p><h3 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h3><p>变量就是可以变化的量</p><p>Java变量是程序的最基本的存储单元，其要素包括变量名、变量类型和<strong>作用域</strong>。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell">数据类型 变量名 = 值;可以用逗号隔开用于声明多个同类型变量。<br><span class="hljs-class"><span class="hljs-keyword">type</span> varName [=value] [&#123;,<span class="hljs-title">varName</span>[=<span class="hljs-title">value</span>]&#125;];</span><br></code></pre></td></tr></table></figure><p>注意事项</p><ul><li>每个变量都有其类型，可以是基本类型，也可以是引用类型。</li><li>变量名必须为合法的标识符。</li><li>变量的声明是一条完整的语句，因此每个声明都必须以分号结束。</li></ul><p>变量的作用域</p><ul><li>类变量</li><li>实例变量</li><li>局部变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Variable</span></span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> allClicks = <span class="hljs-number">0</span>;<span class="hljs-comment">//类变量 加了static的变量 从属于类，随着类出现和消失</span><br>    String str = <span class="hljs-string">&quot;hello world!&quot;</span>;<span class="hljs-comment">//实例变量:从属于对象，在类的里面，方法的外面，如果不进行初始化，则会变为该数据类型的默认值 0 0.0 u0000 false null（除了基本类型其他的都是null）</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<span class="hljs-comment">//局部变量</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-comment">//类变量 static</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> salary = <span class="hljs-number">2500</span>;<br>    <span class="hljs-comment">//属性：变量，类里面除了方法还可以定义一些属性</span><br>    <span class="hljs-comment">//实例变量，从属于对象</span><br>    String name;<br>    <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-comment">//main方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main[String[] args]&#123;<br>        <br>        <span class="hljs-comment">//局部变量；必须声明和初始化值</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;<br>        System.out.println(i);<br>        <br>        <span class="hljs-comment">//变量类型 变量名 = new Demo();</span><br>        Demo demo = <span class="hljs-keyword">new</span> Demo();<br>        System.out.println(demo.name);<br>        System.out.println(demo.age);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(i);<br>    &#125;<br>&#125;<br>    <br></code></pre></td></tr></table></figure><p>变量的命名规范</p><p>所有的变量、方法、类名：<strong>见名知意</strong></p><p>类成员变量：首字母小写和驼峰原则：monthSalary</p><p>常量：大写字母和下划线    MAX_VALUE</p><p>类名：首字母大写和驼峰原则    Demo</p><p>方法名：首字母小写和驼峰原则    run()    getMax()</p><p>常量：初始化后不能改变的值</p><p>常量</p><p>可以理解为一种特殊的变量，他的值被设定后，在程序运行期间不会改变。</p><p>常量名一般用大写字母表示</p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs monkey"><span class="hljs-keyword">final</span> 常量名 = 常量值；<br><span class="hljs-keyword">final</span> <span class="hljs-built_in">PI</span> = <span class="hljs-number">3.14</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>   <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> PI = <span class="hljs-number">3.14</span>;<span class="hljs-comment">//修饰符不分前后</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main [String[] args]&#123;<br>        System.out.println(PI);<br>    &#125;<br>&#125;<br>    <br></code></pre></td></tr></table></figure><hr><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>算数运算符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span></span>&#123;<br>    <span class="hljs-comment">//算数运算符</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main[String[] args]&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">int</span> c = <span class="hljs-number">30</span>;<br>    <span class="hljs-keyword">int</span> d = <span class="hljs-number">40</span>;<br>        <span class="hljs-keyword">int</span> e = <span class="hljs-number">21</span>;<br>    System.out.println(a+b);<span class="hljs-comment">//30</span><br>    System.out.println(a-b);<span class="hljs-comment">//-10</span><br>    System.out.println(a*b);<span class="hljs-comment">//200</span><br>    System.out.println(a/(<span class="hljs-keyword">double</span>)b);<span class="hljs-comment">//0.5</span><br>        System.out.println(e%a);<span class="hljs-comment">//%取余 也叫模运算 即21/10=2...121%10=1    </span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注</p><p>整数除法运算，会出现下溢出现象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">3</span>;<br>        System.out.println(a/b);<span class="hljs-comment">//1  下溢出，余数1被舍弃</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>低于int类型（short）（byte）的运算都按int类型运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main[String[] args]&#123;<br>    <span class="hljs-keyword">long</span> a = <span class="hljs-number">111222333222111L</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">123</span>;<br>        <span class="hljs-keyword">short</span> c = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">byte</span> d = <span class="hljs-number">8</span>;<br>        <span class="hljs-comment">//</span><br>        System.out.println(a+b+c+d);<span class="hljs-comment">//Long</span><br>        System.out.println(b+c+d);<span class="hljs-comment">//Int</span><br>        System.out.println(C+D);<span class="hljs-comment">//Int</span><br>            <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>模运算（%）表示计算除法的余数</p><p>0对其他数的余数为0</p><p>负数的余数是负数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure><p>自增自减</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">//++ -- 自增 自减</span><br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">int</span> b = a++;<span class="hljs-comment">//表示a先赋值给b，然后再自增1</span><br>System.out.println(a);<span class="hljs-comment">//4</span><br>        <span class="hljs-keyword">int</span> c = ++a;<span class="hljs-comment">//表示a先自增1，然后赋值给c</span><br>System.out.println(a);<span class="hljs-comment">//5</span><br>        System.out.println(b);<span class="hljs-comment">//3</span><br>        System.out.println(c);<span class="hljs-comment">//5</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>赋值运算符</p><p>=赋值运算符表示把等号右边的赋值给左边</p><p>==才是现实意义上的等于，属于关系运算符</p><p>关系运算符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>    <span class="hljs-comment">//关系运算符，返回的是布尔值 false true</span><br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>        System.out.println(a&gt;b);<br>        System.out.println(a&lt;b);<br>        System.out.println(a==b);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>逻辑运算符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//逻辑运算符</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-function">pubic <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">//&amp;&amp;与 ||或 !非</span><br>        <span class="hljs-keyword">boolean</span> a = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">boolean</span> b = <span class="hljs-keyword">false</span>;<br>        <br>        System.out.println(<span class="hljs-string">&quot;a&amp;&amp;b:&quot;</span>+(a&amp;&amp;b));<br>        System.out.println(<span class="hljs-string">&quot;a||b&quot;</span>+(a||b));<br>        System.out.println(<span class="hljs-string">&quot;!(a&amp;&amp;b)&quot;</span>+!(a&amp;&amp;b));<br>        <br>        <span class="hljs-comment">//短路运算,进行逻辑与运算时会发生短路运算</span><br>        <span class="hljs-keyword">int</span> c = <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">boolean</span> d = (c&lt;<span class="hljs-number">4</span>)&amp;&amp;(c++&lt;<span class="hljs-number">4</span>);<span class="hljs-comment">//这里发生了短路运算，与运算下，c&lt;4为false，计算机就不会计算&amp;&amp;后面的c++&lt;4,所以c还是5，不会自增</span><br>        System.out.println(c);<span class="hljs-comment">//5</span><br>        System.out.println(d);<span class="hljs-comment">//false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>位运算符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//位运算</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    A = 0011 1100</span><br><span class="hljs-comment">    B = 0000 1101</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    A&amp;B = 0000 1100 如果A与B两个二进制数对应位上都为1，结果才为1，否则就是0</span><br><span class="hljs-comment">    A|B = 0011 1101 如果A与B两个二进制数对应位上都为0，结果才为0，否则就是1</span><br><span class="hljs-comment">    A^B = 0011 0001 如果A与B两个二进制数相对应位上相同就为0，不同就为1</span><br><span class="hljs-comment">    ~B = 1111 0010 取反</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    2*8怎么运算最快？2*2*2*2</span><br><span class="hljs-comment">    0000 00000</span><br><span class="hljs-comment">    0000 00011</span><br><span class="hljs-comment">    0000 00102</span><br><span class="hljs-comment">    0000 00113</span><br><span class="hljs-comment">    0000 01004</span><br><span class="hljs-comment">    ...</span><br><span class="hljs-comment">    0001 000016</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    &lt;&lt;*2</span><br><span class="hljs-comment">    &gt;&gt;/2</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>       <span class="hljs-comment">//2*8怎么运算最快？2*2*2*2</span><br>        System.out.println(<span class="hljs-number">2</span>&lt;&lt;<span class="hljs-number">3</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>拓展</strong></p><p>如何进行幂运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">//幂运算 很多运算需要用到一些工具类 </span><br>        <span class="hljs-keyword">double</span> pow = Math.pow(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//2^3 Math工具类位于Java.lang包下，其方法都是静态方法，直接类名.方法名就可以使用</span><br>        System.out.println(pow);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>条件运算符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//三元运算符</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main&#123;<br>        <span class="hljs-comment">//x?y:z</span><br>        <span class="hljs-comment">//如果x为true，结果就为y，否则就为z</span><br>        <br>        <span class="hljs-keyword">int</span> score = <span class="hljs-number">80</span>;<br>        String type = score&lt;<span class="hljs-number">60</span>?<span class="hljs-string">&quot;不及格&quot;</span>:<span class="hljs-string">&quot;及格&quot;</span>;<br>        System.out.println(type);<span class="hljs-comment">//及格</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>拓展赋值运算符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//拓展运算符</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>        <br>        a+=b;<br>        a-=b;<br>        a*=b;<br>        a/=b;<br>        <br>        <span class="hljs-comment">//字符串连接符++遇到String类型的会变为字符串连接符</span><br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>+a+b);<span class="hljs-comment">//1020</span><br>        System.out.println(a+b+<span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">//30</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main[String[] args]&#123;<br>    <span class="hljs-keyword">long</span> a = <span class="hljs-number">111222333222111L</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">123</span>;<br>        <span class="hljs-keyword">short</span> c = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">byte</span> d = <span class="hljs-number">8</span>;<br>        <span class="hljs-comment">//</span><br>        System.out.println(a+b+c+d);<span class="hljs-comment">//Long</span><br>        System.out.println(b+c+d);<span class="hljs-comment">//Int</span><br>        System.out.println(C+D);<span class="hljs-comment">//Int</span><br>            <br>&#125;<br>&#125;<br>   <br></code></pre></td></tr></table></figure><h3 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h3><p>为了更好的组织类，java提供了包机制，用于区别类名的命名空间</p><p>包语句的语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pkg1[.pkg2[.pkg3...]];<br></code></pre></td></tr></table></figure><p>一般利用公司域名的倒置作为包名比如<a href="http://www.baidu.com&gt;com.baidu.www/">www.baidu.com&gt;com.baidu.www</a></p><p>为了使用某一个包的成员，我们需要在java程序中导入该包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> package1[.package2...].(classname|*);<br></code></pre></td></tr></table></figure><h3 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h3><p>用idea生成api帮助文档</p><p>Tools–&gt;Generate JavaDoc</p><p><img src="C:/Users/MaLin/myblog/source/_posts/R8i5Fwlz4HkUhPu.png" alt="generateJavaDoc"></p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h3><p>Scanner类的hasNext()与hasNextLine()判断是否还有输入的数据</p><p>通过Scanner类的next()与nextLine()方法获取输入的字符串</p><p>示例一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-comment">//导包语句，Idea自动生成</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScannerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">//创建一个Scanner对象</span><br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-comment">//判断用户有没有输入字符串</span><br>        <span class="hljs-keyword">if</span> (scanner.hasNext())&#123;<br>            <span class="hljs-comment">//</span><br>            String str = scanner.next();<br>            System.out.println(<span class="hljs-string">&quot;输入的内容为：&quot;</span>+str);<br>        &#125;<br>        <span class="hljs-comment">//关闭scanner，凡是属于IO流的类不关闭就会一直占用资源</span><br>        scanner.close();<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>示例二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScannerDemo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建一个Scanner对象</span><br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-comment">//提示用户输入</span><br>        System.out.println(<span class="hljs-string">&quot;输入名字&quot;</span>);<br>        <span class="hljs-comment">//判断用户是否输入</span><br>        <span class="hljs-keyword">if</span> (scanner.hasNextLine()) &#123;<br>            <span class="hljs-comment">//String类用于接收</span><br>            String name = scanner.nextLine();<br>            <span class="hljs-comment">//打印出名字</span><br>            System.out.println(name);<br>        &#125;<br>        <span class="hljs-comment">//关闭scanner，减少资源占用</span><br>        scanner.close();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>next():</strong></p><ul><li>一定读取到有效字符后才结束输入</li><li>有效字符前的空格，会被方法忽略</li><li>有效字符后面的空格，会被方法当为结束符</li></ul><p>next()方法不能得到带有空格的字符串</p><p><strong>nextLine():</strong></p><ul><li>以回车作为结束符</li><li>可以获得空格</li></ul><p>练习题1：输入多个数字，并求出总和与平均数，通过非数字的输入来结束输出并输出执行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScannerDemo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//定义两个变量用于后面的求和与计算平均数</span><br>        <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//new一个Scannner类的对象</span><br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-comment">//用循环来判断是否输入的是数字，以及求和，累计数字个数</span><br>        <span class="hljs-keyword">while</span> (scanner.hasNextDouble()) &#123;<br>            sum += scanner.nextDouble();<br>            num++;<br>        &#125;<br>        <span class="hljs-comment">//输出结果</span><br>        System.out.println(<span class="hljs-string">&quot;输入数字的个数为&quot;</span> + num);<br>        System.out.println(<span class="hljs-string">&quot;输入数字的和为：&quot;</span> + sum);<br>        System.out.println(<span class="hljs-string">&quot;输入数字的平均数为&quot;</span> + (sum / num));<br>        <span class="hljs-comment">//关闭scanner</span><br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p>顺序结构是Java的基本结构，除非特别指明，否则就按从上到下，从左到右，一句一句的执行。</p><p>顺序结构是最基本的算法结构，是任何算法都离不开的一种基本算法结构。</p><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><p><strong>if - else语句</strong></p><p>基本语法：</p><p>if单选择结构语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (布尔表达式) &#123;<br>语句<br>&#125;<br></code></pre></td></tr></table></figure><p>if双选择结构语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式)&#123;<br>语句<span class="hljs-number">1</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>语句<span class="hljs-number">2</span><br>&#125;<br></code></pre></td></tr></table></figure><p>if多选择结构语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">1</span>)&#123;<br>语句<span class="hljs-number">1</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">2</span>)&#123;<br>语句<span class="hljs-number">2</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">3</span>)&#123;<br>语句<span class="hljs-number">3</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>语句<span class="hljs-number">4</span><br>&#125;<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IfDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;你好，世界！&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>练习1:输入成绩，判断成绩，60以上成绩合格，60以下成绩不合格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IfDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入成绩：&quot;</span>);<br>        <span class="hljs-keyword">if</span> (scanner.hasNextInt()) &#123;<br>            <span class="hljs-keyword">int</span> i = scanner.nextInt();<br>            <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">60</span> &amp;&amp; i &lt;= <span class="hljs-number">100</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;成绩合格&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; i &lt; <span class="hljs-number">60</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;成绩不合格&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;非法成绩！！！&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入整数！！！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>switch - case语句</strong></p><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> () &#123;<br>    <span class="hljs-keyword">case</span> 字面量:<br>        代码;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span> 字面量:<br>        代码;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意点</p><ul><li>switch不能处理long类型，Java se7开始 switch支持String类型</li><li>case后面必须为数字或者字面量，不能写语句</li><li>default表示没有满足case条件的其他一切情况</li><li>不要忘记写break，不写会出现”case穿透“，后面的case、default都会执行</li></ul><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p><strong>while循环</strong></p><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (布尔表达式) &#123;<br>    循环体<br>&#125;<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WhileDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//输出1~100</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i&lt;<span class="hljs-number">100</span>)&#123;<br>            i++;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意点</p><ul><li>循环体内一定要有能让布尔表达式为false的情况，否则就是死循环，会一直执行循环体</li></ul><p>死循环</p><p>当我们有特殊需求需要使用死循环的时候</p><p>例如：输出0~无限大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WhileDemo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            i++;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>尽量不要这么写，cpu会卡死！！！</p><p><strong>do - while循环</strong></p><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-comment">//循环体语句</span><br>&#125; <span class="hljs-keyword">while</span> (布尔表达式);<br></code></pre></td></tr></table></figure><p>相对于while循环，do-while循环会至少执行一次循环体</p><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoWhileDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">while</span> (a &lt; <span class="hljs-number">0</span>) &#123;<br>            a++;<br>            System.out.println(a);<br>        &#125;<br>        <span class="hljs-keyword">do</span> &#123;<br>            a++;<br>            System.out.println(a);<span class="hljs-comment">//这里会输出1</span><br>        &#125; <span class="hljs-keyword">while</span> (a &lt; <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>for循环</strong></p><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (初始化语句;布尔表达式;更新) &#123;<br>    <span class="hljs-comment">//循环体语句</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意点：</p><ul><li>先执行初始化语句，初始化语句可以初始化一个或多个循环控制变量，也可以为空</li><li>然后执行布尔表达式，布尔表达式为true则执行一次循环体语句，之后是更新语句，布尔表达式，循环体语句……直到布尔表达式为false就执行终止循环</li></ul><p>练习题1：计算0~100之间奇数与偶数的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">```<br><br><br><br>练习题<span class="hljs-number">2</span>：用<span class="hljs-keyword">for</span>循环输出<span class="hljs-number">1</span>~<span class="hljs-number">1000</span>之间能被<span class="hljs-number">5</span>整除的数，每行三个<br><br>```java<br></code></pre></td></tr></table></figure><p>练习题3：打印九九乘法表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">```<br><br>**增强<span class="hljs-keyword">for</span>循环**<br><br>Java5引入了一种主要用于数组或者集合的增强型<span class="hljs-keyword">for</span>循环<br><br>语法格式<br><br>```java<br><span class="hljs-keyword">for</span> (声明语句:表达式) &#123;<br>    <span class="hljs-comment">//代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意点</p><ul><li>声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环体语句块，其值与此时数组元素的值相等。</li><li>表达式：表达式是要访问的数组名或者是返回值为数组的方法。</li></ul><h3 id="break-amp-continue"><a href="#break-amp-continue" class="headerlink" title="break &amp; continue"></a>break &amp; continue</h3><p>break在任何循环体主体部分，均可用break控制循环的流程。break<strong>用于强行退出循环</strong>，不执行循环中的剩余语句。</p><p>continue语句实在循环体语句中，<strong>用于阻止某次循环</strong>，即跳过循环体中未执行的语句，接着进行下一次是否执行循环的判定。</p><p>拓展：</p><p><strong>goto关键字</strong>很早就在程序设计语言中出现。尽管goto仍是Java的一个保留字，但并未在语言中得到正式的使用；Java没有goto。然而在break和continue这两个关键字上，可以看到goto的影子————带标签的break和continue</p><p>标签是指后面跟一个冒号的标识符例如：label</p><p>对于Java来说，唯一用到标签的地方是在循环语句之前。在循环语句之前设置标签的唯一理由是：我们希望在其中嵌套另一个循环，因为break和continue关键字只会终止当前循环，但是如果和标签一起使用，他们就会中断到存在标签的地方</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>什么是方法</p><p>方法定义</p><p>方法调用</p><p>方法重载</p><p>命令行传参</p><p>可变长参数</p><p>递归</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组的定义</p><p>数组的使用</p><p>二维数组</p><p>Arrays工具类</p><p>排序算法</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>什么是对象</p><p>类与对象</p><p>构造方法</p><p>new对象</p><p>封装</p><p>继承</p><p>多态</p><p>修饰符</p><p>接口</p><p>内部类</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>Throwable</p><p>五个关键字</p><p>自定义异常</p><h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><p>Object</p><p>Math</p><p>Random</p><p>File</p><p>包装类</p><p>Data</p><p>String</p><p>StringBuffer</p><p>StringBuilder</p><h2 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h2><p>Collection</p><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><p>字节流</p><p>字符流</p><p>节点流</p><p>处理流</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>进程与线程</p><p>run()，start()</p><p>线程创建方式</p><p>静态代理</p><p>Lambda表达式</p><p>线程的状态</p><p>常用的方法</p><p>线程同步</p><p>线程通信</p><p>线程池pool</p><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><p>IP</p><p>端口</p><p>Socket</p><p>TCP</p><p>UDP</p><p>URL</p><p>初始Tomcat</p><p>聊天通讯</p><p>文件上传</p><h2 id="GUI图形界面"><a href="#GUI图形界面" class="headerlink" title="GUI图形界面"></a>GUI图形界面</h2><p>AWT</p><p>SWing</p><p>贪吃蛇</p><h2 id="注解与反射"><a href="#注解与反射" class="headerlink" title="注解与反射"></a>注解与反射</h2><p>注解</p><p>反射</p><p>单例模式的探究</p><p>Stream</p><p>ForkJoin</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法</title>
    <link href="/2021/04/29/Markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/04/29/Markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><h2 id="标题："><a href="#标题：" class="headerlink" title="标题："></a>标题：</h2><p>#空格+标题名称</p><h2 id="字体："><a href="#字体：" class="headerlink" title="字体："></a>字体：</h2><p><strong>粗体</strong>    在字的两边加**</p><p><em>斜体</em>    在字的两边加*</p><p><del>删除线</del></p><h2 id="引用："><a href="#引用：" class="headerlink" title="引用："></a>引用：</h2><blockquote><p>大于号+空格就是引用</p></blockquote><h2 id="分割线："><a href="#分割线：" class="headerlink" title="分割线："></a>分割线：</h2><hr><p>三条杠或三个*</p><h2 id="图片："><a href="#图片：" class="headerlink" title="图片："></a>图片：</h2><p><img src="" alt="图片名"></p><h2 id="超链接："><a href="#超链接：" class="headerlink" title="超链接："></a>超链接：</h2><p><a href="www.bilibili.com">B站</a></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li>1点空格</li><li>。。。。。。</li></ol><ul><li>减号空格</li><li>。。。。。。</li></ul><h2 id="表格："><a href="#表格：" class="headerlink" title="表格："></a>表格：</h2><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客的搭建部署</title>
    <link href="/2021/04/20/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/"/>
    <url>/2021/04/20/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo博客搭建教程"><a href="#Hexo博客搭建教程" class="headerlink" title="Hexo博客搭建教程"></a>Hexo博客搭建教程</h1><p>其实<a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a>更详尽，这里就按步骤写起</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="下载安装Git"><a href="#下载安装Git" class="headerlink" title="下载安装Git"></a>下载安装Git</h3><ol><li><p>到<a href="https://gitforwindows.org/">Git官网</a>下载合适版本的Git，并安装</p></li><li><p>检测安装是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version//查看Git版本<br></code></pre></td></tr></table></figure></li></ol><span id="more"></span><p>Git安装成功后可以用Git Bash来进行命令行操作</p><h3 id="下载安装Note-js"><a href="#下载安装Note-js" class="headerlink" title="下载安装Note.js"></a>下载安装Note.js</h3><ol><li><p>到<a href="http://nodejs.cn/download/">Note.js中文官网</a>下载合适的版本，并安装</p></li><li><p>检测是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v//查看note版本<br>npm -v//查看npm版本<br></code></pre></td></tr></table></figure></li></ol><h2 id="搭建本地博客"><a href="#搭建本地博客" class="headerlink" title="搭建本地博客"></a>搭建本地博客</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ol><li><p>打开Git Bash，输入下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><p>检测是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure></li></ol><h3 id="博客初始化"><a href="#博客初始化" class="headerlink" title="博客初始化"></a>博客初始化</h3><ol><li><p>新建一个文件夹作为博客的目录，例如将博客目录设置为myblog</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myblog<br></code></pre></td></tr></table></figure></li><li><p>初始化博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> myblog<br>npm install<br></code></pre></td></tr></table></figure></li></ol><h3 id="博客本地效果"><a href="#博客本地效果" class="headerlink" title="博客本地效果"></a>博客本地效果</h3><ol><li><p>Git Bash执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -g//生成静态页面<br>hexo server//本地预览<br></code></pre></td></tr></table></figure></li><li><p>查看<a href="http://localhost:4000/">本地博客</a>效果</p></li></ol><h2 id="将博客部署到Github"><a href="#将博客部署到Github" class="headerlink" title="将博客部署到Github"></a>将博客部署到Github</h2><h3 id="创建个人Github仓库"><a href="#创建个人Github仓库" class="headerlink" title="创建个人Github仓库"></a>创建个人Github仓库</h3><ol><li>注册一个Github账号，并登录</li><li>新建一个Github仓库，并命名为yourname.github.io。必须按此格式命名，这里yourname可以自定义，比如我的仓库名Linsip.github.io</li></ol><h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><ol><li><p>Git Bash输入下面的命令，生成密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;你的github账户名字&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;你的github邮箱&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>检测输入的用户名与邮箱是否正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config user.name<br>git config user.email<br></code></pre></td></tr></table></figure></li><li><p>输入下面命令创建SSH密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>上传SSH密钥到Github</p></li></ol><h3 id="部署代码到Github上"><a href="#部署代码到Github上" class="headerlink" title="部署代码到Github上"></a>部署代码到Github上</h3><ol><li><p>找到并打开配置文件，修改其内容</p></li><li><p>Git Bash输入下面命令，安装hexo-deployer-git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save//<br></code></pre></td></tr></table></figure></li><li><p>继续执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean//<br>hexo generate//<br>hexo deploy//<br></code></pre></td></tr></table></figure></li><li><p>打开网址<a href="http://yourname.github.io/">http://yourname.github.io</a>就可以看到你自己搭建的博客。这里的yourname就是你Github仓库的名字</p></li></ol><h2 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h2><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><p>待完善</p><h2 id="Hexo博客常用命令"><a href="#Hexo博客常用命令" class="headerlink" title="Hexo博客常用命令"></a>Hexo博客常用命令</h2><h3 id="新建博客目录"><a href="#新建博客目录" class="headerlink" title="新建博客目录"></a>新建博客目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init &lt;folder&gt;<br></code></pre></td></tr></table></figure><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new [layout] &lt;title&gt;<br>//例如<br>hexo n <span class="hljs-string">&quot;我的第一篇博客&quot;</span><br></code></pre></td></tr></table></figure><h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure><h3 id="部署内容到网站"><a href="#部署内容到网站" class="headerlink" title="部署内容到网站"></a>部署内容到网站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></table></figure><h3 id="启用本地预览"><a href="#启用本地预览" class="headerlink" title="启用本地预览"></a>启用本地预览</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><h2 id="Hexo博客常见问题"><a href="#Hexo博客常见问题" class="headerlink" title="Hexo博客常见问题"></a>Hexo博客常见问题</h2><h3 id="更换博客主题"><a href="#更换博客主题" class="headerlink" title="更换博客主题"></a>更换博客主题</h3><p>到<a href="https://hexo.io/themes">Hexo官网</a>找到自己喜欢的主题，</p><p>让后输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
